"""Report generation tools module for agent integration.

This module provides agent-compatible tools for creating and managing
vulnerability analysis reports in markdown format.
"""

from typing import Optional
from datetime import datetime
import os

from agents import function_tool, Tool

from ..config.settings import Settings
from ..agents.multi_agent import MultiAgentContext

import logging

logger = logging.getLogger(__name__)


def create_report_tools(
    settings: Settings, context: Optional[MultiAgentContext] = None
) -> list[Tool]:
    """Create a tool for generating vulnerability analysis reports.

    This tool allows agents to create and save markdown reports based on
    vulnerability analysis results or general security assessments.

    Args:
        settings: The configuration settings for the IVEXES system.
        context: The multi-agent context providing shared memory and settings.

    Returns:
        A Tool instance that can be used by agents to create reports.
    """

    @function_tool
    def create_report(content: str, report_name: Optional[str] = None) -> str:
        """Create and save a markdown vulnerability analysis report.

        Args:
            content: The main content of the report in markdown format
            report_name: Optional report identifier, representing a specific vulnerability.
                          If provided, creates a specific report for this vulnerability.
                          If None, creates a general analysis report.
        """
        logger.info(f'running create_report({report_name=})')

        # settings parameter is provided to create_report_tools

        # Create reports directory if it doesn't exist
        reports_dir = os.path.join(os.getcwd(), 'output', 'reports')
        os.makedirs(reports_dir, exist_ok=True)

        # Generate filename based on vulnerability or timestamp
        timestamp = datetime.now().strftime('%Y%m%d_%H%M%S')
        if report_name:
            # Sanitize vulnerability name for filename
            sanitize = lambda t: ''.join(
                c if c.isalnum() or c in '._-' else '_' for c in t
            ).strip('-')
            safe_report = sanitize(report_name)
            safe_name = sanitize(settings.trace_name or 'ivexes')

            filename = f'vulnerability_report_{safe_name}_{safe_report}_{timestamp}.md'
        else:
            filename = f'security_analysis_report_{timestamp}.md'

        filepath = os.path.join(reports_dir, filename)

        # Create report with provided content
        report_content = f"""
# Security Analysis Report

**Generated:** {datetime.now().strftime('%Y-%m-%d %H:%M:%S')}
"""
        if report_name:
            report_content += f'**Vulnerability:** {report_name}\n'

        report_content += f"""
**Codebase:** {settings.codebase_path or 'N/A'}

{content}

"""
        if context:
            report_content += f"""
---

{str(context)}

---
"""
        report_content += f"""
---
*Report generated by IVEXES Multi-Agent Security Analysis System*
"""

        try:
            with open(filepath, 'w', encoding='utf-8') as f:
                f.write(report_content)

            if context:
                context.report_generated = True
            return f'Report successfully created: {filename}\n\n<report_path>\n{filepath}\n</report_path>'

        except Exception as e:
            logger.error(f'Failed to create report: {e}')
            return f'Failed to create report: {str(e)}'

    return [create_report]
